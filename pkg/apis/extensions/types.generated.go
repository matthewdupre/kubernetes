/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			var yynn66 int
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				yynn66 = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
				yynn66 = 0
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct74 := r.ContainerType()
		if yyct74 == codecSelferValueTypeMap1234 {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if yyct74 == codecSelferValueTypeArray1234 {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [4]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Name != ""
			yyq82[2] = x.APIVersion != ""
			yyq82[3] = x.Subresource != ""
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(4)
			} else {
				yynn82 = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj102 int
	var yyb102 bool
	var yyhl102 bool = l >= 0
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj102++
		if yyhl102 {
			yyb102 = yyj102 > l
		} else {
			yyb102 = r.CheckBreak()
		}
		if yyb102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym107 := z.EncBinary()
		_ = yym107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep108 := !z.EncBinary()
			yy2arr108 := z.EncBasicHandle().StructToArray
			var yyq108 [1]bool
			_, _, _ = yysep108, yyq108, yy2arr108
			const yyr108 bool = false
			var yynn108 int
			if yyr108 || yy2arr108 {
				r.EncodeArrayStart(1)
			} else {
				yynn108 = 1
				for _, b := range yyq108 {
					if b {
						yynn108++
					}
				}
				r.EncodeMapStart(yynn108)
				yynn108 = 0
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym112 := z.DecBinary()
	_ = yym112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct113 := r.ContainerType()
		if yyct113 == codecSelferValueTypeMap1234 {
			yyl113 := r.ReadMapStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl113, d)
			}
		} else if yyct113 == codecSelferValueTypeArray1234 {
			yyl113 := r.ReadArrayStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys114Slc
	var yyhl114 bool = l >= 0
	for yyj114 := 0; ; yyj114++ {
		if yyhl114 {
			if yyj114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys114Slc = r.DecodeBytes(yys114Slc, true, true)
		yys114 := string(yys114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys114 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys114)
		} // end switch yys114
	} // end for yyj114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj116 int
	var yyb116 bool
	var yyhl116 bool = l >= 0
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj116++
		if yyhl116 {
			yyb116 = yyj116 > l
		} else {
			yyb116 = r.CheckBreak()
		}
		if yyb116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym118 := z.EncBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep119 := !z.EncBinary()
			yy2arr119 := z.EncBasicHandle().StructToArray
			var yyq119 [2]bool
			_, _, _ = yysep119, yyq119, yy2arr119
			const yyr119 bool = false
			var yynn119 int
			if yyr119 || yy2arr119 {
				r.EncodeArrayStart(2)
			} else {
				yynn119 = 2
				for _, b := range yyq119 {
					if b {
						yynn119++
					}
				}
				r.EncodeMapStart(yynn119)
				yynn119 = 0
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym121 := z.EncBinary()
				_ = yym121
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy124 := &x.TargetValue
				yym125 := z.EncBinary()
				_ = yym125
				if false {
				} else if z.HasExtensions() && z.EncExt(yy124) {
				} else if !yym125 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy124)
				} else {
					z.EncFallback(yy124)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy126 := &x.TargetValue
				yym127 := z.EncBinary()
				_ = yym127
				if false {
				} else if z.HasExtensions() && z.EncExt(yy126) {
				} else if !yym127 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy126)
				} else {
					z.EncFallback(yy126)
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv132 := &x.TargetValue
				yym133 := z.DecBinary()
				_ = yym133
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv132) {
				} else if !yym133 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv132)
				} else {
					z.DecFallback(yyv132, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj134 int
	var yyb134 bool
	var yyhl134 bool = l >= 0
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv136 := &x.TargetValue
		yym137 := z.DecBinary()
		_ = yym137
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv136) {
		} else if !yym137 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv136)
		} else {
			z.DecFallback(yyv136, false)
		}
	}
	for {
		yyj134++
		if yyhl134 {
			yyb134 = yyj134 > l
		} else {
			yyb134 = r.CheckBreak()
		}
		if yyb134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym138 := z.EncBinary()
		_ = yym138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep139 := !z.EncBinary()
			yy2arr139 := z.EncBasicHandle().StructToArray
			var yyq139 [1]bool
			_, _, _ = yysep139, yyq139, yy2arr139
			const yyr139 bool = false
			var yynn139 int
			if yyr139 || yy2arr139 {
				r.EncodeArrayStart(1)
			} else {
				yynn139 = 1
				for _, b := range yyq139 {
					if b {
						yynn139++
					}
				}
				r.EncodeMapStart(yynn139)
				yynn139 = 0
			}
			if yyr139 || yy2arr139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym141 := z.EncBinary()
					_ = yym141
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym142 := z.EncBinary()
					_ = yym142
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr139 || yy2arr139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym143 := z.DecBinary()
	_ = yym143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct144 := r.ContainerType()
		if yyct144 == codecSelferValueTypeMap1234 {
			yyl144 := r.ReadMapStart()
			if yyl144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl144, d)
			}
		} else if yyct144 == codecSelferValueTypeArray1234 {
			yyl144 := r.ReadArrayStart()
			if yyl144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys145Slc
	var yyhl145 bool = l >= 0
	for yyj145 := 0; ; yyj145++ {
		if yyhl145 {
			if yyj145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys145Slc = r.DecodeBytes(yys145Slc, true, true)
		yys145 := string(yys145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys145 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv146 := &x.Items
				yym147 := z.DecBinary()
				_ = yym147
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv146), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys145)
		} // end switch yys145
	} // end for yyj145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj148 int
	var yyb148 bool
	var yyhl148 bool = l >= 0
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv149 := &x.Items
		yym150 := z.DecBinary()
		_ = yym150
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv149), d)
		}
	}
	for {
		yyj148++
		if yyhl148 {
			yyb148 = yyj148 > l
		} else {
			yyb148 = r.CheckBreak()
		}
		if yyb148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym151 := z.EncBinary()
		_ = yym151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep152 := !z.EncBinary()
			yy2arr152 := z.EncBasicHandle().StructToArray
			var yyq152 [2]bool
			_, _, _ = yysep152, yyq152, yy2arr152
			const yyr152 bool = false
			var yynn152 int
			if yyr152 || yy2arr152 {
				r.EncodeArrayStart(2)
			} else {
				yynn152 = 2
				for _, b := range yyq152 {
					if b {
						yynn152++
					}
				}
				r.EncodeMapStart(yynn152)
				yynn152 = 0
			}
			if yyr152 || yy2arr152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym154 := z.EncBinary()
				_ = yym154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym155 := z.EncBinary()
				_ = yym155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr152 || yy2arr152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy157 := &x.CurrentValue
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else if z.HasExtensions() && z.EncExt(yy157) {
				} else if !yym158 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy157)
				} else {
					z.EncFallback(yy157)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy159 := &x.CurrentValue
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else if z.HasExtensions() && z.EncExt(yy159) {
				} else if !yym160 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy159)
				} else {
					z.EncFallback(yy159)
				}
			}
			if yyr152 || yy2arr152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym161 := z.DecBinary()
	_ = yym161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct162 := r.ContainerType()
		if yyct162 == codecSelferValueTypeMap1234 {
			yyl162 := r.ReadMapStart()
			if yyl162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl162, d)
			}
		} else if yyct162 == codecSelferValueTypeArray1234 {
			yyl162 := r.ReadArrayStart()
			if yyl162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys163Slc
	var yyhl163 bool = l >= 0
	for yyj163 := 0; ; yyj163++ {
		if yyhl163 {
			if yyj163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys163Slc = r.DecodeBytes(yys163Slc, true, true)
		yys163 := string(yys163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys163 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv165 := &x.CurrentValue
				yym166 := z.DecBinary()
				_ = yym166
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv165) {
				} else if !yym166 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv165)
				} else {
					z.DecFallback(yyv165, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys163)
		} // end switch yys163
	} // end for yyj163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj167 int
	var yyb167 bool
	var yyhl167 bool = l >= 0
	yyj167++
	if yyhl167 {
		yyb167 = yyj167 > l
	} else {
		yyb167 = r.CheckBreak()
	}
	if yyb167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj167++
	if yyhl167 {
		yyb167 = yyj167 > l
	} else {
		yyb167 = r.CheckBreak()
	}
	if yyb167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv169 := &x.CurrentValue
		yym170 := z.DecBinary()
		_ = yym170
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv169) {
		} else if !yym170 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv169)
		} else {
			z.DecFallback(yyv169, false)
		}
	}
	for {
		yyj167++
		if yyhl167 {
			yyb167 = yyj167 > l
		} else {
			yyb167 = r.CheckBreak()
		}
		if yyb167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym171 := z.EncBinary()
		_ = yym171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep172 := !z.EncBinary()
			yy2arr172 := z.EncBasicHandle().StructToArray
			var yyq172 [1]bool
			_, _, _ = yysep172, yyq172, yy2arr172
			const yyr172 bool = false
			var yynn172 int
			if yyr172 || yy2arr172 {
				r.EncodeArrayStart(1)
			} else {
				yynn172 = 1
				for _, b := range yyq172 {
					if b {
						yynn172++
					}
				}
				r.EncodeMapStart(yynn172)
				yynn172 = 0
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym175 := z.EncBinary()
					_ = yym175
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym176 := z.DecBinary()
	_ = yym176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct177 := r.ContainerType()
		if yyct177 == codecSelferValueTypeMap1234 {
			yyl177 := r.ReadMapStart()
			if yyl177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl177, d)
			}
		} else if yyct177 == codecSelferValueTypeArray1234 {
			yyl177 := r.ReadArrayStart()
			if yyl177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys178Slc
	var yyhl178 bool = l >= 0
	for yyj178 := 0; ; yyj178++ {
		if yyhl178 {
			if yyj178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys178Slc = r.DecodeBytes(yys178Slc, true, true)
		yys178 := string(yys178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys178 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv179 := &x.Items
				yym180 := z.DecBinary()
				_ = yym180
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv179), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys178)
		} // end switch yys178
	} // end for yyj178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj181 int
	var yyb181 bool
	var yyhl181 bool = l >= 0
	yyj181++
	if yyhl181 {
		yyb181 = yyj181 > l
	} else {
		yyb181 = r.CheckBreak()
	}
	if yyb181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv182 := &x.Items
		yym183 := z.DecBinary()
		_ = yym183
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv182), d)
		}
	}
	for {
		yyj181++
		if yyhl181 {
			yyb181 = yyj181 > l
		} else {
			yyb181 = r.CheckBreak()
		}
		if yyb181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym184 := z.EncBinary()
		_ = yym184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep185 := !z.EncBinary()
			yy2arr185 := z.EncBasicHandle().StructToArray
			var yyq185 [4]bool
			_, _, _ = yysep185, yyq185, yy2arr185
			const yyr185 bool = false
			yyq185[1] = x.MinReplicas != nil
			yyq185[3] = x.CPUUtilization != nil
			var yynn185 int
			if yyr185 || yy2arr185 {
				r.EncodeArrayStart(4)
			} else {
				yynn185 = 2
				for _, b := range yyq185 {
					if b {
						yynn185++
					}
				}
				r.EncodeMapStart(yynn185)
				yynn185 = 0
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy187 := &x.ScaleRef
				yy187.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy188 := &x.ScaleRef
				yy188.CodecEncodeSelf(e)
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy190 := *x.MinReplicas
						yym191 := z.EncBinary()
						_ = yym191
						if false {
						} else {
							r.EncodeInt(int64(yy190))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy192 := *x.MinReplicas
						yym193 := z.EncBinary()
						_ = yym193
						if false {
						} else {
							r.EncodeInt(int64(yy192))
						}
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym195 := z.EncBinary()
				_ = yym195
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym196 := z.EncBinary()
				_ = yym196
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq185[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym198 := z.DecBinary()
	_ = yym198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct199 := r.ContainerType()
		if yyct199 == codecSelferValueTypeMap1234 {
			yyl199 := r.ReadMapStart()
			if yyl199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl199, d)
			}
		} else if yyct199 == codecSelferValueTypeArray1234 {
			yyl199 := r.ReadArrayStart()
			if yyl199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys200Slc
	var yyhl200 bool = l >= 0
	for yyj200 := 0; ; yyj200++ {
		if yyhl200 {
			if yyj200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys200Slc = r.DecodeBytes(yys200Slc, true, true)
		yys200 := string(yys200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys200 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv201 := &x.ScaleRef
				yyv201.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym203 := z.DecBinary()
				_ = yym203
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys200)
		} // end switch yys200
	} // end for yyj200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj206 int
	var yyb206 bool
	var yyhl206 bool = l >= 0
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv207 := &x.ScaleRef
		yyv207.CodecDecodeSelf(d)
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym209 := z.DecBinary()
		_ = yym209
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj206++
		if yyhl206 {
			yyb206 = yyj206 > l
		} else {
			yyb206 = r.CheckBreak()
		}
		if yyb206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym212 := z.EncBinary()
		_ = yym212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep213 := !z.EncBinary()
			yy2arr213 := z.EncBasicHandle().StructToArray
			var yyq213 [5]bool
			_, _, _ = yysep213, yyq213, yy2arr213
			const yyr213 bool = false
			yyq213[0] = x.ObservedGeneration != nil
			yyq213[1] = x.LastScaleTime != nil
			yyq213[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn213 int
			if yyr213 || yy2arr213 {
				r.EncodeArrayStart(5)
			} else {
				yynn213 = 2
				for _, b := range yyq213 {
					if b {
						yynn213++
					}
				}
				r.EncodeMapStart(yynn213)
				yynn213 = 0
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy215 := *x.ObservedGeneration
						yym216 := z.EncBinary()
						_ = yym216
						if false {
						} else {
							r.EncodeInt(int64(yy215))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy217 := *x.ObservedGeneration
						yym218 := z.EncBinary()
						_ = yym218
						if false {
						} else {
							r.EncodeInt(int64(yy217))
						}
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym220 := z.EncBinary()
						_ = yym220
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym220 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym220 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym221 := z.EncBinary()
						_ = yym221
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym221 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym221 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym223 := z.EncBinary()
				_ = yym223
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym224 := z.EncBinary()
				_ = yym224
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym226 := z.EncBinary()
				_ = yym226
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym227 := z.EncBinary()
				_ = yym227
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy229 := *x.CurrentCPUUtilizationPercentage
						yym230 := z.EncBinary()
						_ = yym230
						if false {
						} else {
							r.EncodeInt(int64(yy229))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy231 := *x.CurrentCPUUtilizationPercentage
						yym232 := z.EncBinary()
						_ = yym232
						if false {
						} else {
							r.EncodeInt(int64(yy231))
						}
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym233 := z.DecBinary()
	_ = yym233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct234 := r.ContainerType()
		if yyct234 == codecSelferValueTypeMap1234 {
			yyl234 := r.ReadMapStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl234, d)
			}
		} else if yyct234 == codecSelferValueTypeArray1234 {
			yyl234 := r.ReadArrayStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys235Slc
	var yyhl235 bool = l >= 0
	for yyj235 := 0; ; yyj235++ {
		if yyhl235 {
			if yyj235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys235Slc = r.DecodeBytes(yys235Slc, true, true)
		yys235 := string(yys235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys235 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym237 := z.DecBinary()
				_ = yym237
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym239 := z.DecBinary()
				_ = yym239
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym239 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym239 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym243 := z.DecBinary()
				_ = yym243
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys235)
		} // end switch yys235
	} // end for yyj235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj244 int
	var yyb244 bool
	var yyhl244 bool = l >= 0
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym246 := z.DecBinary()
		_ = yym246
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym248 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym248 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym252 := z.DecBinary()
		_ = yym252
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj244++
		if yyhl244 {
			yyb244 = yyj244 > l
		} else {
			yyb244 = r.CheckBreak()
		}
		if yyb244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym253 := z.EncBinary()
		_ = yym253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep254 := !z.EncBinary()
			yy2arr254 := z.EncBasicHandle().StructToArray
			var yyq254 [5]bool
			_, _, _ = yysep254, yyq254, yy2arr254
			const yyr254 bool = false
			yyq254[0] = x.Kind != ""
			yyq254[1] = x.APIVersion != ""
			yyq254[2] = true
			yyq254[3] = true
			yyq254[4] = true
			var yynn254 int
			if yyr254 || yy2arr254 {
				r.EncodeArrayStart(5)
			} else {
				yynn254 = 0
				for _, b := range yyq254 {
					if b {
						yynn254++
					}
				}
				r.EncodeMapStart(yynn254)
				yynn254 = 0
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[0] {
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq254[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[1] {
					yym259 := z.EncBinary()
					_ = yym259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq254[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[2] {
					yy262 := &x.ObjectMeta
					yym263 := z.EncBinary()
					_ = yym263
					if false {
					} else if z.HasExtensions() && z.EncExt(yy262) {
					} else {
						z.EncFallback(yy262)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq254[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy264 := &x.ObjectMeta
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else if z.HasExtensions() && z.EncExt(yy264) {
					} else {
						z.EncFallback(yy264)
					}
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[3] {
					yy267 := &x.Spec
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq254[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.Spec
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[4] {
					yy270 := &x.Status
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq254[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Status
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym272 := z.DecBinary()
	_ = yym272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct273 := r.ContainerType()
		if yyct273 == codecSelferValueTypeMap1234 {
			yyl273 := r.ReadMapStart()
			if yyl273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl273, d)
			}
		} else if yyct273 == codecSelferValueTypeArray1234 {
			yyl273 := r.ReadArrayStart()
			if yyl273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys274Slc
	var yyhl274 bool = l >= 0
	for yyj274 := 0; ; yyj274++ {
		if yyhl274 {
			if yyj274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys274Slc = r.DecodeBytes(yys274Slc, true, true)
		yys274 := string(yys274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys274 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv277 := &x.ObjectMeta
				yym278 := z.DecBinary()
				_ = yym278
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv277) {
				} else {
					z.DecFallback(yyv277, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv279 := &x.Spec
				yyv279.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv280 := &x.Status
				yyv280.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys274)
		} // end switch yys274
	} // end for yyj274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj281 int
	var yyb281 bool
	var yyhl281 bool = l >= 0
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv284 := &x.ObjectMeta
		yym285 := z.DecBinary()
		_ = yym285
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv284) {
		} else {
			z.DecFallback(yyv284, false)
		}
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv286 := &x.Spec
		yyv286.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv287 := &x.Status
		yyv287.CodecDecodeSelf(d)
	}
	for {
		yyj281++
		if yyhl281 {
			yyb281 = yyj281 > l
		} else {
			yyb281 = r.CheckBreak()
		}
		if yyb281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym288 := z.EncBinary()
		_ = yym288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep289 := !z.EncBinary()
			yy2arr289 := z.EncBasicHandle().StructToArray
			var yyq289 [4]bool
			_, _, _ = yysep289, yyq289, yy2arr289
			const yyr289 bool = false
			yyq289[0] = x.Kind != ""
			yyq289[1] = x.APIVersion != ""
			yyq289[2] = true
			var yynn289 int
			if yyr289 || yy2arr289 {
				r.EncodeArrayStart(4)
			} else {
				yynn289 = 1
				for _, b := range yyq289 {
					if b {
						yynn289++
					}
				}
				r.EncodeMapStart(yynn289)
				yynn289 = 0
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq289[0] {
					yym291 := z.EncBinary()
					_ = yym291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq289[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym292 := z.EncBinary()
					_ = yym292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq289[1] {
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq289[2] {
					yy297 := &x.ListMeta
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else if z.HasExtensions() && z.EncExt(yy297) {
					} else {
						z.EncFallback(yy297)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy299 := &x.ListMeta
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else if z.HasExtensions() && z.EncExt(yy299) {
					} else {
						z.EncFallback(yy299)
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym304 := z.DecBinary()
	_ = yym304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct305 := r.ContainerType()
		if yyct305 == codecSelferValueTypeMap1234 {
			yyl305 := r.ReadMapStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl305, d)
			}
		} else if yyct305 == codecSelferValueTypeArray1234 {
			yyl305 := r.ReadArrayStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys306Slc
	var yyhl306 bool = l >= 0
	for yyj306 := 0; ; yyj306++ {
		if yyhl306 {
			if yyj306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys306Slc = r.DecodeBytes(yys306Slc, true, true)
		yys306 := string(yys306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys306 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv309 := &x.ListMeta
				yym310 := z.DecBinary()
				_ = yym310
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv309) {
				} else {
					z.DecFallback(yyv309, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv311 := &x.Items
				yym312 := z.DecBinary()
				_ = yym312
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv311), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys306)
		} // end switch yys306
	} // end for yyj306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj313 int
	var yyb313 bool
	var yyhl313 bool = l >= 0
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv316 := &x.ListMeta
		yym317 := z.DecBinary()
		_ = yym317
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv316) {
		} else {
			z.DecFallback(yyv316, false)
		}
	}
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv318 := &x.Items
		yym319 := z.DecBinary()
		_ = yym319
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv318), d)
		}
	}
	for {
		yyj313++
		if yyhl313 {
			yyb313 = yyj313 > l
		} else {
			yyb313 = r.CheckBreak()
		}
		if yyb313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym320 := z.EncBinary()
		_ = yym320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep321 := !z.EncBinary()
			yy2arr321 := z.EncBasicHandle().StructToArray
			var yyq321 [5]bool
			_, _, _ = yysep321, yyq321, yy2arr321
			const yyr321 bool = false
			yyq321[0] = x.Kind != ""
			yyq321[1] = x.APIVersion != ""
			yyq321[2] = true
			yyq321[3] = x.Description != ""
			yyq321[4] = len(x.Versions) != 0
			var yynn321 int
			if yyr321 || yy2arr321 {
				r.EncodeArrayStart(5)
			} else {
				yynn321 = 0
				for _, b := range yyq321 {
					if b {
						yynn321++
					}
				}
				r.EncodeMapStart(yynn321)
				yynn321 = 0
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[0] {
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq321[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym324 := z.EncBinary()
					_ = yym324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[1] {
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq321[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[2] {
					yy329 := &x.ObjectMeta
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy329) {
					} else {
						z.EncFallback(yy329)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq321[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy331 := &x.ObjectMeta
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy331) {
					} else {
						z.EncFallback(yy331)
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[3] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq321[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym337 := z.EncBinary()
						_ = yym337
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq321[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym338 := z.EncBinary()
						_ = yym338
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym339 := z.DecBinary()
	_ = yym339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct340 := r.ContainerType()
		if yyct340 == codecSelferValueTypeMap1234 {
			yyl340 := r.ReadMapStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl340, d)
			}
		} else if yyct340 == codecSelferValueTypeArray1234 {
			yyl340 := r.ReadArrayStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys341Slc
	var yyhl341 bool = l >= 0
	for yyj341 := 0; ; yyj341++ {
		if yyhl341 {
			if yyj341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys341Slc = r.DecodeBytes(yys341Slc, true, true)
		yys341 := string(yys341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv344 := &x.ObjectMeta
				yym345 := z.DecBinary()
				_ = yym345
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv344) {
				} else {
					z.DecFallback(yyv344, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv347 := &x.Versions
				yym348 := z.DecBinary()
				_ = yym348
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv347), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys341)
		} // end switch yys341
	} // end for yyj341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj349 int
	var yyb349 bool
	var yyhl349 bool = l >= 0
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv352 := &x.ObjectMeta
		yym353 := z.DecBinary()
		_ = yym353
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv352) {
		} else {
			z.DecFallback(yyv352, false)
		}
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv355 := &x.Versions
		yym356 := z.DecBinary()
		_ = yym356
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv355), d)
		}
	}
	for {
		yyj349++
		if yyhl349 {
			yyb349 = yyj349 > l
		} else {
			yyb349 = r.CheckBreak()
		}
		if yyb349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym357 := z.EncBinary()
		_ = yym357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep358 := !z.EncBinary()
			yy2arr358 := z.EncBasicHandle().StructToArray
			var yyq358 [4]bool
			_, _, _ = yysep358, yyq358, yy2arr358
			const yyr358 bool = false
			yyq358[0] = x.Kind != ""
			yyq358[1] = x.APIVersion != ""
			yyq358[2] = true
			var yynn358 int
			if yyr358 || yy2arr358 {
				r.EncodeArrayStart(4)
			} else {
				yynn358 = 1
				for _, b := range yyq358 {
					if b {
						yynn358++
					}
				}
				r.EncodeMapStart(yynn358)
				yynn358 = 0
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq358[0] {
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym361 := z.EncBinary()
					_ = yym361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq358[1] {
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq358[2] {
					yy366 := &x.ListMeta
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy366) {
					} else {
						z.EncFallback(yy366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy368 := &x.ListMeta
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy368) {
					} else {
						z.EncFallback(yy368)
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym373 := z.DecBinary()
	_ = yym373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct374 := r.ContainerType()
		if yyct374 == codecSelferValueTypeMap1234 {
			yyl374 := r.ReadMapStart()
			if yyl374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl374, d)
			}
		} else if yyct374 == codecSelferValueTypeArray1234 {
			yyl374 := r.ReadArrayStart()
			if yyl374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys375Slc
	var yyhl375 bool = l >= 0
	for yyj375 := 0; ; yyj375++ {
		if yyhl375 {
			if yyj375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys375Slc = r.DecodeBytes(yys375Slc, true, true)
		yys375 := string(yys375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv378 := &x.ListMeta
				yym379 := z.DecBinary()
				_ = yym379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv378) {
				} else {
					z.DecFallback(yyv378, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv380 := &x.Items
				yym381 := z.DecBinary()
				_ = yym381
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv380), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys375)
		} // end switch yys375
	} // end for yyj375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj382 int
	var yyb382 bool
	var yyhl382 bool = l >= 0
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv385 := &x.ListMeta
		yym386 := z.DecBinary()
		_ = yym386
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv385) {
		} else {
			z.DecFallback(yyv385, false)
		}
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv387 := &x.Items
		yym388 := z.DecBinary()
		_ = yym388
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv387), d)
		}
	}
	for {
		yyj382++
		if yyhl382 {
			yyb382 = yyj382 > l
		} else {
			yyb382 = r.CheckBreak()
		}
		if yyb382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym389 := z.EncBinary()
		_ = yym389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep390 := !z.EncBinary()
			yy2arr390 := z.EncBasicHandle().StructToArray
			var yyq390 [2]bool
			_, _, _ = yysep390, yyq390, yy2arr390
			const yyr390 bool = false
			yyq390[0] = x.Name != ""
			yyq390[1] = x.APIGroup != ""
			var yynn390 int
			if yyr390 || yy2arr390 {
				r.EncodeArrayStart(2)
			} else {
				yynn390 = 0
				for _, b := range yyq390 {
					if b {
						yynn390++
					}
				}
				r.EncodeMapStart(yynn390)
				yynn390 = 0
			}
			if yyr390 || yy2arr390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq390[0] {
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq390[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym393 := z.EncBinary()
					_ = yym393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr390 || yy2arr390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq390[1] {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq390[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr390 || yy2arr390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym397 := z.DecBinary()
	_ = yym397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct398 := r.ContainerType()
		if yyct398 == codecSelferValueTypeMap1234 {
			yyl398 := r.ReadMapStart()
			if yyl398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl398, d)
			}
		} else if yyct398 == codecSelferValueTypeArray1234 {
			yyl398 := r.ReadArrayStart()
			if yyl398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys399Slc
	var yyhl399 bool = l >= 0
	for yyj399 := 0; ; yyj399++ {
		if yyhl399 {
			if yyj399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys399Slc = r.DecodeBytes(yys399Slc, true, true)
		yys399 := string(yys399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys399 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys399)
		} // end switch yys399
	} // end for yyj399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj402 int
	var yyb402 bool
	var yyhl402 bool = l >= 0
	yyj402++
	if yyhl402 {
		yyb402 = yyj402 > l
	} else {
		yyb402 = r.CheckBreak()
	}
	if yyb402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj402++
	if yyhl402 {
		yyb402 = yyj402 > l
	} else {
		yyb402 = r.CheckBreak()
	}
	if yyb402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj402++
		if yyhl402 {
			yyb402 = yyj402 > l
		} else {
			yyb402 = r.CheckBreak()
		}
		if yyb402 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj402-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [4]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Kind != ""
			yyq406[1] = x.APIVersion != ""
			yyq406[2] = true
			yyq406[3] = len(x.Data) != 0
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(4)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					yym408 := z.EncBinary()
					_ = yym408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yy414 := &x.ObjectMeta
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy414) {
					} else {
						z.EncFallback(yy414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy416) {
					} else {
						z.EncFallback(yy416)
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym419 := z.EncBinary()
						_ = yym419
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct422 := r.ContainerType()
		if yyct422 == codecSelferValueTypeMap1234 {
			yyl422 := r.ReadMapStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl422, d)
			}
		} else if yyct422 == codecSelferValueTypeArray1234 {
			yyl422 := r.ReadArrayStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys423Slc
	var yyhl423 bool = l >= 0
	for yyj423 := 0; ; yyj423++ {
		if yyhl423 {
			if yyj423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys423Slc = r.DecodeBytes(yys423Slc, true, true)
		yys423 := string(yys423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv426 := &x.ObjectMeta
				yym427 := z.DecBinary()
				_ = yym427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv426) {
				} else {
					z.DecFallback(yyv426, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv428 := &x.Data
				yym429 := z.DecBinary()
				_ = yym429
				if false {
				} else {
					*yyv428 = r.DecodeBytes(*(*[]byte)(yyv428), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys423)
		} // end switch yys423
	} // end for yyj423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj430 int
	var yyb430 bool
	var yyhl430 bool = l >= 0
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv433 := &x.ObjectMeta
		yym434 := z.DecBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv433) {
		} else {
			z.DecFallback(yyv433, false)
		}
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv435 := &x.Data
		yym436 := z.DecBinary()
		_ = yym436
		if false {
		} else {
			*yyv435 = r.DecodeBytes(*(*[]byte)(yyv435), false, false)
		}
	}
	for {
		yyj430++
		if yyhl430 {
			yyb430 = yyj430 > l
		} else {
			yyb430 = r.CheckBreak()
		}
		if yyb430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym437 := z.EncBinary()
		_ = yym437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep438 := !z.EncBinary()
			yy2arr438 := z.EncBasicHandle().StructToArray
			var yyq438 [5]bool
			_, _, _ = yysep438, yyq438, yy2arr438
			const yyr438 bool = false
			yyq438[0] = x.Kind != ""
			yyq438[1] = x.APIVersion != ""
			yyq438[2] = true
			yyq438[3] = true
			yyq438[4] = true
			var yynn438 int
			if yyr438 || yy2arr438 {
				r.EncodeArrayStart(5)
			} else {
				yynn438 = 0
				for _, b := range yyq438 {
					if b {
						yynn438++
					}
				}
				r.EncodeMapStart(yynn438)
				yynn438 = 0
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[0] {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[1] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[2] {
					yy446 := &x.ObjectMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ObjectMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[3] {
					yy451 := &x.Spec
					yy451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.Spec
					yy452.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[4] {
					yy454 := &x.Status
					yy454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy455 := &x.Status
					yy455.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct457 := r.ContainerType()
		if yyct457 == codecSelferValueTypeMap1234 {
			yyl457 := r.ReadMapStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl457, d)
			}
		} else if yyct457 == codecSelferValueTypeArray1234 {
			yyl457 := r.ReadArrayStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys458Slc
	var yyhl458 bool = l >= 0
	for yyj458 := 0; ; yyj458++ {
		if yyhl458 {
			if yyj458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys458Slc = r.DecodeBytes(yys458Slc, true, true)
		yys458 := string(yys458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys458 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv461 := &x.ObjectMeta
				yym462 := z.DecBinary()
				_ = yym462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv461) {
				} else {
					z.DecFallback(yyv461, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv463 := &x.Spec
				yyv463.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv464 := &x.Status
				yyv464.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys458)
		} // end switch yys458
	} // end for yyj458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj465 int
	var yyb465 bool
	var yyhl465 bool = l >= 0
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv468 := &x.ObjectMeta
		yym469 := z.DecBinary()
		_ = yym469
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv468) {
		} else {
			z.DecFallback(yyv468, false)
		}
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv470 := &x.Spec
		yyv470.CodecDecodeSelf(d)
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv471 := &x.Status
		yyv471.CodecDecodeSelf(d)
	}
	for {
		yyj465++
		if yyhl465 {
			yyb465 = yyj465 > l
		} else {
			yyb465 = r.CheckBreak()
		}
		if yyb465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym472 := z.EncBinary()
		_ = yym472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep473 := !z.EncBinary()
			yy2arr473 := z.EncBasicHandle().StructToArray
			var yyq473 [8]bool
			_, _, _ = yysep473, yyq473, yy2arr473
			const yyr473 bool = false
			yyq473[0] = x.Replicas != 0
			yyq473[1] = len(x.Selector) != 0
			yyq473[3] = true
			yyq473[4] = x.RevisionHistoryLimit != nil
			yyq473[5] = x.UniqueLabelKey != ""
			yyq473[6] = x.Paused != false
			yyq473[7] = x.RollbackTo != nil
			var yynn473 int
			if yyr473 || yy2arr473 {
				r.EncodeArrayStart(8)
			} else {
				yynn473 = 1
				for _, b := range yyq473 {
					if b {
						yynn473++
					}
				}
				r.EncodeMapStart(yynn473)
				yynn473 = 0
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[0] {
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy481 := &x.Template
				yym482 := z.EncBinary()
				_ = yym482
				if false {
				} else if z.HasExtensions() && z.EncExt(yy481) {
				} else {
					z.EncFallback(yy481)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy483 := &x.Template
				yym484 := z.EncBinary()
				_ = yym484
				if false {
				} else if z.HasExtensions() && z.EncExt(yy483) {
				} else {
					z.EncFallback(yy483)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[3] {
					yy486 := &x.Strategy
					yy486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy487 := &x.Strategy
					yy487.CodecEncodeSelf(e)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[4] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy489 := *x.RevisionHistoryLimit
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else {
							r.EncodeInt(int64(yy489))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy491 := *x.RevisionHistoryLimit
						yym492 := z.EncBinary()
						_ = yym492
						if false {
						} else {
							r.EncodeInt(int64(yy491))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[5] {
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq473[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[6] {
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq473[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym500 := z.DecBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct501 := r.ContainerType()
		if yyct501 == codecSelferValueTypeMap1234 {
			yyl501 := r.ReadMapStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl501, d)
			}
		} else if yyct501 == codecSelferValueTypeArray1234 {
			yyl501 := r.ReadArrayStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys502Slc
	var yyhl502 bool = l >= 0
	for yyj502 := 0; ; yyj502++ {
		if yyhl502 {
			if yyj502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys502Slc = r.DecodeBytes(yys502Slc, true, true)
		yys502 := string(yys502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys502 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv504 := &x.Selector
				yym505 := z.DecBinary()
				_ = yym505
				if false {
				} else {
					z.F.DecMapStringStringX(yyv504, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv506 := &x.Template
				yym507 := z.DecBinary()
				_ = yym507
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv506) {
				} else {
					z.DecFallback(yyv506, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv508 := &x.Strategy
				yyv508.CodecDecodeSelf(d)
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int)
				}
				yym510 := z.DecBinary()
				_ = yym510
				if false {
				} else {
					*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys502)
		} // end switch yys502
	} // end for yyj502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj514 int
	var yyb514 bool
	var yyhl514 bool = l >= 0
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv516 := &x.Selector
		yym517 := z.DecBinary()
		_ = yym517
		if false {
		} else {
			z.F.DecMapStringStringX(yyv516, false, d)
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv518 := &x.Template
		yym519 := z.DecBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv518) {
		} else {
			z.DecFallback(yyv518, false)
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv520 := &x.Strategy
		yyv520.CodecDecodeSelf(d)
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int)
		}
		yym522 := z.DecBinary()
		_ = yym522
		if false {
		} else {
			*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj514++
		if yyhl514 {
			yyb514 = yyj514 > l
		} else {
			yyb514 = r.CheckBreak()
		}
		if yyb514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym526 := z.EncBinary()
		_ = yym526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep527 := !z.EncBinary()
			yy2arr527 := z.EncBasicHandle().StructToArray
			var yyq527 [5]bool
			_, _, _ = yysep527, yyq527, yy2arr527
			const yyr527 bool = false
			yyq527[0] = x.Kind != ""
			yyq527[1] = x.APIVersion != ""
			yyq527[3] = len(x.UpdatedAnnotations) != 0
			var yynn527 int
			if yyr527 || yy2arr527 {
				r.EncodeArrayStart(5)
			} else {
				yynn527 = 2
				for _, b := range yyq527 {
					if b {
						yynn527++
					}
				}
				r.EncodeMapStart(yynn527)
				yynn527 = 0
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq527[0] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq527[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq527[1] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq527[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym535 := z.EncBinary()
				_ = yym535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym536 := z.EncBinary()
				_ = yym536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq527[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym538 := z.EncBinary()
						_ = yym538
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq527[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy541 := &x.RollbackTo
				yy541.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy542 := &x.RollbackTo
				yy542.CodecEncodeSelf(e)
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym543 := z.DecBinary()
	_ = yym543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct544 := r.ContainerType()
		if yyct544 == codecSelferValueTypeMap1234 {
			yyl544 := r.ReadMapStart()
			if yyl544 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl544, d)
			}
		} else if yyct544 == codecSelferValueTypeArray1234 {
			yyl544 := r.ReadArrayStart()
			if yyl544 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl544, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys545Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys545Slc
	var yyhl545 bool = l >= 0
	for yyj545 := 0; ; yyj545++ {
		if yyhl545 {
			if yyj545 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys545Slc = r.DecodeBytes(yys545Slc, true, true)
		yys545 := string(yys545Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys545 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv549 := &x.UpdatedAnnotations
				yym550 := z.DecBinary()
				_ = yym550
				if false {
				} else {
					z.F.DecMapStringStringX(yyv549, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv551 := &x.RollbackTo
				yyv551.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys545)
		} // end switch yys545
	} // end for yyj545
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj552 int
	var yyb552 bool
	var yyhl552 bool = l >= 0
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv556 := &x.UpdatedAnnotations
		yym557 := z.DecBinary()
		_ = yym557
		if false {
		} else {
			z.F.DecMapStringStringX(yyv556, false, d)
		}
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv558 := &x.RollbackTo
		yyv558.CodecDecodeSelf(d)
	}
	for {
		yyj552++
		if yyhl552 {
			yyb552 = yyj552 > l
		} else {
			yyb552 = r.CheckBreak()
		}
		if yyb552 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj552-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym559 := z.EncBinary()
		_ = yym559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep560 := !z.EncBinary()
			yy2arr560 := z.EncBasicHandle().StructToArray
			var yyq560 [1]bool
			_, _, _ = yysep560, yyq560, yy2arr560
			const yyr560 bool = false
			yyq560[0] = x.Revision != 0
			var yynn560 int
			if yyr560 || yy2arr560 {
				r.EncodeArrayStart(1)
			} else {
				yynn560 = 0
				for _, b := range yyq560 {
					if b {
						yynn560++
					}
				}
				r.EncodeMapStart(yynn560)
				yynn560 = 0
			}
			if yyr560 || yy2arr560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq560[0] {
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr560 || yy2arr560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym564 := z.DecBinary()
	_ = yym564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct565 := r.ContainerType()
		if yyct565 == codecSelferValueTypeMap1234 {
			yyl565 := r.ReadMapStart()
			if yyl565 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl565, d)
			}
		} else if yyct565 == codecSelferValueTypeArray1234 {
			yyl565 := r.ReadArrayStart()
			if yyl565 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl565, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys566Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys566Slc
	var yyhl566 bool = l >= 0
	for yyj566 := 0; ; yyj566++ {
		if yyhl566 {
			if yyj566 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys566Slc = r.DecodeBytes(yys566Slc, true, true)
		yys566 := string(yys566Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys566 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys566)
		} // end switch yys566
	} // end for yyj566
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj568 int
	var yyb568 bool
	var yyhl568 bool = l >= 0
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj568++
		if yyhl568 {
			yyb568 = yyj568 > l
		} else {
			yyb568 = r.CheckBreak()
		}
		if yyb568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym570 := z.EncBinary()
		_ = yym570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep571 := !z.EncBinary()
			yy2arr571 := z.EncBasicHandle().StructToArray
			var yyq571 [2]bool
			_, _, _ = yysep571, yyq571, yy2arr571
			const yyr571 bool = false
			yyq571[0] = x.Type != ""
			yyq571[1] = x.RollingUpdate != nil
			var yynn571 int
			if yyr571 || yy2arr571 {
				r.EncodeArrayStart(2)
			} else {
				yynn571 = 0
				for _, b := range yyq571 {
					if b {
						yynn571++
					}
				}
				r.EncodeMapStart(yynn571)
				yynn571 = 0
			}
			if yyr571 || yy2arr571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq571[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq571[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr571 || yy2arr571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq571[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq571[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr571 || yy2arr571 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj579 int
	var yyb579 bool
	var yyhl579 bool = l >= 0
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj579++
		if yyhl579 {
			yyb579 = yyj579 > l
		} else {
			yyb579 = r.CheckBreak()
		}
		if yyb579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym584 := z.EncBinary()
		_ = yym584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep585 := !z.EncBinary()
			yy2arr585 := z.EncBasicHandle().StructToArray
			var yyq585 [3]bool
			_, _, _ = yysep585, yyq585, yy2arr585
			const yyr585 bool = false
			yyq585[0] = true
			yyq585[1] = true
			yyq585[2] = x.MinReadySeconds != 0
			var yynn585 int
			if yyr585 || yy2arr585 {
				r.EncodeArrayStart(3)
			} else {
				yynn585 = 0
				for _, b := range yyq585 {
					if b {
						yynn585++
					}
				}
				r.EncodeMapStart(yynn585)
				yynn585 = 0
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[0] {
					yy587 := &x.MaxUnavailable
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else if z.HasExtensions() && z.EncExt(yy587) {
					} else if !yym588 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy587)
					} else {
						z.EncFallback(yy587)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy589 := &x.MaxUnavailable
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else if z.HasExtensions() && z.EncExt(yy589) {
					} else if !yym590 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy589)
					} else {
						z.EncFallback(yy589)
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[1] {
					yy592 := &x.MaxSurge
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else if z.HasExtensions() && z.EncExt(yy592) {
					} else if !yym593 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy592)
					} else {
						z.EncFallback(yy592)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq585[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy594 := &x.MaxSurge
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy594) {
					} else if !yym595 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy594)
					} else {
						z.EncFallback(yy594)
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq585[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct600 := r.ContainerType()
		if yyct600 == codecSelferValueTypeMap1234 {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if yyct600 == codecSelferValueTypeArray1234 {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys601 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv602 := &x.MaxUnavailable
				yym603 := z.DecBinary()
				_ = yym603
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv602) {
				} else if !yym603 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv602)
				} else {
					z.DecFallback(yyv602, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv604 := &x.MaxSurge
				yym605 := z.DecBinary()
				_ = yym605
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv604) {
				} else if !yym605 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv604)
				} else {
					z.DecFallback(yyv604, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj607 int
	var yyb607 bool
	var yyhl607 bool = l >= 0
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv608 := &x.MaxUnavailable
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv608) {
		} else if !yym609 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv608)
		} else {
			z.DecFallback(yyv608, false)
		}
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv610 := &x.MaxSurge
		yym611 := z.DecBinary()
		_ = yym611
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv610) {
		} else if !yym611 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv610)
		} else {
			z.DecFallback(yyv610, false)
		}
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj607++
		if yyhl607 {
			yyb607 = yyj607 > l
		} else {
			yyb607 = r.CheckBreak()
		}
		if yyb607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym613 := z.EncBinary()
		_ = yym613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep614 := !z.EncBinary()
			yy2arr614 := z.EncBasicHandle().StructToArray
			var yyq614 [4]bool
			_, _, _ = yysep614, yyq614, yy2arr614
			const yyr614 bool = false
			yyq614[0] = x.Replicas != 0
			yyq614[1] = x.UpdatedReplicas != 0
			yyq614[2] = x.AvailableReplicas != 0
			yyq614[3] = x.UnavailableReplicas != 0
			var yynn614 int
			if yyr614 || yy2arr614 {
				r.EncodeArrayStart(4)
			} else {
				yynn614 = 0
				for _, b := range yyq614 {
					if b {
						yynn614++
					}
				}
				r.EncodeMapStart(yynn614)
				yynn614 = 0
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[0] {
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[1] {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[2] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[3] {
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym627 := z.DecBinary()
	_ = yym627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct628 := r.ContainerType()
		if yyct628 == codecSelferValueTypeMap1234 {
			yyl628 := r.ReadMapStart()
			if yyl628 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl628, d)
			}
		} else if yyct628 == codecSelferValueTypeArray1234 {
			yyl628 := r.ReadArrayStart()
			if yyl628 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys629Slc
	var yyhl629 bool = l >= 0
	for yyj629 := 0; ; yyj629++ {
		if yyhl629 {
			if yyj629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys629Slc = r.DecodeBytes(yys629Slc, true, true)
		yys629 := string(yys629Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys629 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys629)
		} // end switch yys629
	} // end for yyj629
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj634 int
	var yyb634 bool
	var yyhl634 bool = l >= 0
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj634++
		if yyhl634 {
			yyb634 = yyj634 > l
		} else {
			yyb634 = r.CheckBreak()
		}
		if yyb634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym639 := z.EncBinary()
		_ = yym639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep640 := !z.EncBinary()
			yy2arr640 := z.EncBasicHandle().StructToArray
			var yyq640 [4]bool
			_, _, _ = yysep640, yyq640, yy2arr640
			const yyr640 bool = false
			yyq640[0] = x.Kind != ""
			yyq640[1] = x.APIVersion != ""
			yyq640[2] = true
			var yynn640 int
			if yyr640 || yy2arr640 {
				r.EncodeArrayStart(4)
			} else {
				yynn640 = 1
				for _, b := range yyq640 {
					if b {
						yynn640++
					}
				}
				r.EncodeMapStart(yynn640)
				yynn640 = 0
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[0] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[1] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[2] {
					yy648 := &x.ListMeta
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else if z.HasExtensions() && z.EncExt(yy648) {
					} else {
						z.EncFallback(yy648)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq640[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy650 := &x.ListMeta
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else if z.HasExtensions() && z.EncExt(yy650) {
					} else {
						z.EncFallback(yy650)
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym655 := z.DecBinary()
	_ = yym655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct656 := r.ContainerType()
		if yyct656 == codecSelferValueTypeMap1234 {
			yyl656 := r.ReadMapStart()
			if yyl656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl656, d)
			}
		} else if yyct656 == codecSelferValueTypeArray1234 {
			yyl656 := r.ReadArrayStart()
			if yyl656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys657Slc
	var yyhl657 bool = l >= 0
	for yyj657 := 0; ; yyj657++ {
		if yyhl657 {
			if yyj657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys657Slc = r.DecodeBytes(yys657Slc, true, true)
		yys657 := string(yys657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys657 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv660 := &x.ListMeta
				yym661 := z.DecBinary()
				_ = yym661
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv660) {
				} else {
					z.DecFallback(yyv660, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv662 := &x.Items
				yym663 := z.DecBinary()
				_ = yym663
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv662), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys657)
		} // end switch yys657
	} // end for yyj657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj664 int
	var yyb664 bool
	var yyhl664 bool = l >= 0
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv667 := &x.ListMeta
		yym668 := z.DecBinary()
		_ = yym668
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv667) {
		} else {
			z.DecFallback(yyv667, false)
		}
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv669 := &x.Items
		yym670 := z.DecBinary()
		_ = yym670
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv669), d)
		}
	}
	for {
		yyj664++
		if yyhl664 {
			yyb664 = yyj664 > l
		} else {
			yyb664 = r.CheckBreak()
		}
		if yyb664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym671 := z.EncBinary()
		_ = yym671
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep672 := !z.EncBinary()
			yy2arr672 := z.EncBasicHandle().StructToArray
			var yyq672 [2]bool
			_, _, _ = yysep672, yyq672, yy2arr672
			const yyr672 bool = false
			yyq672[0] = x.Type != ""
			yyq672[1] = x.RollingUpdate != nil
			var yynn672 int
			if yyr672 || yy2arr672 {
				r.EncodeArrayStart(2)
			} else {
				yynn672 = 0
				for _, b := range yyq672 {
					if b {
						yynn672++
					}
				}
				r.EncodeMapStart(yynn672)
				yynn672 = 0
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq672[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq672[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq672[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq672[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct676 := r.ContainerType()
		if yyct676 == codecSelferValueTypeMap1234 {
			yyl676 := r.ReadMapStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl676, d)
			}
		} else if yyct676 == codecSelferValueTypeArray1234 {
			yyl676 := r.ReadArrayStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys677Slc
	var yyhl677 bool = l >= 0
	for yyj677 := 0; ; yyj677++ {
		if yyhl677 {
			if yyj677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys677Slc = r.DecodeBytes(yys677Slc, true, true)
		yys677 := string(yys677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys677 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys677)
		} // end switch yys677
	} // end for yyj677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj680 int
	var yyb680 bool
	var yyhl680 bool = l >= 0
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj680++
		if yyhl680 {
			yyb680 = yyj680 > l
		} else {
			yyb680 = r.CheckBreak()
		}
		if yyb680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym683 := z.EncBinary()
	_ = yym683
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym684 := z.DecBinary()
	_ = yym684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym685 := z.EncBinary()
		_ = yym685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep686 := !z.EncBinary()
			yy2arr686 := z.EncBasicHandle().StructToArray
			var yyq686 [2]bool
			_, _, _ = yysep686, yyq686, yy2arr686
			const yyr686 bool = false
			yyq686[0] = true
			yyq686[1] = x.MinReadySeconds != 0
			var yynn686 int
			if yyr686 || yy2arr686 {
				r.EncodeArrayStart(2)
			} else {
				yynn686 = 0
				for _, b := range yyq686 {
					if b {
						yynn686++
					}
				}
				r.EncodeMapStart(yynn686)
				yynn686 = 0
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq686[0] {
					yy688 := &x.MaxUnavailable
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else if z.HasExtensions() && z.EncExt(yy688) {
					} else if !yym689 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy688)
					} else {
						z.EncFallback(yy688)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq686[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy690 := &x.MaxUnavailable
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else if z.HasExtensions() && z.EncExt(yy690) {
					} else if !yym691 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy690)
					} else {
						z.EncFallback(yy690)
					}
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq686[1] {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq686[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym695 := z.DecBinary()
	_ = yym695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct696 := r.ContainerType()
		if yyct696 == codecSelferValueTypeMap1234 {
			yyl696 := r.ReadMapStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl696, d)
			}
		} else if yyct696 == codecSelferValueTypeArray1234 {
			yyl696 := r.ReadArrayStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys697Slc
	var yyhl697 bool = l >= 0
	for yyj697 := 0; ; yyj697++ {
		if yyhl697 {
			if yyj697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys697Slc = r.DecodeBytes(yys697Slc, true, true)
		yys697 := string(yys697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys697 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv698 := &x.MaxUnavailable
				yym699 := z.DecBinary()
				_ = yym699
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv698) {
				} else if !yym699 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv698)
				} else {
					z.DecFallback(yyv698, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys697)
		} // end switch yys697
	} // end for yyj697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj701 int
	var yyb701 bool
	var yyhl701 bool = l >= 0
	yyj701++
	if yyhl701 {
		yyb701 = yyj701 > l
	} else {
		yyb701 = r.CheckBreak()
	}
	if yyb701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv702 := &x.MaxUnavailable
		yym703 := z.DecBinary()
		_ = yym703
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv702) {
		} else if !yym703 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv702)
		} else {
			z.DecFallback(yyv702, false)
		}
	}
	yyj701++
	if yyhl701 {
		yyb701 = yyj701 > l
	} else {
		yyb701 = r.CheckBreak()
	}
	if yyb701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj701++
		if yyhl701 {
			yyb701 = yyj701 > l
		} else {
			yyb701 = r.CheckBreak()
		}
		if yyb701 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj701-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [4]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			yyq706[0] = x.Selector != nil
			yyq706[2] = true
			yyq706[3] = x.UniqueLabelKey != ""
			var yynn706 int
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(4)
			} else {
				yynn706 = 1
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
				yynn706 = 0
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq706[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy709 := &x.Template
				yym710 := z.EncBinary()
				_ = yym710
				if false {
				} else if z.HasExtensions() && z.EncExt(yy709) {
				} else {
					z.EncFallback(yy709)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy711 := &x.Template
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else if z.HasExtensions() && z.EncExt(yy711) {
				} else {
					z.EncFallback(yy711)
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[2] {
					yy714 := &x.UpdateStrategy
					yy714.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq706[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy715 := &x.UpdateStrategy
					yy715.CodecEncodeSelf(e)
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq706[3] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr706 || yy2arr706 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym719 := z.DecBinary()
	_ = yym719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct720 := r.ContainerType()
		if yyct720 == codecSelferValueTypeMap1234 {
			yyl720 := r.ReadMapStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl720, d)
			}
		} else if yyct720 == codecSelferValueTypeArray1234 {
			yyl720 := r.ReadArrayStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys721Slc
	var yyhl721 bool = l >= 0
	for yyj721 := 0; ; yyj721++ {
		if yyhl721 {
			if yyj721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys721Slc = r.DecodeBytes(yys721Slc, true, true)
		yys721 := string(yys721Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys721 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv723 := &x.Template
				yym724 := z.DecBinary()
				_ = yym724
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv723) {
				} else {
					z.DecFallback(yyv723, false)
				}
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv725 := &x.UpdateStrategy
				yyv725.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys721)
		} // end switch yys721
	} // end for yyj721
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj727 int
	var yyb727 bool
	var yyhl727 bool = l >= 0
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv729 := &x.Template
		yym730 := z.DecBinary()
		_ = yym730
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv729) {
		} else {
			z.DecFallback(yyv729, false)
		}
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv731 := &x.UpdateStrategy
		yyv731.CodecDecodeSelf(d)
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj727++
		if yyhl727 {
			yyb727 = yyj727 > l
		} else {
			yyb727 = r.CheckBreak()
		}
		if yyb727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym733 := z.EncBinary()
		_ = yym733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep734 := !z.EncBinary()
			yy2arr734 := z.EncBasicHandle().StructToArray
			var yyq734 [3]bool
			_, _, _ = yysep734, yyq734, yy2arr734
			const yyr734 bool = false
			var yynn734 int
			if yyr734 || yy2arr734 {
				r.EncodeArrayStart(3)
			} else {
				yynn734 = 3
				for _, b := range yyq734 {
					if b {
						yynn734++
					}
				}
				r.EncodeMapStart(yynn734)
				yynn734 = 0
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym737 := z.EncBinary()
				_ = yym737
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym740 := z.EncBinary()
				_ = yym740
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym744 := z.DecBinary()
	_ = yym744
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct745 := r.ContainerType()
		if yyct745 == codecSelferValueTypeMap1234 {
			yyl745 := r.ReadMapStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl745, d)
			}
		} else if yyct745 == codecSelferValueTypeArray1234 {
			yyl745 := r.ReadArrayStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl745, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys746Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys746Slc
	var yyhl746 bool = l >= 0
	for yyj746 := 0; ; yyj746++ {
		if yyhl746 {
			if yyj746 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys746Slc = r.DecodeBytes(yys746Slc, true, true)
		yys746 := string(yys746Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys746 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys746)
		} // end switch yys746
	} // end for yyj746
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj750 int
	var yyb750 bool
	var yyhl750 bool = l >= 0
	yyj750++
	if yyhl750 {
		yyb750 = yyj750 > l
	} else {
		yyb750 = r.CheckBreak()
	}
	if yyb750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj750++
	if yyhl750 {
		yyb750 = yyj750 > l
	} else {
		yyb750 = r.CheckBreak()
	}
	if yyb750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj750++
	if yyhl750 {
		yyb750 = yyj750 > l
	} else {
		yyb750 = r.CheckBreak()
	}
	if yyb750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj750++
		if yyhl750 {
			yyb750 = yyj750 > l
		} else {
			yyb750 = r.CheckBreak()
		}
		if yyb750 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj750-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym754 := z.EncBinary()
		_ = yym754
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep755 := !z.EncBinary()
			yy2arr755 := z.EncBasicHandle().StructToArray
			var yyq755 [5]bool
			_, _, _ = yysep755, yyq755, yy2arr755
			const yyr755 bool = false
			yyq755[0] = x.Kind != ""
			yyq755[1] = x.APIVersion != ""
			yyq755[2] = true
			yyq755[3] = true
			yyq755[4] = true
			var yynn755 int
			if yyr755 || yy2arr755 {
				r.EncodeArrayStart(5)
			} else {
				yynn755 = 0
				for _, b := range yyq755 {
					if b {
						yynn755++
					}
				}
				r.EncodeMapStart(yynn755)
				yynn755 = 0
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[0] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[1] {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[2] {
					yy763 := &x.ObjectMeta
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy763) {
					} else {
						z.EncFallback(yy763)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq755[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy765 := &x.ObjectMeta
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else if z.HasExtensions() && z.EncExt(yy765) {
					} else {
						z.EncFallback(yy765)
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[3] {
					yy768 := &x.Spec
					yy768.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq755[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy769 := &x.Spec
					yy769.CodecEncodeSelf(e)
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[4] {
					yy771 := &x.Status
					yy771.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq755[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy772 := &x.Status
					yy772.CodecEncodeSelf(e)
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym773 := z.DecBinary()
	_ = yym773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct774 := r.ContainerType()
		if yyct774 == codecSelferValueTypeMap1234 {
			yyl774 := r.ReadMapStart()
			if yyl774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl774, d)
			}
		} else if yyct774 == codecSelferValueTypeArray1234 {
			yyl774 := r.ReadArrayStart()
			if yyl774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys775Slc
	var yyhl775 bool = l >= 0
	for yyj775 := 0; ; yyj775++ {
		if yyhl775 {
			if yyj775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys775Slc = r.DecodeBytes(yys775Slc, true, true)
		yys775 := string(yys775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys775 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv778 := &x.ObjectMeta
				yym779 := z.DecBinary()
				_ = yym779
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv778) {
				} else {
					z.DecFallback(yyv778, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv780 := &x.Spec
				yyv780.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv781 := &x.Status
				yyv781.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys775)
		} // end switch yys775
	} // end for yyj775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj782 int
	var yyb782 bool
	var yyhl782 bool = l >= 0
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv785 := &x.ObjectMeta
		yym786 := z.DecBinary()
		_ = yym786
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv785) {
		} else {
			z.DecFallback(yyv785, false)
		}
	}
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv787 := &x.Spec
		yyv787.CodecDecodeSelf(d)
	}
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv788 := &x.Status
		yyv788.CodecDecodeSelf(d)
	}
	for {
		yyj782++
		if yyhl782 {
			yyb782 = yyj782 > l
		} else {
			yyb782 = r.CheckBreak()
		}
		if yyb782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym789 := z.EncBinary()
		_ = yym789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep790 := !z.EncBinary()
			yy2arr790 := z.EncBasicHandle().StructToArray
			var yyq790 [4]bool
			_, _, _ = yysep790, yyq790, yy2arr790
			const yyr790 bool = false
			yyq790[0] = x.Kind != ""
			yyq790[1] = x.APIVersion != ""
			yyq790[2] = true
			var yynn790 int
			if yyr790 || yy2arr790 {
				r.EncodeArrayStart(4)
			} else {
				yynn790 = 1
				for _, b := range yyq790 {
					if b {
						yynn790++
					}
				}
				r.EncodeMapStart(yynn790)
				yynn790 = 0
			}
			if yyr790 || yy2arr790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq790[0] {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq790[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr790 || yy2arr790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq790[1] {
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq790[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr790 || yy2arr790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq790[2] {
					yy798 := &x.ListMeta
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy798) {
					} else {
						z.EncFallback(yy798)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq790[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy800 := &x.ListMeta
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else if z.HasExtensions() && z.EncExt(yy800) {
					} else {
						z.EncFallback(yy800)
					}
				}
			}
			if yyr790 || yy2arr790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr790 || yy2arr790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym805 := z.DecBinary()
	_ = yym805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct806 := r.ContainerType()
		if yyct806 == codecSelferValueTypeMap1234 {
			yyl806 := r.ReadMapStart()
			if yyl806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl806, d)
			}
		} else if yyct806 == codecSelferValueTypeArray1234 {
			yyl806 := r.ReadArrayStart()
			if yyl806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys807Slc
	var yyhl807 bool = l >= 0
	for yyj807 := 0; ; yyj807++ {
		if yyhl807 {
			if yyj807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys807Slc = r.DecodeBytes(yys807Slc, true, true)
		yys807 := string(yys807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys807 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv810 := &x.ListMeta
				yym811 := z.DecBinary()
				_ = yym811
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv810) {
				} else {
					z.DecFallback(yyv810, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv812 := &x.Items
				yym813 := z.DecBinary()
				_ = yym813
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv812), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys807)
		} // end switch yys807
	} // end for yyj807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv817 := &x.ListMeta
		yym818 := z.DecBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv817) {
		} else {
			z.DecFallback(yyv817, false)
		}
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv819 := &x.Items
		yym820 := z.DecBinary()
		_ = yym820
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv819), d)
		}
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym821 := z.EncBinary()
		_ = yym821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep822 := !z.EncBinary()
			yy2arr822 := z.EncBasicHandle().StructToArray
			var yyq822 [4]bool
			_, _, _ = yysep822, yyq822, yy2arr822
			const yyr822 bool = false
			yyq822[0] = x.Kind != ""
			yyq822[1] = x.APIVersion != ""
			yyq822[2] = true
			var yynn822 int
			if yyr822 || yy2arr822 {
				r.EncodeArrayStart(4)
			} else {
				yynn822 = 1
				for _, b := range yyq822 {
					if b {
						yynn822++
					}
				}
				r.EncodeMapStart(yynn822)
				yynn822 = 0
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq822[0] {
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq822[1] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq822[2] {
					yy830 := &x.ListMeta
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else if z.HasExtensions() && z.EncExt(yy830) {
					} else {
						z.EncFallback(yy830)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy832 := &x.ListMeta
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else if z.HasExtensions() && z.EncExt(yy832) {
					} else {
						z.EncFallback(yy832)
					}
				}
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct838 := r.ContainerType()
		if yyct838 == codecSelferValueTypeMap1234 {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if yyct838 == codecSelferValueTypeArray1234 {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys839 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv842 := &x.ListMeta
				yym843 := z.DecBinary()
				_ = yym843
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv842) {
				} else {
					z.DecFallback(yyv842, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv844 := &x.Items
				yym845 := z.DecBinary()
				_ = yym845
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv844), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj846 int
	var yyb846 bool
	var yyhl846 bool = l >= 0
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv849 := &x.ListMeta
		yym850 := z.DecBinary()
		_ = yym850
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv849) {
		} else {
			z.DecFallback(yyv849, false)
		}
	}
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv851 := &x.Items
		yym852 := z.DecBinary()
		_ = yym852
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv851), d)
		}
	}
	for {
		yyj846++
		if yyhl846 {
			yyb846 = yyj846 > l
		} else {
			yyb846 = r.CheckBreak()
		}
		if yyb846 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj846-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym853 := z.EncBinary()
		_ = yym853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep854 := !z.EncBinary()
			yy2arr854 := z.EncBasicHandle().StructToArray
			var yyq854 [5]bool
			_, _, _ = yysep854, yyq854, yy2arr854
			const yyr854 bool = false
			yyq854[0] = x.Kind != ""
			yyq854[1] = x.APIVersion != ""
			yyq854[2] = true
			yyq854[3] = true
			yyq854[4] = true
			var yynn854 int
			if yyr854 || yy2arr854 {
				r.EncodeArrayStart(5)
			} else {
				yynn854 = 0
				for _, b := range yyq854 {
					if b {
						yynn854++
					}
				}
				r.EncodeMapStart(yynn854)
				yynn854 = 0
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq854[0] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq854[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq854[1] {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq854[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq854[2] {
					yy862 := &x.ObjectMeta
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy862) {
					} else {
						z.EncFallback(yy862)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq854[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy864 := &x.ObjectMeta
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else if z.HasExtensions() && z.EncExt(yy864) {
					} else {
						z.EncFallback(yy864)
					}
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq854[3] {
					yy867 := &x.Spec
					yy867.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq854[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy868 := &x.Spec
					yy868.CodecEncodeSelf(e)
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq854[4] {
					yy870 := &x.Status
					yy870.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq854[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy871 := &x.Status
					yy871.CodecEncodeSelf(e)
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym872 := z.DecBinary()
	_ = yym872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct873 := r.ContainerType()
		if yyct873 == codecSelferValueTypeMap1234 {
			yyl873 := r.ReadMapStart()
			if yyl873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl873, d)
			}
		} else if yyct873 == codecSelferValueTypeArray1234 {
			yyl873 := r.ReadArrayStart()
			if yyl873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys874Slc
	var yyhl874 bool = l >= 0
	for yyj874 := 0; ; yyj874++ {
		if yyhl874 {
			if yyj874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys874Slc = r.DecodeBytes(yys874Slc, true, true)
		yys874 := string(yys874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys874 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv877 := &x.ObjectMeta
				yym878 := z.DecBinary()
				_ = yym878
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv877) {
				} else {
					z.DecFallback(yyv877, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv879 := &x.Spec
				yyv879.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv880 := &x.Status
				yyv880.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys874)
		} // end switch yys874
	} // end for yyj874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv884 := &x.ObjectMeta
		yym885 := z.DecBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv884) {
		} else {
			z.DecFallback(yyv884, false)
		}
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv886 := &x.Spec
		yyv886.CodecDecodeSelf(d)
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv887 := &x.Status
		yyv887.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym888 := z.EncBinary()
		_ = yym888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep889 := !z.EncBinary()
			yy2arr889 := z.EncBasicHandle().StructToArray
			var yyq889 [4]bool
			_, _, _ = yysep889, yyq889, yy2arr889
			const yyr889 bool = false
			yyq889[0] = x.Kind != ""
			yyq889[1] = x.APIVersion != ""
			yyq889[2] = true
			var yynn889 int
			if yyr889 || yy2arr889 {
				r.EncodeArrayStart(4)
			} else {
				yynn889 = 1
				for _, b := range yyq889 {
					if b {
						yynn889++
					}
				}
				r.EncodeMapStart(yynn889)
				yynn889 = 0
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[0] {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq889[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[1] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq889[2] {
					yy897 := &x.ListMeta
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else if z.HasExtensions() && z.EncExt(yy897) {
					} else {
						z.EncFallback(yy897)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq889[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy899 := &x.ListMeta
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else if z.HasExtensions() && z.EncExt(yy899) {
					} else {
						z.EncFallback(yy899)
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr889 || yy2arr889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct905 := r.ContainerType()
		if yyct905 == codecSelferValueTypeMap1234 {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if yyct905 == codecSelferValueTypeArray1234 {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys906 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv909 := &x.ListMeta
				yym910 := z.DecBinary()
				_ = yym910
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv909) {
				} else {
					z.DecFallback(yyv909, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv911 := &x.Items
				yym912 := z.DecBinary()
				_ = yym912
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv911), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj913 int
	var yyb913 bool
	var yyhl913 bool = l >= 0
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv916 := &x.ListMeta
		yym917 := z.DecBinary()
		_ = yym917
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv916) {
		} else {
			z.DecFallback(yyv916, false)
		}
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv918 := &x.Items
		yym919 := z.DecBinary()
		_ = yym919
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv918), d)
		}
	}
	for {
		yyj913++
		if yyhl913 {
			yyb913 = yyj913 > l
		} else {
			yyb913 = r.CheckBreak()
		}
		if yyb913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym920 := z.EncBinary()
		_ = yym920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep921 := !z.EncBinary()
			yy2arr921 := z.EncBasicHandle().StructToArray
			var yyq921 [5]bool
			_, _, _ = yysep921, yyq921, yy2arr921
			const yyr921 bool = false
			yyq921[0] = x.Parallelism != nil
			yyq921[1] = x.Completions != nil
			yyq921[2] = x.ActiveDeadlineSeconds != nil
			yyq921[3] = x.Selector != nil
			var yynn921 int
			if yyr921 || yy2arr921 {
				r.EncodeArrayStart(5)
			} else {
				yynn921 = 1
				for _, b := range yyq921 {
					if b {
						yynn921++
					}
				}
				r.EncodeMapStart(yynn921)
				yynn921 = 0
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy923 := *x.Parallelism
						yym924 := z.EncBinary()
						_ = yym924
						if false {
						} else {
							r.EncodeInt(int64(yy923))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy925 := *x.Parallelism
						yym926 := z.EncBinary()
						_ = yym926
						if false {
						} else {
							r.EncodeInt(int64(yy925))
						}
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy928 := *x.Completions
						yym929 := z.EncBinary()
						_ = yym929
						if false {
						} else {
							r.EncodeInt(int64(yy928))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq921[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy930 := *x.Completions
						yym931 := z.EncBinary()
						_ = yym931
						if false {
						} else {
							r.EncodeInt(int64(yy930))
						}
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy933 := *x.ActiveDeadlineSeconds
						yym934 := z.EncBinary()
						_ = yym934
						if false {
						} else {
							r.EncodeInt(int64(yy933))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq921[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy935 := *x.ActiveDeadlineSeconds
						yym936 := z.EncBinary()
						_ = yym936
						if false {
						} else {
							r.EncodeInt(int64(yy935))
						}
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq921[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq921[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy939 := &x.Template
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else if z.HasExtensions() && z.EncExt(yy939) {
				} else {
					z.EncFallback(yy939)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy941 := &x.Template
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else if z.HasExtensions() && z.EncExt(yy941) {
				} else {
					z.EncFallback(yy941)
				}
			}
			if yyr921 || yy2arr921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym943 := z.DecBinary()
	_ = yym943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct944 := r.ContainerType()
		if yyct944 == codecSelferValueTypeMap1234 {
			yyl944 := r.ReadMapStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl944, d)
			}
		} else if yyct944 == codecSelferValueTypeArray1234 {
			yyl944 := r.ReadArrayStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys945Slc
	var yyhl945 bool = l >= 0
	for yyj945 := 0; ; yyj945++ {
		if yyhl945 {
			if yyj945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys945Slc = r.DecodeBytes(yys945Slc, true, true)
		yys945 := string(yys945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys945 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym947 := z.DecBinary()
				_ = yym947
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym949 := z.DecBinary()
				_ = yym949
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv953 := &x.Template
				yym954 := z.DecBinary()
				_ = yym954
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv953) {
				} else {
					z.DecFallback(yyv953, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys945)
		} // end switch yys945
	} // end for yyj945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj955 int
	var yyb955 bool
	var yyhl955 bool = l >= 0
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym957 := z.DecBinary()
		_ = yym957
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym959 := z.DecBinary()
		_ = yym959
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym961 := z.DecBinary()
		_ = yym961
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj955++
	if yyhl955 {
		yyb955 = yyj955 > l
	} else {
		yyb955 = r.CheckBreak()
	}
	if yyb955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv963 := &x.Template
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	for {
		yyj955++
		if yyhl955 {
			yyb955 = yyj955 > l
		} else {
			yyb955 = r.CheckBreak()
		}
		if yyb955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym965 := z.EncBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep966 := !z.EncBinary()
			yy2arr966 := z.EncBasicHandle().StructToArray
			var yyq966 [6]bool
			_, _, _ = yysep966, yyq966, yy2arr966
			const yyr966 bool = false
			yyq966[0] = len(x.Conditions) != 0
			yyq966[1] = x.StartTime != nil
			yyq966[2] = x.CompletionTime != nil
			yyq966[3] = x.Active != 0
			yyq966[4] = x.Succeeded != 0
			yyq966[5] = x.Failed != 0
			var yynn966 int
			if yyr966 || yy2arr966 {
				r.EncodeArrayStart(6)
			} else {
				yynn966 = 0
				for _, b := range yyq966 {
					if b {
						yynn966++
					}
				}
				r.EncodeMapStart(yynn966)
				yynn966 = 0
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym968 := z.EncBinary()
						_ = yym968
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq966[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym969 := z.EncBinary()
						_ = yym969
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym971 := z.EncBinary()
						_ = yym971
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym971 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym971 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq966[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym972 := z.EncBinary()
						_ = yym972
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym972 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym972 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym974 := z.EncBinary()
						_ = yym974
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym974 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym974 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq966[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym975 := z.EncBinary()
						_ = yym975
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym975 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym975 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[3] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq966[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[4] {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq966[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[5] {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq966[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym985 := z.DecBinary()
	_ = yym985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct986 := r.ContainerType()
		if yyct986 == codecSelferValueTypeMap1234 {
			yyl986 := r.ReadMapStart()
			if yyl986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl986, d)
			}
		} else if yyct986 == codecSelferValueTypeArray1234 {
			yyl986 := r.ReadArrayStart()
			if yyl986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys987Slc
	var yyhl987 bool = l >= 0
	for yyj987 := 0; ; yyj987++ {
		if yyhl987 {
			if yyj987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys987Slc = r.DecodeBytes(yys987Slc, true, true)
		yys987 := string(yys987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys987 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv988 := &x.Conditions
				yym989 := z.DecBinary()
				_ = yym989
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv988), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym991 := z.DecBinary()
				_ = yym991
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym991 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym991 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym993 := z.DecBinary()
				_ = yym993
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym993 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym993 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys987)
		} // end switch yys987
	} // end for yyj987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj997 int
	var yyb997 bool
	var yyhl997 bool = l >= 0
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv998 := &x.Conditions
		yym999 := z.DecBinary()
		_ = yym999
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv998), d)
		}
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1001 := z.DecBinary()
		_ = yym1001
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1001 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1001 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1003 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1003 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj997++
		if yyhl997 {
			yyb997 = yyj997 > l
		} else {
			yyb997 = r.CheckBreak()
		}
		if yyb997 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj997-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1007 := z.EncBinary()
	_ = yym1007
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1008 := z.DecBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1009 := z.EncBinary()
		_ = yym1009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1010 := !z.EncBinary()
			yy2arr1010 := z.EncBasicHandle().StructToArray
			var yyq1010 [6]bool
			_, _, _ = yysep1010, yyq1010, yy2arr1010
			const yyr1010 bool = false
			yyq1010[2] = true
			yyq1010[3] = true
			yyq1010[4] = x.Reason != ""
			yyq1010[5] = x.Message != ""
			var yynn1010 int
			if yyr1010 || yy2arr1010 {
				r.EncodeArrayStart(6)
			} else {
				yynn1010 = 2
				for _, b := range yyq1010 {
					if b {
						yynn1010++
					}
				}
				r.EncodeMapStart(yynn1010)
				yynn1010 = 0
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1014 := z.EncBinary()
				_ = yym1014
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[2] {
					yy1016 := &x.LastProbeTime
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1016) {
					} else if yym1017 {
						z.EncBinaryMarshal(yy1016)
					} else if !yym1017 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1016)
					} else {
						z.EncFallback(yy1016)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1010[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1018 := &x.LastProbeTime
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1018) {
					} else if yym1019 {
						z.EncBinaryMarshal(yy1018)
					} else if !yym1019 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1018)
					} else {
						z.EncFallback(yy1018)
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[3] {
					yy1021 := &x.LastTransitionTime
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1021) {
					} else if yym1022 {
						z.EncBinaryMarshal(yy1021)
					} else if !yym1022 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1021)
					} else {
						z.EncFallback(yy1021)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1010[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1023 := &x.LastTransitionTime
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1023) {
					} else if yym1024 {
						z.EncBinaryMarshal(yy1023)
					} else if !yym1024 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1023)
					} else {
						z.EncFallback(yy1023)
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[4] {
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1010[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[5] {
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1010[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1031 := z.DecBinary()
	_ = yym1031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1032 := r.ContainerType()
		if yyct1032 == codecSelferValueTypeMap1234 {
			yyl1032 := r.ReadMapStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1032, d)
			}
		} else if yyct1032 == codecSelferValueTypeArray1234 {
			yyl1032 := r.ReadArrayStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1033Slc
	var yyhl1033 bool = l >= 0
	for yyj1033 := 0; ; yyj1033++ {
		if yyhl1033 {
			if yyj1033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1033Slc = r.DecodeBytes(yys1033Slc, true, true)
		yys1033 := string(yys1033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1033 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1036 := &x.LastProbeTime
				yym1037 := z.DecBinary()
				_ = yym1037
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1036) {
				} else if yym1037 {
					z.DecBinaryUnmarshal(yyv1036)
				} else if !yym1037 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1036)
				} else {
					z.DecFallback(yyv1036, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1038 := &x.LastTransitionTime
				yym1039 := z.DecBinary()
				_ = yym1039
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1038) {
				} else if yym1039 {
					z.DecBinaryUnmarshal(yyv1038)
				} else if !yym1039 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1038)
				} else {
					z.DecFallback(yyv1038, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1033)
		} // end switch yys1033
	} // end for yyj1033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1042 int
	var yyb1042 bool
	var yyhl1042 bool = l >= 0
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1045 := &x.LastProbeTime
		yym1046 := z.DecBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1045) {
		} else if yym1046 {
			z.DecBinaryUnmarshal(yyv1045)
		} else if !yym1046 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1045)
		} else {
			z.DecFallback(yyv1045, false)
		}
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1047 := &x.LastTransitionTime
		yym1048 := z.DecBinary()
		_ = yym1048
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1047) {
		} else if yym1048 {
			z.DecBinaryUnmarshal(yyv1047)
		} else if !yym1048 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1047)
		} else {
			z.DecFallback(yyv1047, false)
		}
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1042++
		if yyhl1042 {
			yyb1042 = yyj1042 > l
		} else {
			yyb1042 = r.CheckBreak()
		}
		if yyb1042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [5]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			yyq1052[0] = x.Kind != ""
			yyq1052[1] = x.APIVersion != ""
			yyq1052[2] = true
			yyq1052[3] = true
			yyq1052[4] = true
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(5)
			} else {
				yynn1052 = 0
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[0] {
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1052[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1055 := z.EncBinary()
					_ = yym1055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[1] {
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1058 := z.EncBinary()
					_ = yym1058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[2] {
					yy1060 := &x.ObjectMeta
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1060) {
					} else {
						z.EncFallback(yy1060)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1062 := &x.ObjectMeta
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1062) {
					} else {
						z.EncFallback(yy1062)
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[3] {
					yy1065 := &x.Spec
					yy1065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1066 := &x.Spec
					yy1066.CodecEncodeSelf(e)
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[4] {
					yy1068 := &x.Status
					yy1068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1069 := &x.Status
					yy1069.CodecEncodeSelf(e)
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1070 := z.DecBinary()
	_ = yym1070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1071 := r.ContainerType()
		if yyct1071 == codecSelferValueTypeMap1234 {
			yyl1071 := r.ReadMapStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1071, d)
			}
		} else if yyct1071 == codecSelferValueTypeArray1234 {
			yyl1071 := r.ReadArrayStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1072Slc
	var yyhl1072 bool = l >= 0
	for yyj1072 := 0; ; yyj1072++ {
		if yyhl1072 {
			if yyj1072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1072Slc = r.DecodeBytes(yys1072Slc, true, true)
		yys1072 := string(yys1072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1072 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1075 := &x.ObjectMeta
				yym1076 := z.DecBinary()
				_ = yym1076
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1075) {
				} else {
					z.DecFallback(yyv1075, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1077 := &x.Spec
				yyv1077.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1078 := &x.Status
				yyv1078.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1072)
		} // end switch yys1072
	} // end for yyj1072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1079 int
	var yyb1079 bool
	var yyhl1079 bool = l >= 0
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1082 := &x.ObjectMeta
		yym1083 := z.DecBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1082) {
		} else {
			z.DecFallback(yyv1082, false)
		}
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1084 := &x.Spec
		yyv1084.CodecDecodeSelf(d)
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1085 := &x.Status
		yyv1085.CodecDecodeSelf(d)
	}
	for {
		yyj1079++
		if yyhl1079 {
			yyb1079 = yyj1079 > l
		} else {
			yyb1079 = r.CheckBreak()
		}
		if yyb1079 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1079-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1086 := z.EncBinary()
		_ = yym1086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1087 := !z.EncBinary()
			yy2arr1087 := z.EncBasicHandle().StructToArray
			var yyq1087 [4]bool
			_, _, _ = yysep1087, yyq1087, yy2arr1087
			const yyr1087 bool = false
			yyq1087[0] = x.Kind != ""
			yyq1087[1] = x.APIVersion != ""
			yyq1087[2] = true
			var yynn1087 int
			if yyr1087 || yy2arr1087 {
				r.EncodeArrayStart(4)
			} else {
				yynn1087 = 1
				for _, b := range yyq1087 {
					if b {
						yynn1087++
					}
				}
				r.EncodeMapStart(yynn1087)
				yynn1087 = 0
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[0] {
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1087[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1090 := z.EncBinary()
					_ = yym1090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[1] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[2] {
					yy1095 := &x.ListMeta
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1095) {
					} else {
						z.EncFallback(yy1095)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1087[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1097 := &x.ListMeta
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1097) {
					} else {
						z.EncFallback(yy1097)
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1100 := z.EncBinary()
					_ = yym1100
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1102 := z.DecBinary()
	_ = yym1102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1103 := r.ContainerType()
		if yyct1103 == codecSelferValueTypeMap1234 {
			yyl1103 := r.ReadMapStart()
			if yyl1103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1103, d)
			}
		} else if yyct1103 == codecSelferValueTypeArray1234 {
			yyl1103 := r.ReadArrayStart()
			if yyl1103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1104Slc
	var yyhl1104 bool = l >= 0
	for yyj1104 := 0; ; yyj1104++ {
		if yyhl1104 {
			if yyj1104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1104Slc = r.DecodeBytes(yys1104Slc, true, true)
		yys1104 := string(yys1104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1104 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1107 := &x.ListMeta
				yym1108 := z.DecBinary()
				_ = yym1108
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1107) {
				} else {
					z.DecFallback(yyv1107, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1109 := &x.Items
				yym1110 := z.DecBinary()
				_ = yym1110
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1104)
		} // end switch yys1104
	} // end for yyj1104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1114 := &x.ListMeta
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1114) {
		} else {
			z.DecFallback(yyv1114, false)
		}
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1116 := &x.Items
		yym1117 := z.DecBinary()
		_ = yym1117
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1116), d)
		}
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1118 := z.EncBinary()
		_ = yym1118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1119 := !z.EncBinary()
			yy2arr1119 := z.EncBasicHandle().StructToArray
			var yyq1119 [2]bool
			_, _, _ = yysep1119, yyq1119, yy2arr1119
			const yyr1119 bool = false
			yyq1119[0] = x.Backend != nil
			yyq1119[1] = len(x.Rules) != 0
			var yynn1119 int
			if yyr1119 || yy2arr1119 {
				r.EncodeArrayStart(2)
			} else {
				yynn1119 = 0
				for _, b := range yyq1119 {
					if b {
						yynn1119++
					}
				}
				r.EncodeMapStart(yynn1119)
				yynn1119 = 0
			}
			if yyr1119 || yy2arr1119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1119[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1119[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1119 || yy2arr1119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1119[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1122 := z.EncBinary()
						_ = yym1122
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1123 := z.EncBinary()
						_ = yym1123
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1119 || yy2arr1119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1124 := z.DecBinary()
	_ = yym1124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1125 := r.ContainerType()
		if yyct1125 == codecSelferValueTypeMap1234 {
			yyl1125 := r.ReadMapStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1125, d)
			}
		} else if yyct1125 == codecSelferValueTypeArray1234 {
			yyl1125 := r.ReadArrayStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1126Slc
	var yyhl1126 bool = l >= 0
	for yyj1126 := 0; ; yyj1126++ {
		if yyhl1126 {
			if yyj1126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1126Slc = r.DecodeBytes(yys1126Slc, true, true)
		yys1126 := string(yys1126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1126 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1128 := &x.Rules
				yym1129 := z.DecBinary()
				_ = yym1129
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1128), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1126)
		} // end switch yys1126
	} // end for yyj1126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1132 := &x.Rules
		yym1133 := z.DecBinary()
		_ = yym1133
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1132), d)
		}
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1134 := z.EncBinary()
		_ = yym1134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1135 := !z.EncBinary()
			yy2arr1135 := z.EncBasicHandle().StructToArray
			var yyq1135 [1]bool
			_, _, _ = yysep1135, yyq1135, yy2arr1135
			const yyr1135 bool = false
			yyq1135[0] = true
			var yynn1135 int
			if yyr1135 || yy2arr1135 {
				r.EncodeArrayStart(1)
			} else {
				yynn1135 = 0
				for _, b := range yyq1135 {
					if b {
						yynn1135++
					}
				}
				r.EncodeMapStart(yynn1135)
				yynn1135 = 0
			}
			if yyr1135 || yy2arr1135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1135[0] {
					yy1137 := &x.LoadBalancer
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1137) {
					} else {
						z.EncFallback(yy1137)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1139 := &x.LoadBalancer
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1139) {
					} else {
						z.EncFallback(yy1139)
					}
				}
			}
			if yyr1135 || yy2arr1135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1141 := z.DecBinary()
	_ = yym1141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1142 := r.ContainerType()
		if yyct1142 == codecSelferValueTypeMap1234 {
			yyl1142 := r.ReadMapStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1142, d)
			}
		} else if yyct1142 == codecSelferValueTypeArray1234 {
			yyl1142 := r.ReadArrayStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1143Slc
	var yyhl1143 bool = l >= 0
	for yyj1143 := 0; ; yyj1143++ {
		if yyhl1143 {
			if yyj1143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1143Slc = r.DecodeBytes(yys1143Slc, true, true)
		yys1143 := string(yys1143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1143 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv1144 := &x.LoadBalancer
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1144) {
				} else {
					z.DecFallback(yyv1144, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1143)
		} // end switch yys1143
	} // end for yyj1143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1146 int
	var yyb1146 bool
	var yyhl1146 bool = l >= 0
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv1147 := &x.LoadBalancer
		yym1148 := z.DecBinary()
		_ = yym1148
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1147) {
		} else {
			z.DecFallback(yyv1147, false)
		}
	}
	for {
		yyj1146++
		if yyhl1146 {
			yyb1146 = yyj1146 > l
		} else {
			yyb1146 = r.CheckBreak()
		}
		if yyb1146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1149 := z.EncBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1150 := !z.EncBinary()
			yy2arr1150 := z.EncBasicHandle().StructToArray
			var yyq1150 [2]bool
			_, _, _ = yysep1150, yyq1150, yy2arr1150
			const yyr1150 bool = false
			yyq1150[0] = x.Host != ""
			yyq1150[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1150 int
			if yyr1150 || yy2arr1150 {
				r.EncodeArrayStart(2)
			} else {
				yynn1150 = 0
				for _, b := range yyq1150 {
					if b {
						yynn1150++
					}
				}
				r.EncodeMapStart(yynn1150)
				yynn1150 = 0
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[0] {
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1150[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1154 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1154 = true
				goto LABEL1154
			}
		LABEL1154:
			if yyr1150 || yy2arr1150 {
				if yyn1154 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1150[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1150[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1154 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1155 := z.DecBinary()
	_ = yym1155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1156 := r.ContainerType()
		if yyct1156 == codecSelferValueTypeMap1234 {
			yyl1156 := r.ReadMapStart()
			if yyl1156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1156, d)
			}
		} else if yyct1156 == codecSelferValueTypeArray1234 {
			yyl1156 := r.ReadArrayStart()
			if yyl1156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1157Slc
	var yyhl1157 bool = l >= 0
	for yyj1157 := 0; ; yyj1157++ {
		if yyhl1157 {
			if yyj1157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1157Slc = r.DecodeBytes(yys1157Slc, true, true)
		yys1157 := string(yys1157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1157 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1157)
		} // end switch yys1157
	} // end for yyj1157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1160 int
	var yyb1160 bool
	var yyhl1160 bool = l >= 0
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1160++
		if yyhl1160 {
			yyb1160 = yyj1160 > l
		} else {
			yyb1160 = r.CheckBreak()
		}
		if yyb1160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1163 := z.EncBinary()
		_ = yym1163
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1164 := !z.EncBinary()
			yy2arr1164 := z.EncBasicHandle().StructToArray
			var yyq1164 [1]bool
			_, _, _ = yysep1164, yyq1164, yy2arr1164
			const yyr1164 bool = false
			yyq1164[0] = x.HTTP != nil
			var yynn1164 int
			if yyr1164 || yy2arr1164 {
				r.EncodeArrayStart(1)
			} else {
				yynn1164 = 0
				for _, b := range yyq1164 {
					if b {
						yynn1164++
					}
				}
				r.EncodeMapStart(yynn1164)
				yynn1164 = 0
			}
			if yyr1164 || yy2arr1164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1164[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1164[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1164 || yy2arr1164 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1166 := z.DecBinary()
	_ = yym1166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1167 := r.ContainerType()
		if yyct1167 == codecSelferValueTypeMap1234 {
			yyl1167 := r.ReadMapStart()
			if yyl1167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1167, d)
			}
		} else if yyct1167 == codecSelferValueTypeArray1234 {
			yyl1167 := r.ReadArrayStart()
			if yyl1167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1168Slc
	var yyhl1168 bool = l >= 0
	for yyj1168 := 0; ; yyj1168++ {
		if yyhl1168 {
			if yyj1168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1168Slc = r.DecodeBytes(yys1168Slc, true, true)
		yys1168 := string(yys1168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1168 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1168)
		} // end switch yys1168
	} // end for yyj1168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1170 int
	var yyb1170 bool
	var yyhl1170 bool = l >= 0
	yyj1170++
	if yyhl1170 {
		yyb1170 = yyj1170 > l
	} else {
		yyb1170 = r.CheckBreak()
	}
	if yyb1170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1170++
		if yyhl1170 {
			yyb1170 = yyj1170 > l
		} else {
			yyb1170 = r.CheckBreak()
		}
		if yyb1170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1172 := z.EncBinary()
		_ = yym1172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1173 := !z.EncBinary()
			yy2arr1173 := z.EncBasicHandle().StructToArray
			var yyq1173 [1]bool
			_, _, _ = yysep1173, yyq1173, yy2arr1173
			const yyr1173 bool = false
			var yynn1173 int
			if yyr1173 || yy2arr1173 {
				r.EncodeArrayStart(1)
			} else {
				yynn1173 = 1
				for _, b := range yyq1173 {
					if b {
						yynn1173++
					}
				}
				r.EncodeMapStart(yynn1173)
				yynn1173 = 0
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1178 := r.ContainerType()
		if yyct1178 == codecSelferValueTypeMap1234 {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if yyct1178 == codecSelferValueTypeArray1234 {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1179 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1180 := &x.Paths
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1180), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1183 := &x.Paths
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1183), d)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [2]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[0] = x.Path != ""
			var yynn1186 int
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(2)
			} else {
				yynn1186 = 1
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
				yynn1186 = 0
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1186[0] {
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1191 := &x.Backend
				yy1191.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1192 := &x.Backend
				yy1192.CodecEncodeSelf(e)
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1193 := z.DecBinary()
	_ = yym1193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1194 := r.ContainerType()
		if yyct1194 == codecSelferValueTypeMap1234 {
			yyl1194 := r.ReadMapStart()
			if yyl1194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1194, d)
			}
		} else if yyct1194 == codecSelferValueTypeArray1234 {
			yyl1194 := r.ReadArrayStart()
			if yyl1194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1195Slc
	var yyhl1195 bool = l >= 0
	for yyj1195 := 0; ; yyj1195++ {
		if yyhl1195 {
			if yyj1195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1195Slc = r.DecodeBytes(yys1195Slc, true, true)
		yys1195 := string(yys1195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1195 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1197 := &x.Backend
				yyv1197.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1195)
		} // end switch yys1195
	} // end for yyj1195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1198 int
	var yyb1198 bool
	var yyhl1198 bool = l >= 0
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1200 := &x.Backend
		yyv1200.CodecDecodeSelf(d)
	}
	for {
		yyj1198++
		if yyhl1198 {
			yyb1198 = yyj1198 > l
		} else {
			yyb1198 = r.CheckBreak()
		}
		if yyb1198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1201 := z.EncBinary()
		_ = yym1201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1202 := !z.EncBinary()
			yy2arr1202 := z.EncBasicHandle().StructToArray
			var yyq1202 [2]bool
			_, _, _ = yysep1202, yyq1202, yy2arr1202
			const yyr1202 bool = false
			var yynn1202 int
			if yyr1202 || yy2arr1202 {
				r.EncodeArrayStart(2)
			} else {
				yynn1202 = 2
				for _, b := range yyq1202 {
					if b {
						yynn1202++
					}
				}
				r.EncodeMapStart(yynn1202)
				yynn1202 = 0
			}
			if yyr1202 || yy2arr1202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1204 := z.EncBinary()
				_ = yym1204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1205 := z.EncBinary()
				_ = yym1205
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1202 || yy2arr1202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1207 := &x.ServicePort
				yym1208 := z.EncBinary()
				_ = yym1208
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1207) {
				} else if !yym1208 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1207)
				} else {
					z.EncFallback(yy1207)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1209 := &x.ServicePort
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1209) {
				} else if !yym1210 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1209)
				} else {
					z.EncFallback(yy1209)
				}
			}
			if yyr1202 || yy2arr1202 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1211 := z.DecBinary()
	_ = yym1211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1212 := r.ContainerType()
		if yyct1212 == codecSelferValueTypeMap1234 {
			yyl1212 := r.ReadMapStart()
			if yyl1212 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1212, d)
			}
		} else if yyct1212 == codecSelferValueTypeArray1234 {
			yyl1212 := r.ReadArrayStart()
			if yyl1212 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1213Slc
	var yyhl1213 bool = l >= 0
	for yyj1213 := 0; ; yyj1213++ {
		if yyhl1213 {
			if yyj1213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1213Slc = r.DecodeBytes(yys1213Slc, true, true)
		yys1213 := string(yys1213Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1213 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1215 := &x.ServicePort
				yym1216 := z.DecBinary()
				_ = yym1216
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1215) {
				} else if !yym1216 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1215)
				} else {
					z.DecFallback(yyv1215, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1213)
		} // end switch yys1213
	} // end for yyj1213
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1217 int
	var yyb1217 bool
	var yyhl1217 bool = l >= 0
	yyj1217++
	if yyhl1217 {
		yyb1217 = yyj1217 > l
	} else {
		yyb1217 = r.CheckBreak()
	}
	if yyb1217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1217++
	if yyhl1217 {
		yyb1217 = yyj1217 > l
	} else {
		yyb1217 = r.CheckBreak()
	}
	if yyb1217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1219 := &x.ServicePort
		yym1220 := z.DecBinary()
		_ = yym1220
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1219) {
		} else if !yym1220 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1219)
		} else {
			z.DecFallback(yyv1219, false)
		}
	}
	for {
		yyj1217++
		if yyhl1217 {
			yyb1217 = yyj1217 > l
		} else {
			yyb1217 = r.CheckBreak()
		}
		if yyb1217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1221 := z.EncBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1222 := z.DecBinary()
	_ = yym1222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1223 := z.EncBinary()
		_ = yym1223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1224 := !z.EncBinary()
			yy2arr1224 := z.EncBasicHandle().StructToArray
			var yyq1224 [2]bool
			_, _, _ = yysep1224, yyq1224, yy2arr1224
			const yyr1224 bool = false
			var yynn1224 int
			if yyr1224 || yy2arr1224 {
				r.EncodeArrayStart(2)
			} else {
				yynn1224 = 2
				for _, b := range yyq1224 {
					if b {
						yynn1224++
					}
				}
				r.EncodeMapStart(yynn1224)
				yynn1224 = 0
			}
			if yyr1224 || yy2arr1224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1224 || yy2arr1224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1228 := z.EncBinary()
				_ = yym1228
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1224 || yy2arr1224 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1229 := z.DecBinary()
	_ = yym1229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1230 := r.ContainerType()
		if yyct1230 == codecSelferValueTypeMap1234 {
			yyl1230 := r.ReadMapStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1230, d)
			}
		} else if yyct1230 == codecSelferValueTypeArray1234 {
			yyl1230 := r.ReadArrayStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1231Slc
	var yyhl1231 bool = l >= 0
	for yyj1231 := 0; ; yyj1231++ {
		if yyhl1231 {
			if yyj1231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1231Slc = r.DecodeBytes(yys1231Slc, true, true)
		yys1231 := string(yys1231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1231 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1231)
		} // end switch yys1231
	} // end for yyj1231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1237 := z.EncBinary()
		_ = yym1237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1238 := !z.EncBinary()
			yy2arr1238 := z.EncBasicHandle().StructToArray
			var yyq1238 [3]bool
			_, _, _ = yysep1238, yyq1238, yy2arr1238
			const yyr1238 bool = false
			var yynn1238 int
			if yyr1238 || yy2arr1238 {
				r.EncodeArrayStart(3)
			} else {
				yynn1238 = 3
				for _, b := range yyq1238 {
					if b {
						yynn1238++
					}
				}
				r.EncodeMapStart(yynn1238)
				yynn1238 = 0
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1244 := z.EncBinary()
				_ = yym1244
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1248 := z.DecBinary()
	_ = yym1248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1249 := r.ContainerType()
		if yyct1249 == codecSelferValueTypeMap1234 {
			yyl1249 := r.ReadMapStart()
			if yyl1249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1249, d)
			}
		} else if yyct1249 == codecSelferValueTypeArray1234 {
			yyl1249 := r.ReadArrayStart()
			if yyl1249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1250Slc
	var yyhl1250 bool = l >= 0
	for yyj1250 := 0; ; yyj1250++ {
		if yyhl1250 {
			if yyj1250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1250Slc = r.DecodeBytes(yys1250Slc, true, true)
		yys1250 := string(yys1250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1250 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1253 := &x.TargetUtilization
				yym1254 := z.DecBinary()
				_ = yym1254
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1253), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1250)
		} // end switch yys1250
	} // end for yyj1250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1255 int
	var yyb1255 bool
	var yyhl1255 bool = l >= 0
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1258 := &x.TargetUtilization
		yym1259 := z.DecBinary()
		_ = yym1259
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1258), d)
		}
	}
	for {
		yyj1255++
		if yyhl1255 {
			yyb1255 = yyj1255 > l
		} else {
			yyb1255 = r.CheckBreak()
		}
		if yyb1255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1260 := z.EncBinary()
		_ = yym1260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1261 := !z.EncBinary()
			yy2arr1261 := z.EncBasicHandle().StructToArray
			var yyq1261 [4]bool
			_, _, _ = yysep1261, yyq1261, yy2arr1261
			const yyr1261 bool = false
			yyq1261[0] = x.Kind != ""
			yyq1261[1] = x.APIVersion != ""
			yyq1261[2] = true
			yyq1261[3] = true
			var yynn1261 int
			if yyr1261 || yy2arr1261 {
				r.EncodeArrayStart(4)
			} else {
				yynn1261 = 0
				for _, b := range yyq1261 {
					if b {
						yynn1261++
					}
				}
				r.EncodeMapStart(yynn1261)
				yynn1261 = 0
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[0] {
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[1] {
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[2] {
					yy1269 := &x.ObjectMeta
					yym1270 := z.EncBinary()
					_ = yym1270
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1269) {
					} else {
						z.EncFallback(yy1269)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1271 := &x.ObjectMeta
					yym1272 := z.EncBinary()
					_ = yym1272
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1271) {
					} else {
						z.EncFallback(yy1271)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[3] {
					yy1274 := &x.Spec
					yy1274.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1275 := &x.Spec
					yy1275.CodecEncodeSelf(e)
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1276 := z.DecBinary()
	_ = yym1276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1277 := r.ContainerType()
		if yyct1277 == codecSelferValueTypeMap1234 {
			yyl1277 := r.ReadMapStart()
			if yyl1277 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1277, d)
			}
		} else if yyct1277 == codecSelferValueTypeArray1234 {
			yyl1277 := r.ReadArrayStart()
			if yyl1277 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1278Slc
	var yyhl1278 bool = l >= 0
	for yyj1278 := 0; ; yyj1278++ {
		if yyhl1278 {
			if yyj1278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1278Slc = r.DecodeBytes(yys1278Slc, true, true)
		yys1278 := string(yys1278Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1278 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1281 := &x.ObjectMeta
				yym1282 := z.DecBinary()
				_ = yym1282
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1281) {
				} else {
					z.DecFallback(yyv1281, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1283 := &x.Spec
				yyv1283.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1278)
		} // end switch yys1278
	} // end for yyj1278
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1287 := &x.ObjectMeta
		yym1288 := z.DecBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1287) {
		} else {
			z.DecFallback(yyv1287, false)
		}
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1289 := &x.Spec
		yyv1289.CodecDecodeSelf(d)
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1290 := z.EncBinary()
		_ = yym1290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1291 := !z.EncBinary()
			yy2arr1291 := z.EncBasicHandle().StructToArray
			var yyq1291 [4]bool
			_, _, _ = yysep1291, yyq1291, yy2arr1291
			const yyr1291 bool = false
			yyq1291[0] = x.Kind != ""
			yyq1291[1] = x.APIVersion != ""
			yyq1291[2] = true
			var yynn1291 int
			if yyr1291 || yy2arr1291 {
				r.EncodeArrayStart(4)
			} else {
				yynn1291 = 1
				for _, b := range yyq1291 {
					if b {
						yynn1291++
					}
				}
				r.EncodeMapStart(yynn1291)
				yynn1291 = 0
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1291[0] {
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1291[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1291[1] {
					yym1296 := z.EncBinary()
					_ = yym1296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1291[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1291[2] {
					yy1299 := &x.ListMeta
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1299) {
					} else {
						z.EncFallback(yy1299)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1291[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1301 := &x.ListMeta
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1301) {
					} else {
						z.EncFallback(yy1301)
					}
				}
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1304 := z.EncBinary()
					_ = yym1304
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1306 := z.DecBinary()
	_ = yym1306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1307 := r.ContainerType()
		if yyct1307 == codecSelferValueTypeMap1234 {
			yyl1307 := r.ReadMapStart()
			if yyl1307 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1307, d)
			}
		} else if yyct1307 == codecSelferValueTypeArray1234 {
			yyl1307 := r.ReadArrayStart()
			if yyl1307 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1308Slc
	var yyhl1308 bool = l >= 0
	for yyj1308 := 0; ; yyj1308++ {
		if yyhl1308 {
			if yyj1308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1308Slc = r.DecodeBytes(yys1308Slc, true, true)
		yys1308 := string(yys1308Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1308 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1311 := &x.ListMeta
				yym1312 := z.DecBinary()
				_ = yym1312
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1311) {
				} else {
					z.DecFallback(yyv1311, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1313 := &x.Items
				yym1314 := z.DecBinary()
				_ = yym1314
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1313), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1308)
		} // end switch yys1308
	} // end for yyj1308
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1318 := &x.ListMeta
		yym1319 := z.DecBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1318) {
		} else {
			z.DecFallback(yyv1318, false)
		}
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1320 := &x.Items
		yym1321 := z.DecBinary()
		_ = yym1321
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1320), d)
		}
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1322 := z.EncBinary()
		_ = yym1322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1323 := !z.EncBinary()
			yy2arr1323 := z.EncBasicHandle().StructToArray
			var yyq1323 [2]bool
			_, _, _ = yysep1323, yyq1323, yy2arr1323
			const yyr1323 bool = false
			yyq1323[0] = len(x.MatchLabels) != 0
			yyq1323[1] = len(x.MatchExpressions) != 0
			var yynn1323 int
			if yyr1323 || yy2arr1323 {
				r.EncodeArrayStart(2)
			} else {
				yynn1323 = 0
				for _, b := range yyq1323 {
					if b {
						yynn1323++
					}
				}
				r.EncodeMapStart(yynn1323)
				yynn1323 = 0
			}
			if yyr1323 || yy2arr1323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1323[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1325 := z.EncBinary()
						_ = yym1325
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1323[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1326 := z.EncBinary()
						_ = yym1326
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1323 || yy2arr1323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1323[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1328 := z.EncBinary()
						_ = yym1328
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1329 := z.EncBinary()
						_ = yym1329
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1323 || yy2arr1323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1330 := z.DecBinary()
	_ = yym1330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1331 := r.ContainerType()
		if yyct1331 == codecSelferValueTypeMap1234 {
			yyl1331 := r.ReadMapStart()
			if yyl1331 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1331, d)
			}
		} else if yyct1331 == codecSelferValueTypeArray1234 {
			yyl1331 := r.ReadArrayStart()
			if yyl1331 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1331, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1332Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1332Slc
	var yyhl1332 bool = l >= 0
	for yyj1332 := 0; ; yyj1332++ {
		if yyhl1332 {
			if yyj1332 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1332Slc = r.DecodeBytes(yys1332Slc, true, true)
		yys1332 := string(yys1332Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1332 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1333 := &x.MatchLabels
				yym1334 := z.DecBinary()
				_ = yym1334
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1333, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1335 := &x.MatchExpressions
				yym1336 := z.DecBinary()
				_ = yym1336
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1335), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1332)
		} // end switch yys1332
	} // end for yyj1332
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1337 int
	var yyb1337 bool
	var yyhl1337 bool = l >= 0
	yyj1337++
	if yyhl1337 {
		yyb1337 = yyj1337 > l
	} else {
		yyb1337 = r.CheckBreak()
	}
	if yyb1337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1338 := &x.MatchLabels
		yym1339 := z.DecBinary()
		_ = yym1339
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1338, false, d)
		}
	}
	yyj1337++
	if yyhl1337 {
		yyb1337 = yyj1337 > l
	} else {
		yyb1337 = r.CheckBreak()
	}
	if yyb1337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1340 := &x.MatchExpressions
		yym1341 := z.DecBinary()
		_ = yym1341
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1340), d)
		}
	}
	for {
		yyj1337++
		if yyhl1337 {
			yyb1337 = yyj1337 > l
		} else {
			yyb1337 = r.CheckBreak()
		}
		if yyb1337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1342 := z.EncBinary()
		_ = yym1342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1343 := !z.EncBinary()
			yy2arr1343 := z.EncBasicHandle().StructToArray
			var yyq1343 [3]bool
			_, _, _ = yysep1343, yyq1343, yy2arr1343
			const yyr1343 bool = false
			yyq1343[2] = len(x.Values) != 0
			var yynn1343 int
			if yyr1343 || yy2arr1343 {
				r.EncodeArrayStart(3)
			} else {
				yynn1343 = 2
				for _, b := range yyq1343 {
					if b {
						yynn1343++
					}
				}
				r.EncodeMapStart(yynn1343)
				yynn1343 = 0
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1345 := z.EncBinary()
				_ = yym1345
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1346 := z.EncBinary()
				_ = yym1346
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1343[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1349 := z.EncBinary()
						_ = yym1349
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1343[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1350 := z.EncBinary()
						_ = yym1350
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1351 := z.DecBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1352 := r.ContainerType()
		if yyct1352 == codecSelferValueTypeMap1234 {
			yyl1352 := r.ReadMapStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1352, d)
			}
		} else if yyct1352 == codecSelferValueTypeArray1234 {
			yyl1352 := r.ReadArrayStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1353Slc
	var yyhl1353 bool = l >= 0
	for yyj1353 := 0; ; yyj1353++ {
		if yyhl1353 {
			if yyj1353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1353Slc = r.DecodeBytes(yys1353Slc, true, true)
		yys1353 := string(yys1353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1353 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1356 := &x.Values
				yym1357 := z.DecBinary()
				_ = yym1357
				if false {
				} else {
					z.F.DecSliceStringX(yyv1356, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1353)
		} // end switch yys1353
	} // end for yyj1353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1358 int
	var yyb1358 bool
	var yyhl1358 bool = l >= 0
	yyj1358++
	if yyhl1358 {
		yyb1358 = yyj1358 > l
	} else {
		yyb1358 = r.CheckBreak()
	}
	if yyb1358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1358++
	if yyhl1358 {
		yyb1358 = yyj1358 > l
	} else {
		yyb1358 = r.CheckBreak()
	}
	if yyb1358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1358++
	if yyhl1358 {
		yyb1358 = yyj1358 > l
	} else {
		yyb1358 = r.CheckBreak()
	}
	if yyb1358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1361 := &x.Values
		yym1362 := z.DecBinary()
		_ = yym1362
		if false {
		} else {
			z.F.DecSliceStringX(yyv1361, false, d)
		}
	}
	for {
		yyj1358++
		if yyhl1358 {
			yyb1358 = yyj1358 > l
		} else {
			yyb1358 = r.CheckBreak()
		}
		if yyb1358 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1358-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1363 := z.EncBinary()
	_ = yym1363
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1365 := z.EncBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1366 := !z.EncBinary()
			yy2arr1366 := z.EncBasicHandle().StructToArray
			var yyq1366 [5]bool
			_, _, _ = yysep1366, yyq1366, yy2arr1366
			const yyr1366 bool = false
			yyq1366[0] = x.Kind != ""
			yyq1366[1] = x.APIVersion != ""
			yyq1366[2] = true
			yyq1366[3] = true
			yyq1366[4] = true
			var yynn1366 int
			if yyr1366 || yy2arr1366 {
				r.EncodeArrayStart(5)
			} else {
				yynn1366 = 0
				for _, b := range yyq1366 {
					if b {
						yynn1366++
					}
				}
				r.EncodeMapStart(yynn1366)
				yynn1366 = 0
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[0] {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1366[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[1] {
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1366[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[2] {
					yy1374 := &x.ObjectMeta
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1374) {
					} else {
						z.EncFallback(yy1374)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1376 := &x.ObjectMeta
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1376) {
					} else {
						z.EncFallback(yy1376)
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[3] {
					yy1379 := &x.Spec
					yy1379.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1380 := &x.Spec
					yy1380.CodecEncodeSelf(e)
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[4] {
					yy1382 := &x.Status
					yy1382.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1383 := &x.Status
					yy1383.CodecEncodeSelf(e)
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1384 := z.DecBinary()
	_ = yym1384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1385 := r.ContainerType()
		if yyct1385 == codecSelferValueTypeMap1234 {
			yyl1385 := r.ReadMapStart()
			if yyl1385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1385, d)
			}
		} else if yyct1385 == codecSelferValueTypeArray1234 {
			yyl1385 := r.ReadArrayStart()
			if yyl1385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1386Slc
	var yyhl1386 bool = l >= 0
	for yyj1386 := 0; ; yyj1386++ {
		if yyhl1386 {
			if yyj1386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1386Slc = r.DecodeBytes(yys1386Slc, true, true)
		yys1386 := string(yys1386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1389 := &x.ObjectMeta
				yym1390 := z.DecBinary()
				_ = yym1390
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1389) {
				} else {
					z.DecFallback(yyv1389, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1391 := &x.Spec
				yyv1391.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1392 := &x.Status
				yyv1392.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1386)
		} // end switch yys1386
	} // end for yyj1386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1393 int
	var yyb1393 bool
	var yyhl1393 bool = l >= 0
	yyj1393++
	if yyhl1393 {
		yyb1393 = yyj1393 > l
	} else {
		yyb1393 = r.CheckBreak()
	}
	if yyb1393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1393++
	if yyhl1393 {
		yyb1393 = yyj1393 > l
	} else {
		yyb1393 = r.CheckBreak()
	}
	if yyb1393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1393++
	if yyhl1393 {
		yyb1393 = yyj1393 > l
	} else {
		yyb1393 = r.CheckBreak()
	}
	if yyb1393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1396 := &x.ObjectMeta
		yym1397 := z.DecBinary()
		_ = yym1397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1396) {
		} else {
			z.DecFallback(yyv1396, false)
		}
	}
	yyj1393++
	if yyhl1393 {
		yyb1393 = yyj1393 > l
	} else {
		yyb1393 = r.CheckBreak()
	}
	if yyb1393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1398 := &x.Spec
		yyv1398.CodecDecodeSelf(d)
	}
	yyj1393++
	if yyhl1393 {
		yyb1393 = yyj1393 > l
	} else {
		yyb1393 = r.CheckBreak()
	}
	if yyb1393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1399 := &x.Status
		yyv1399.CodecDecodeSelf(d)
	}
	for {
		yyj1393++
		if yyhl1393 {
			yyb1393 = yyj1393 > l
		} else {
			yyb1393 = r.CheckBreak()
		}
		if yyb1393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1400 := z.EncBinary()
		_ = yym1400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1401 := !z.EncBinary()
			yy2arr1401 := z.EncBasicHandle().StructToArray
			var yyq1401 [4]bool
			_, _, _ = yysep1401, yyq1401, yy2arr1401
			const yyr1401 bool = false
			yyq1401[0] = x.Kind != ""
			yyq1401[1] = x.APIVersion != ""
			yyq1401[2] = true
			var yynn1401 int
			if yyr1401 || yy2arr1401 {
				r.EncodeArrayStart(4)
			} else {
				yynn1401 = 1
				for _, b := range yyq1401 {
					if b {
						yynn1401++
					}
				}
				r.EncodeMapStart(yynn1401)
				yynn1401 = 0
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1401[0] {
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1401[1] {
					yym1406 := z.EncBinary()
					_ = yym1406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1401[2] {
					yy1409 := &x.ListMeta
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1409) {
					} else {
						z.EncFallback(yy1409)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1411 := &x.ListMeta
					yym1412 := z.EncBinary()
					_ = yym1412
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1411) {
					} else {
						z.EncFallback(yy1411)
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1415 := z.EncBinary()
					_ = yym1415
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1416 := z.DecBinary()
	_ = yym1416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1417 := r.ContainerType()
		if yyct1417 == codecSelferValueTypeMap1234 {
			yyl1417 := r.ReadMapStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1417, d)
			}
		} else if yyct1417 == codecSelferValueTypeArray1234 {
			yyl1417 := r.ReadArrayStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1418Slc
	var yyhl1418 bool = l >= 0
	for yyj1418 := 0; ; yyj1418++ {
		if yyhl1418 {
			if yyj1418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1418Slc = r.DecodeBytes(yys1418Slc, true, true)
		yys1418 := string(yys1418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1418 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1421 := &x.ListMeta
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1421) {
				} else {
					z.DecFallback(yyv1421, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1423 := &x.Items
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1423), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1418)
		} // end switch yys1418
	} // end for yyj1418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1425 int
	var yyb1425 bool
	var yyhl1425 bool = l >= 0
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1428 := &x.ListMeta
		yym1429 := z.DecBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1428) {
		} else {
			z.DecFallback(yyv1428, false)
		}
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1430 := &x.Items
		yym1431 := z.DecBinary()
		_ = yym1431
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1430), d)
		}
	}
	for {
		yyj1425++
		if yyhl1425 {
			yyb1425 = yyj1425 > l
		} else {
			yyb1425 = r.CheckBreak()
		}
		if yyb1425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1432 := z.EncBinary()
		_ = yym1432
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1433 := !z.EncBinary()
			yy2arr1433 := z.EncBasicHandle().StructToArray
			var yyq1433 [3]bool
			_, _, _ = yysep1433, yyq1433, yy2arr1433
			const yyr1433 bool = false
			yyq1433[1] = x.Selector != nil
			yyq1433[2] = x.Template != nil
			var yynn1433 int
			if yyr1433 || yy2arr1433 {
				r.EncodeArrayStart(3)
			} else {
				yynn1433 = 1
				for _, b := range yyq1433 {
					if b {
						yynn1433++
					}
				}
				r.EncodeMapStart(yynn1433)
				yynn1433 = 0
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1435 := z.EncBinary()
				_ = yym1435
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1436 := z.EncBinary()
				_ = yym1436
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1433[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1433[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym1439 := z.EncBinary()
						_ = yym1439
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1433[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr1433 || yy2arr1433 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1441 := z.DecBinary()
	_ = yym1441
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1442 := r.ContainerType()
		if yyct1442 == codecSelferValueTypeMap1234 {
			yyl1442 := r.ReadMapStart()
			if yyl1442 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1442, d)
			}
		} else if yyct1442 == codecSelferValueTypeArray1234 {
			yyl1442 := r.ReadArrayStart()
			if yyl1442 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1442, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1443Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1443Slc
	var yyhl1443 bool = l >= 0
	for yyj1443 := 0; ; yyj1443++ {
		if yyhl1443 {
			if yyj1443 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1443Slc = r.DecodeBytes(yys1443Slc, true, true)
		yys1443 := string(yys1443Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1443 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				yym1447 := z.DecBinary()
				_ = yym1447
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1443)
		} // end switch yys1443
	} // end for yyj1443
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1448 int
	var yyb1448 bool
	var yyhl1448 bool = l >= 0
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		yym1452 := z.DecBinary()
		_ = yym1452
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj1448++
		if yyhl1448 {
			yyb1448 = yyj1448 > l
		} else {
			yyb1448 = r.CheckBreak()
		}
		if yyb1448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1453 := z.EncBinary()
		_ = yym1453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1454 := !z.EncBinary()
			yy2arr1454 := z.EncBasicHandle().StructToArray
			var yyq1454 [2]bool
			_, _, _ = yysep1454, yyq1454, yy2arr1454
			const yyr1454 bool = false
			yyq1454[1] = x.ObservedGeneration != 0
			var yynn1454 int
			if yyr1454 || yy2arr1454 {
				r.EncodeArrayStart(2)
			} else {
				yynn1454 = 1
				for _, b := range yyq1454 {
					if b {
						yynn1454++
					}
				}
				r.EncodeMapStart(yynn1454)
				yynn1454 = 0
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1456 := z.EncBinary()
				_ = yym1456
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1457 := z.EncBinary()
				_ = yym1457
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[1] {
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1460 := z.EncBinary()
					_ = yym1460
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1461 := z.DecBinary()
	_ = yym1461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1462 := r.ContainerType()
		if yyct1462 == codecSelferValueTypeMap1234 {
			yyl1462 := r.ReadMapStart()
			if yyl1462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1462, d)
			}
		} else if yyct1462 == codecSelferValueTypeArray1234 {
			yyl1462 := r.ReadArrayStart()
			if yyl1462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1463Slc
	var yyhl1463 bool = l >= 0
	for yyj1463 := 0; ; yyj1463++ {
		if yyhl1463 {
			if yyj1463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1463Slc = r.DecodeBytes(yys1463Slc, true, true)
		yys1463 := string(yys1463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1463 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1463)
		} // end switch yys1463
	} // end for yyj1463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1466 int
	var yyb1466 bool
	var yyhl1466 bool = l >= 0
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1466++
	if yyhl1466 {
		yyb1466 = yyj1466 > l
	} else {
		yyb1466 = r.CheckBreak()
	}
	if yyb1466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1466++
		if yyhl1466 {
			yyb1466 = yyj1466 > l
		} else {
			yyb1466 = r.CheckBreak()
		}
		if yyb1466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1469 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1470 := &yyv1469
		yy1470.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1471 := *v
	yyh1471, yyl1471 := z.DecSliceHelperStart()
	var yyc1471 bool
	if yyl1471 == 0 {
		if yyv1471 == nil {
			yyv1471 = []CustomMetricTarget{}
			yyc1471 = true
		} else if len(yyv1471) != 0 {
			yyv1471 = yyv1471[:0]
			yyc1471 = true
		}
	} else if yyl1471 > 0 {
		var yyrr1471, yyrl1471 int
		var yyrt1471 bool
		if yyl1471 > cap(yyv1471) {

			yyrg1471 := len(yyv1471) > 0
			yyv21471 := yyv1471
			yyrl1471, yyrt1471 = z.DecInferLen(yyl1471, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1471 {
				if yyrl1471 <= cap(yyv1471) {
					yyv1471 = yyv1471[:yyrl1471]
				} else {
					yyv1471 = make([]CustomMetricTarget, yyrl1471)
				}
			} else {
				yyv1471 = make([]CustomMetricTarget, yyrl1471)
			}
			yyc1471 = true
			yyrr1471 = len(yyv1471)
			if yyrg1471 {
				copy(yyv1471, yyv21471)
			}
		} else if yyl1471 != len(yyv1471) {
			yyv1471 = yyv1471[:yyl1471]
			yyc1471 = true
		}
		yyj1471 := 0
		for ; yyj1471 < yyrr1471; yyj1471++ {
			yyh1471.ElemContainerState(yyj1471)
			if r.TryDecodeAsNil() {
				yyv1471[yyj1471] = CustomMetricTarget{}
			} else {
				yyv1472 := &yyv1471[yyj1471]
				yyv1472.CodecDecodeSelf(d)
			}

		}
		if yyrt1471 {
			for ; yyj1471 < yyl1471; yyj1471++ {
				yyv1471 = append(yyv1471, CustomMetricTarget{})
				yyh1471.ElemContainerState(yyj1471)
				if r.TryDecodeAsNil() {
					yyv1471[yyj1471] = CustomMetricTarget{}
				} else {
					yyv1473 := &yyv1471[yyj1471]
					yyv1473.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1471 := 0
		for ; !r.CheckBreak(); yyj1471++ {

			if yyj1471 >= len(yyv1471) {
				yyv1471 = append(yyv1471, CustomMetricTarget{}) // var yyz1471 CustomMetricTarget
				yyc1471 = true
			}
			yyh1471.ElemContainerState(yyj1471)
			if yyj1471 < len(yyv1471) {
				if r.TryDecodeAsNil() {
					yyv1471[yyj1471] = CustomMetricTarget{}
				} else {
					yyv1474 := &yyv1471[yyj1471]
					yyv1474.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1471 < len(yyv1471) {
			yyv1471 = yyv1471[:yyj1471]
			yyc1471 = true
		} else if yyj1471 == 0 && yyv1471 == nil {
			yyv1471 = []CustomMetricTarget{}
			yyc1471 = true
		}
	}
	yyh1471.End()
	if yyc1471 {
		*v = yyv1471
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1475 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1476 := &yyv1475
		yy1476.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1477 := *v
	yyh1477, yyl1477 := z.DecSliceHelperStart()
	var yyc1477 bool
	if yyl1477 == 0 {
		if yyv1477 == nil {
			yyv1477 = []CustomMetricCurrentStatus{}
			yyc1477 = true
		} else if len(yyv1477) != 0 {
			yyv1477 = yyv1477[:0]
			yyc1477 = true
		}
	} else if yyl1477 > 0 {
		var yyrr1477, yyrl1477 int
		var yyrt1477 bool
		if yyl1477 > cap(yyv1477) {

			yyrg1477 := len(yyv1477) > 0
			yyv21477 := yyv1477
			yyrl1477, yyrt1477 = z.DecInferLen(yyl1477, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1477 {
				if yyrl1477 <= cap(yyv1477) {
					yyv1477 = yyv1477[:yyrl1477]
				} else {
					yyv1477 = make([]CustomMetricCurrentStatus, yyrl1477)
				}
			} else {
				yyv1477 = make([]CustomMetricCurrentStatus, yyrl1477)
			}
			yyc1477 = true
			yyrr1477 = len(yyv1477)
			if yyrg1477 {
				copy(yyv1477, yyv21477)
			}
		} else if yyl1477 != len(yyv1477) {
			yyv1477 = yyv1477[:yyl1477]
			yyc1477 = true
		}
		yyj1477 := 0
		for ; yyj1477 < yyrr1477; yyj1477++ {
			yyh1477.ElemContainerState(yyj1477)
			if r.TryDecodeAsNil() {
				yyv1477[yyj1477] = CustomMetricCurrentStatus{}
			} else {
				yyv1478 := &yyv1477[yyj1477]
				yyv1478.CodecDecodeSelf(d)
			}

		}
		if yyrt1477 {
			for ; yyj1477 < yyl1477; yyj1477++ {
				yyv1477 = append(yyv1477, CustomMetricCurrentStatus{})
				yyh1477.ElemContainerState(yyj1477)
				if r.TryDecodeAsNil() {
					yyv1477[yyj1477] = CustomMetricCurrentStatus{}
				} else {
					yyv1479 := &yyv1477[yyj1477]
					yyv1479.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1477 := 0
		for ; !r.CheckBreak(); yyj1477++ {

			if yyj1477 >= len(yyv1477) {
				yyv1477 = append(yyv1477, CustomMetricCurrentStatus{}) // var yyz1477 CustomMetricCurrentStatus
				yyc1477 = true
			}
			yyh1477.ElemContainerState(yyj1477)
			if yyj1477 < len(yyv1477) {
				if r.TryDecodeAsNil() {
					yyv1477[yyj1477] = CustomMetricCurrentStatus{}
				} else {
					yyv1480 := &yyv1477[yyj1477]
					yyv1480.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1477 < len(yyv1477) {
			yyv1477 = yyv1477[:yyj1477]
			yyc1477 = true
		} else if yyj1477 == 0 && yyv1477 == nil {
			yyv1477 = []CustomMetricCurrentStatus{}
			yyc1477 = true
		}
	}
	yyh1477.End()
	if yyc1477 {
		*v = yyv1477
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1481 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1482 := &yyv1481
		yy1482.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1483 := *v
	yyh1483, yyl1483 := z.DecSliceHelperStart()
	var yyc1483 bool
	if yyl1483 == 0 {
		if yyv1483 == nil {
			yyv1483 = []HorizontalPodAutoscaler{}
			yyc1483 = true
		} else if len(yyv1483) != 0 {
			yyv1483 = yyv1483[:0]
			yyc1483 = true
		}
	} else if yyl1483 > 0 {
		var yyrr1483, yyrl1483 int
		var yyrt1483 bool
		if yyl1483 > cap(yyv1483) {

			yyrg1483 := len(yyv1483) > 0
			yyv21483 := yyv1483
			yyrl1483, yyrt1483 = z.DecInferLen(yyl1483, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt1483 {
				if yyrl1483 <= cap(yyv1483) {
					yyv1483 = yyv1483[:yyrl1483]
				} else {
					yyv1483 = make([]HorizontalPodAutoscaler, yyrl1483)
				}
			} else {
				yyv1483 = make([]HorizontalPodAutoscaler, yyrl1483)
			}
			yyc1483 = true
			yyrr1483 = len(yyv1483)
			if yyrg1483 {
				copy(yyv1483, yyv21483)
			}
		} else if yyl1483 != len(yyv1483) {
			yyv1483 = yyv1483[:yyl1483]
			yyc1483 = true
		}
		yyj1483 := 0
		for ; yyj1483 < yyrr1483; yyj1483++ {
			yyh1483.ElemContainerState(yyj1483)
			if r.TryDecodeAsNil() {
				yyv1483[yyj1483] = HorizontalPodAutoscaler{}
			} else {
				yyv1484 := &yyv1483[yyj1483]
				yyv1484.CodecDecodeSelf(d)
			}

		}
		if yyrt1483 {
			for ; yyj1483 < yyl1483; yyj1483++ {
				yyv1483 = append(yyv1483, HorizontalPodAutoscaler{})
				yyh1483.ElemContainerState(yyj1483)
				if r.TryDecodeAsNil() {
					yyv1483[yyj1483] = HorizontalPodAutoscaler{}
				} else {
					yyv1485 := &yyv1483[yyj1483]
					yyv1485.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1483 := 0
		for ; !r.CheckBreak(); yyj1483++ {

			if yyj1483 >= len(yyv1483) {
				yyv1483 = append(yyv1483, HorizontalPodAutoscaler{}) // var yyz1483 HorizontalPodAutoscaler
				yyc1483 = true
			}
			yyh1483.ElemContainerState(yyj1483)
			if yyj1483 < len(yyv1483) {
				if r.TryDecodeAsNil() {
					yyv1483[yyj1483] = HorizontalPodAutoscaler{}
				} else {
					yyv1486 := &yyv1483[yyj1483]
					yyv1486.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1483 < len(yyv1483) {
			yyv1483 = yyv1483[:yyj1483]
			yyc1483 = true
		} else if yyj1483 == 0 && yyv1483 == nil {
			yyv1483 = []HorizontalPodAutoscaler{}
			yyc1483 = true
		}
	}
	yyh1483.End()
	if yyc1483 {
		*v = yyv1483
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1487 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1488 := &yyv1487
		yy1488.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1489 := *v
	yyh1489, yyl1489 := z.DecSliceHelperStart()
	var yyc1489 bool
	if yyl1489 == 0 {
		if yyv1489 == nil {
			yyv1489 = []APIVersion{}
			yyc1489 = true
		} else if len(yyv1489) != 0 {
			yyv1489 = yyv1489[:0]
			yyc1489 = true
		}
	} else if yyl1489 > 0 {
		var yyrr1489, yyrl1489 int
		var yyrt1489 bool
		if yyl1489 > cap(yyv1489) {

			yyrg1489 := len(yyv1489) > 0
			yyv21489 := yyv1489
			yyrl1489, yyrt1489 = z.DecInferLen(yyl1489, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1489 {
				if yyrl1489 <= cap(yyv1489) {
					yyv1489 = yyv1489[:yyrl1489]
				} else {
					yyv1489 = make([]APIVersion, yyrl1489)
				}
			} else {
				yyv1489 = make([]APIVersion, yyrl1489)
			}
			yyc1489 = true
			yyrr1489 = len(yyv1489)
			if yyrg1489 {
				copy(yyv1489, yyv21489)
			}
		} else if yyl1489 != len(yyv1489) {
			yyv1489 = yyv1489[:yyl1489]
			yyc1489 = true
		}
		yyj1489 := 0
		for ; yyj1489 < yyrr1489; yyj1489++ {
			yyh1489.ElemContainerState(yyj1489)
			if r.TryDecodeAsNil() {
				yyv1489[yyj1489] = APIVersion{}
			} else {
				yyv1490 := &yyv1489[yyj1489]
				yyv1490.CodecDecodeSelf(d)
			}

		}
		if yyrt1489 {
			for ; yyj1489 < yyl1489; yyj1489++ {
				yyv1489 = append(yyv1489, APIVersion{})
				yyh1489.ElemContainerState(yyj1489)
				if r.TryDecodeAsNil() {
					yyv1489[yyj1489] = APIVersion{}
				} else {
					yyv1491 := &yyv1489[yyj1489]
					yyv1491.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1489 := 0
		for ; !r.CheckBreak(); yyj1489++ {

			if yyj1489 >= len(yyv1489) {
				yyv1489 = append(yyv1489, APIVersion{}) // var yyz1489 APIVersion
				yyc1489 = true
			}
			yyh1489.ElemContainerState(yyj1489)
			if yyj1489 < len(yyv1489) {
				if r.TryDecodeAsNil() {
					yyv1489[yyj1489] = APIVersion{}
				} else {
					yyv1492 := &yyv1489[yyj1489]
					yyv1492.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1489 < len(yyv1489) {
			yyv1489 = yyv1489[:yyj1489]
			yyc1489 = true
		} else if yyj1489 == 0 && yyv1489 == nil {
			yyv1489 = []APIVersion{}
			yyc1489 = true
		}
	}
	yyh1489.End()
	if yyc1489 {
		*v = yyv1489
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1493 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1494 := &yyv1493
		yy1494.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1495 := *v
	yyh1495, yyl1495 := z.DecSliceHelperStart()
	var yyc1495 bool
	if yyl1495 == 0 {
		if yyv1495 == nil {
			yyv1495 = []ThirdPartyResource{}
			yyc1495 = true
		} else if len(yyv1495) != 0 {
			yyv1495 = yyv1495[:0]
			yyc1495 = true
		}
	} else if yyl1495 > 0 {
		var yyrr1495, yyrl1495 int
		var yyrt1495 bool
		if yyl1495 > cap(yyv1495) {

			yyrg1495 := len(yyv1495) > 0
			yyv21495 := yyv1495
			yyrl1495, yyrt1495 = z.DecInferLen(yyl1495, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1495 {
				if yyrl1495 <= cap(yyv1495) {
					yyv1495 = yyv1495[:yyrl1495]
				} else {
					yyv1495 = make([]ThirdPartyResource, yyrl1495)
				}
			} else {
				yyv1495 = make([]ThirdPartyResource, yyrl1495)
			}
			yyc1495 = true
			yyrr1495 = len(yyv1495)
			if yyrg1495 {
				copy(yyv1495, yyv21495)
			}
		} else if yyl1495 != len(yyv1495) {
			yyv1495 = yyv1495[:yyl1495]
			yyc1495 = true
		}
		yyj1495 := 0
		for ; yyj1495 < yyrr1495; yyj1495++ {
			yyh1495.ElemContainerState(yyj1495)
			if r.TryDecodeAsNil() {
				yyv1495[yyj1495] = ThirdPartyResource{}
			} else {
				yyv1496 := &yyv1495[yyj1495]
				yyv1496.CodecDecodeSelf(d)
			}

		}
		if yyrt1495 {
			for ; yyj1495 < yyl1495; yyj1495++ {
				yyv1495 = append(yyv1495, ThirdPartyResource{})
				yyh1495.ElemContainerState(yyj1495)
				if r.TryDecodeAsNil() {
					yyv1495[yyj1495] = ThirdPartyResource{}
				} else {
					yyv1497 := &yyv1495[yyj1495]
					yyv1497.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1495 := 0
		for ; !r.CheckBreak(); yyj1495++ {

			if yyj1495 >= len(yyv1495) {
				yyv1495 = append(yyv1495, ThirdPartyResource{}) // var yyz1495 ThirdPartyResource
				yyc1495 = true
			}
			yyh1495.ElemContainerState(yyj1495)
			if yyj1495 < len(yyv1495) {
				if r.TryDecodeAsNil() {
					yyv1495[yyj1495] = ThirdPartyResource{}
				} else {
					yyv1498 := &yyv1495[yyj1495]
					yyv1498.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1495 < len(yyv1495) {
			yyv1495 = yyv1495[:yyj1495]
			yyc1495 = true
		} else if yyj1495 == 0 && yyv1495 == nil {
			yyv1495 = []ThirdPartyResource{}
			yyc1495 = true
		}
	}
	yyh1495.End()
	if yyc1495 {
		*v = yyv1495
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1499 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1500 := &yyv1499
		yy1500.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1501 := *v
	yyh1501, yyl1501 := z.DecSliceHelperStart()
	var yyc1501 bool
	if yyl1501 == 0 {
		if yyv1501 == nil {
			yyv1501 = []Deployment{}
			yyc1501 = true
		} else if len(yyv1501) != 0 {
			yyv1501 = yyv1501[:0]
			yyc1501 = true
		}
	} else if yyl1501 > 0 {
		var yyrr1501, yyrl1501 int
		var yyrt1501 bool
		if yyl1501 > cap(yyv1501) {

			yyrg1501 := len(yyv1501) > 0
			yyv21501 := yyv1501
			yyrl1501, yyrt1501 = z.DecInferLen(yyl1501, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1501 {
				if yyrl1501 <= cap(yyv1501) {
					yyv1501 = yyv1501[:yyrl1501]
				} else {
					yyv1501 = make([]Deployment, yyrl1501)
				}
			} else {
				yyv1501 = make([]Deployment, yyrl1501)
			}
			yyc1501 = true
			yyrr1501 = len(yyv1501)
			if yyrg1501 {
				copy(yyv1501, yyv21501)
			}
		} else if yyl1501 != len(yyv1501) {
			yyv1501 = yyv1501[:yyl1501]
			yyc1501 = true
		}
		yyj1501 := 0
		for ; yyj1501 < yyrr1501; yyj1501++ {
			yyh1501.ElemContainerState(yyj1501)
			if r.TryDecodeAsNil() {
				yyv1501[yyj1501] = Deployment{}
			} else {
				yyv1502 := &yyv1501[yyj1501]
				yyv1502.CodecDecodeSelf(d)
			}

		}
		if yyrt1501 {
			for ; yyj1501 < yyl1501; yyj1501++ {
				yyv1501 = append(yyv1501, Deployment{})
				yyh1501.ElemContainerState(yyj1501)
				if r.TryDecodeAsNil() {
					yyv1501[yyj1501] = Deployment{}
				} else {
					yyv1503 := &yyv1501[yyj1501]
					yyv1503.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1501 := 0
		for ; !r.CheckBreak(); yyj1501++ {

			if yyj1501 >= len(yyv1501) {
				yyv1501 = append(yyv1501, Deployment{}) // var yyz1501 Deployment
				yyc1501 = true
			}
			yyh1501.ElemContainerState(yyj1501)
			if yyj1501 < len(yyv1501) {
				if r.TryDecodeAsNil() {
					yyv1501[yyj1501] = Deployment{}
				} else {
					yyv1504 := &yyv1501[yyj1501]
					yyv1504.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1501 < len(yyv1501) {
			yyv1501 = yyv1501[:yyj1501]
			yyc1501 = true
		} else if yyj1501 == 0 && yyv1501 == nil {
			yyv1501 = []Deployment{}
			yyc1501 = true
		}
	}
	yyh1501.End()
	if yyc1501 {
		*v = yyv1501
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1505 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1506 := &yyv1505
		yy1506.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1507 := *v
	yyh1507, yyl1507 := z.DecSliceHelperStart()
	var yyc1507 bool
	if yyl1507 == 0 {
		if yyv1507 == nil {
			yyv1507 = []DaemonSet{}
			yyc1507 = true
		} else if len(yyv1507) != 0 {
			yyv1507 = yyv1507[:0]
			yyc1507 = true
		}
	} else if yyl1507 > 0 {
		var yyrr1507, yyrl1507 int
		var yyrt1507 bool
		if yyl1507 > cap(yyv1507) {

			yyrg1507 := len(yyv1507) > 0
			yyv21507 := yyv1507
			yyrl1507, yyrt1507 = z.DecInferLen(yyl1507, z.DecBasicHandle().MaxInitLen, 592)
			if yyrt1507 {
				if yyrl1507 <= cap(yyv1507) {
					yyv1507 = yyv1507[:yyrl1507]
				} else {
					yyv1507 = make([]DaemonSet, yyrl1507)
				}
			} else {
				yyv1507 = make([]DaemonSet, yyrl1507)
			}
			yyc1507 = true
			yyrr1507 = len(yyv1507)
			if yyrg1507 {
				copy(yyv1507, yyv21507)
			}
		} else if yyl1507 != len(yyv1507) {
			yyv1507 = yyv1507[:yyl1507]
			yyc1507 = true
		}
		yyj1507 := 0
		for ; yyj1507 < yyrr1507; yyj1507++ {
			yyh1507.ElemContainerState(yyj1507)
			if r.TryDecodeAsNil() {
				yyv1507[yyj1507] = DaemonSet{}
			} else {
				yyv1508 := &yyv1507[yyj1507]
				yyv1508.CodecDecodeSelf(d)
			}

		}
		if yyrt1507 {
			for ; yyj1507 < yyl1507; yyj1507++ {
				yyv1507 = append(yyv1507, DaemonSet{})
				yyh1507.ElemContainerState(yyj1507)
				if r.TryDecodeAsNil() {
					yyv1507[yyj1507] = DaemonSet{}
				} else {
					yyv1509 := &yyv1507[yyj1507]
					yyv1509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1507 := 0
		for ; !r.CheckBreak(); yyj1507++ {

			if yyj1507 >= len(yyv1507) {
				yyv1507 = append(yyv1507, DaemonSet{}) // var yyz1507 DaemonSet
				yyc1507 = true
			}
			yyh1507.ElemContainerState(yyj1507)
			if yyj1507 < len(yyv1507) {
				if r.TryDecodeAsNil() {
					yyv1507[yyj1507] = DaemonSet{}
				} else {
					yyv1510 := &yyv1507[yyj1507]
					yyv1510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1507 < len(yyv1507) {
			yyv1507 = yyv1507[:yyj1507]
			yyc1507 = true
		} else if yyj1507 == 0 && yyv1507 == nil {
			yyv1507 = []DaemonSet{}
			yyc1507 = true
		}
	}
	yyh1507.End()
	if yyc1507 {
		*v = yyv1507
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1511 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1512 := &yyv1511
		yy1512.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1513 := *v
	yyh1513, yyl1513 := z.DecSliceHelperStart()
	var yyc1513 bool
	if yyl1513 == 0 {
		if yyv1513 == nil {
			yyv1513 = []ThirdPartyResourceData{}
			yyc1513 = true
		} else if len(yyv1513) != 0 {
			yyv1513 = yyv1513[:0]
			yyc1513 = true
		}
	} else if yyl1513 > 0 {
		var yyrr1513, yyrl1513 int
		var yyrt1513 bool
		if yyl1513 > cap(yyv1513) {

			yyrg1513 := len(yyv1513) > 0
			yyv21513 := yyv1513
			yyrl1513, yyrt1513 = z.DecInferLen(yyl1513, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1513 {
				if yyrl1513 <= cap(yyv1513) {
					yyv1513 = yyv1513[:yyrl1513]
				} else {
					yyv1513 = make([]ThirdPartyResourceData, yyrl1513)
				}
			} else {
				yyv1513 = make([]ThirdPartyResourceData, yyrl1513)
			}
			yyc1513 = true
			yyrr1513 = len(yyv1513)
			if yyrg1513 {
				copy(yyv1513, yyv21513)
			}
		} else if yyl1513 != len(yyv1513) {
			yyv1513 = yyv1513[:yyl1513]
			yyc1513 = true
		}
		yyj1513 := 0
		for ; yyj1513 < yyrr1513; yyj1513++ {
			yyh1513.ElemContainerState(yyj1513)
			if r.TryDecodeAsNil() {
				yyv1513[yyj1513] = ThirdPartyResourceData{}
			} else {
				yyv1514 := &yyv1513[yyj1513]
				yyv1514.CodecDecodeSelf(d)
			}

		}
		if yyrt1513 {
			for ; yyj1513 < yyl1513; yyj1513++ {
				yyv1513 = append(yyv1513, ThirdPartyResourceData{})
				yyh1513.ElemContainerState(yyj1513)
				if r.TryDecodeAsNil() {
					yyv1513[yyj1513] = ThirdPartyResourceData{}
				} else {
					yyv1515 := &yyv1513[yyj1513]
					yyv1515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1513 := 0
		for ; !r.CheckBreak(); yyj1513++ {

			if yyj1513 >= len(yyv1513) {
				yyv1513 = append(yyv1513, ThirdPartyResourceData{}) // var yyz1513 ThirdPartyResourceData
				yyc1513 = true
			}
			yyh1513.ElemContainerState(yyj1513)
			if yyj1513 < len(yyv1513) {
				if r.TryDecodeAsNil() {
					yyv1513[yyj1513] = ThirdPartyResourceData{}
				} else {
					yyv1516 := &yyv1513[yyj1513]
					yyv1516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1513 < len(yyv1513) {
			yyv1513 = yyv1513[:yyj1513]
			yyc1513 = true
		} else if yyj1513 == 0 && yyv1513 == nil {
			yyv1513 = []ThirdPartyResourceData{}
			yyc1513 = true
		}
	}
	yyh1513.End()
	if yyc1513 {
		*v = yyv1513
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1517 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1518 := &yyv1517
		yy1518.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1519 := *v
	yyh1519, yyl1519 := z.DecSliceHelperStart()
	var yyc1519 bool
	if yyl1519 == 0 {
		if yyv1519 == nil {
			yyv1519 = []Job{}
			yyc1519 = true
		} else if len(yyv1519) != 0 {
			yyv1519 = yyv1519[:0]
			yyc1519 = true
		}
	} else if yyl1519 > 0 {
		var yyrr1519, yyrl1519 int
		var yyrt1519 bool
		if yyl1519 > cap(yyv1519) {

			yyrg1519 := len(yyv1519) > 0
			yyv21519 := yyv1519
			yyrl1519, yyrt1519 = z.DecInferLen(yyl1519, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1519 {
				if yyrl1519 <= cap(yyv1519) {
					yyv1519 = yyv1519[:yyrl1519]
				} else {
					yyv1519 = make([]Job, yyrl1519)
				}
			} else {
				yyv1519 = make([]Job, yyrl1519)
			}
			yyc1519 = true
			yyrr1519 = len(yyv1519)
			if yyrg1519 {
				copy(yyv1519, yyv21519)
			}
		} else if yyl1519 != len(yyv1519) {
			yyv1519 = yyv1519[:yyl1519]
			yyc1519 = true
		}
		yyj1519 := 0
		for ; yyj1519 < yyrr1519; yyj1519++ {
			yyh1519.ElemContainerState(yyj1519)
			if r.TryDecodeAsNil() {
				yyv1519[yyj1519] = Job{}
			} else {
				yyv1520 := &yyv1519[yyj1519]
				yyv1520.CodecDecodeSelf(d)
			}

		}
		if yyrt1519 {
			for ; yyj1519 < yyl1519; yyj1519++ {
				yyv1519 = append(yyv1519, Job{})
				yyh1519.ElemContainerState(yyj1519)
				if r.TryDecodeAsNil() {
					yyv1519[yyj1519] = Job{}
				} else {
					yyv1521 := &yyv1519[yyj1519]
					yyv1521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1519 := 0
		for ; !r.CheckBreak(); yyj1519++ {

			if yyj1519 >= len(yyv1519) {
				yyv1519 = append(yyv1519, Job{}) // var yyz1519 Job
				yyc1519 = true
			}
			yyh1519.ElemContainerState(yyj1519)
			if yyj1519 < len(yyv1519) {
				if r.TryDecodeAsNil() {
					yyv1519[yyj1519] = Job{}
				} else {
					yyv1522 := &yyv1519[yyj1519]
					yyv1522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1519 < len(yyv1519) {
			yyv1519 = yyv1519[:yyj1519]
			yyc1519 = true
		} else if yyj1519 == 0 && yyv1519 == nil {
			yyv1519 = []Job{}
			yyc1519 = true
		}
	}
	yyh1519.End()
	if yyc1519 {
		*v = yyv1519
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1523 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1524 := &yyv1523
		yy1524.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1525 := *v
	yyh1525, yyl1525 := z.DecSliceHelperStart()
	var yyc1525 bool
	if yyl1525 == 0 {
		if yyv1525 == nil {
			yyv1525 = []JobCondition{}
			yyc1525 = true
		} else if len(yyv1525) != 0 {
			yyv1525 = yyv1525[:0]
			yyc1525 = true
		}
	} else if yyl1525 > 0 {
		var yyrr1525, yyrl1525 int
		var yyrt1525 bool
		if yyl1525 > cap(yyv1525) {

			yyrg1525 := len(yyv1525) > 0
			yyv21525 := yyv1525
			yyrl1525, yyrt1525 = z.DecInferLen(yyl1525, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1525 {
				if yyrl1525 <= cap(yyv1525) {
					yyv1525 = yyv1525[:yyrl1525]
				} else {
					yyv1525 = make([]JobCondition, yyrl1525)
				}
			} else {
				yyv1525 = make([]JobCondition, yyrl1525)
			}
			yyc1525 = true
			yyrr1525 = len(yyv1525)
			if yyrg1525 {
				copy(yyv1525, yyv21525)
			}
		} else if yyl1525 != len(yyv1525) {
			yyv1525 = yyv1525[:yyl1525]
			yyc1525 = true
		}
		yyj1525 := 0
		for ; yyj1525 < yyrr1525; yyj1525++ {
			yyh1525.ElemContainerState(yyj1525)
			if r.TryDecodeAsNil() {
				yyv1525[yyj1525] = JobCondition{}
			} else {
				yyv1526 := &yyv1525[yyj1525]
				yyv1526.CodecDecodeSelf(d)
			}

		}
		if yyrt1525 {
			for ; yyj1525 < yyl1525; yyj1525++ {
				yyv1525 = append(yyv1525, JobCondition{})
				yyh1525.ElemContainerState(yyj1525)
				if r.TryDecodeAsNil() {
					yyv1525[yyj1525] = JobCondition{}
				} else {
					yyv1527 := &yyv1525[yyj1525]
					yyv1527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1525 := 0
		for ; !r.CheckBreak(); yyj1525++ {

			if yyj1525 >= len(yyv1525) {
				yyv1525 = append(yyv1525, JobCondition{}) // var yyz1525 JobCondition
				yyc1525 = true
			}
			yyh1525.ElemContainerState(yyj1525)
			if yyj1525 < len(yyv1525) {
				if r.TryDecodeAsNil() {
					yyv1525[yyj1525] = JobCondition{}
				} else {
					yyv1528 := &yyv1525[yyj1525]
					yyv1528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1525 < len(yyv1525) {
			yyv1525 = yyv1525[:yyj1525]
			yyc1525 = true
		} else if yyj1525 == 0 && yyv1525 == nil {
			yyv1525 = []JobCondition{}
			yyc1525 = true
		}
	}
	yyh1525.End()
	if yyc1525 {
		*v = yyv1525
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1529 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1530 := &yyv1529
		yy1530.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1531 := *v
	yyh1531, yyl1531 := z.DecSliceHelperStart()
	var yyc1531 bool
	if yyl1531 == 0 {
		if yyv1531 == nil {
			yyv1531 = []Ingress{}
			yyc1531 = true
		} else if len(yyv1531) != 0 {
			yyv1531 = yyv1531[:0]
			yyc1531 = true
		}
	} else if yyl1531 > 0 {
		var yyrr1531, yyrl1531 int
		var yyrt1531 bool
		if yyl1531 > cap(yyv1531) {

			yyrg1531 := len(yyv1531) > 0
			yyv21531 := yyv1531
			yyrl1531, yyrt1531 = z.DecInferLen(yyl1531, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1531 {
				if yyrl1531 <= cap(yyv1531) {
					yyv1531 = yyv1531[:yyrl1531]
				} else {
					yyv1531 = make([]Ingress, yyrl1531)
				}
			} else {
				yyv1531 = make([]Ingress, yyrl1531)
			}
			yyc1531 = true
			yyrr1531 = len(yyv1531)
			if yyrg1531 {
				copy(yyv1531, yyv21531)
			}
		} else if yyl1531 != len(yyv1531) {
			yyv1531 = yyv1531[:yyl1531]
			yyc1531 = true
		}
		yyj1531 := 0
		for ; yyj1531 < yyrr1531; yyj1531++ {
			yyh1531.ElemContainerState(yyj1531)
			if r.TryDecodeAsNil() {
				yyv1531[yyj1531] = Ingress{}
			} else {
				yyv1532 := &yyv1531[yyj1531]
				yyv1532.CodecDecodeSelf(d)
			}

		}
		if yyrt1531 {
			for ; yyj1531 < yyl1531; yyj1531++ {
				yyv1531 = append(yyv1531, Ingress{})
				yyh1531.ElemContainerState(yyj1531)
				if r.TryDecodeAsNil() {
					yyv1531[yyj1531] = Ingress{}
				} else {
					yyv1533 := &yyv1531[yyj1531]
					yyv1533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1531 := 0
		for ; !r.CheckBreak(); yyj1531++ {

			if yyj1531 >= len(yyv1531) {
				yyv1531 = append(yyv1531, Ingress{}) // var yyz1531 Ingress
				yyc1531 = true
			}
			yyh1531.ElemContainerState(yyj1531)
			if yyj1531 < len(yyv1531) {
				if r.TryDecodeAsNil() {
					yyv1531[yyj1531] = Ingress{}
				} else {
					yyv1534 := &yyv1531[yyj1531]
					yyv1534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1531 < len(yyv1531) {
			yyv1531 = yyv1531[:yyj1531]
			yyc1531 = true
		} else if yyj1531 == 0 && yyv1531 == nil {
			yyv1531 = []Ingress{}
			yyc1531 = true
		}
	}
	yyh1531.End()
	if yyc1531 {
		*v = yyv1531
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1535 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1536 := &yyv1535
		yy1536.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1537 := *v
	yyh1537, yyl1537 := z.DecSliceHelperStart()
	var yyc1537 bool
	if yyl1537 == 0 {
		if yyv1537 == nil {
			yyv1537 = []IngressRule{}
			yyc1537 = true
		} else if len(yyv1537) != 0 {
			yyv1537 = yyv1537[:0]
			yyc1537 = true
		}
	} else if yyl1537 > 0 {
		var yyrr1537, yyrl1537 int
		var yyrt1537 bool
		if yyl1537 > cap(yyv1537) {

			yyrg1537 := len(yyv1537) > 0
			yyv21537 := yyv1537
			yyrl1537, yyrt1537 = z.DecInferLen(yyl1537, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1537 {
				if yyrl1537 <= cap(yyv1537) {
					yyv1537 = yyv1537[:yyrl1537]
				} else {
					yyv1537 = make([]IngressRule, yyrl1537)
				}
			} else {
				yyv1537 = make([]IngressRule, yyrl1537)
			}
			yyc1537 = true
			yyrr1537 = len(yyv1537)
			if yyrg1537 {
				copy(yyv1537, yyv21537)
			}
		} else if yyl1537 != len(yyv1537) {
			yyv1537 = yyv1537[:yyl1537]
			yyc1537 = true
		}
		yyj1537 := 0
		for ; yyj1537 < yyrr1537; yyj1537++ {
			yyh1537.ElemContainerState(yyj1537)
			if r.TryDecodeAsNil() {
				yyv1537[yyj1537] = IngressRule{}
			} else {
				yyv1538 := &yyv1537[yyj1537]
				yyv1538.CodecDecodeSelf(d)
			}

		}
		if yyrt1537 {
			for ; yyj1537 < yyl1537; yyj1537++ {
				yyv1537 = append(yyv1537, IngressRule{})
				yyh1537.ElemContainerState(yyj1537)
				if r.TryDecodeAsNil() {
					yyv1537[yyj1537] = IngressRule{}
				} else {
					yyv1539 := &yyv1537[yyj1537]
					yyv1539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1537 := 0
		for ; !r.CheckBreak(); yyj1537++ {

			if yyj1537 >= len(yyv1537) {
				yyv1537 = append(yyv1537, IngressRule{}) // var yyz1537 IngressRule
				yyc1537 = true
			}
			yyh1537.ElemContainerState(yyj1537)
			if yyj1537 < len(yyv1537) {
				if r.TryDecodeAsNil() {
					yyv1537[yyj1537] = IngressRule{}
				} else {
					yyv1540 := &yyv1537[yyj1537]
					yyv1540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1537 < len(yyv1537) {
			yyv1537 = yyv1537[:yyj1537]
			yyc1537 = true
		} else if yyj1537 == 0 && yyv1537 == nil {
			yyv1537 = []IngressRule{}
			yyc1537 = true
		}
	}
	yyh1537.End()
	if yyc1537 {
		*v = yyv1537
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1541 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1542 := &yyv1541
		yy1542.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1543 := *v
	yyh1543, yyl1543 := z.DecSliceHelperStart()
	var yyc1543 bool
	if yyl1543 == 0 {
		if yyv1543 == nil {
			yyv1543 = []HTTPIngressPath{}
			yyc1543 = true
		} else if len(yyv1543) != 0 {
			yyv1543 = yyv1543[:0]
			yyc1543 = true
		}
	} else if yyl1543 > 0 {
		var yyrr1543, yyrl1543 int
		var yyrt1543 bool
		if yyl1543 > cap(yyv1543) {

			yyrg1543 := len(yyv1543) > 0
			yyv21543 := yyv1543
			yyrl1543, yyrt1543 = z.DecInferLen(yyl1543, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1543 {
				if yyrl1543 <= cap(yyv1543) {
					yyv1543 = yyv1543[:yyrl1543]
				} else {
					yyv1543 = make([]HTTPIngressPath, yyrl1543)
				}
			} else {
				yyv1543 = make([]HTTPIngressPath, yyrl1543)
			}
			yyc1543 = true
			yyrr1543 = len(yyv1543)
			if yyrg1543 {
				copy(yyv1543, yyv21543)
			}
		} else if yyl1543 != len(yyv1543) {
			yyv1543 = yyv1543[:yyl1543]
			yyc1543 = true
		}
		yyj1543 := 0
		for ; yyj1543 < yyrr1543; yyj1543++ {
			yyh1543.ElemContainerState(yyj1543)
			if r.TryDecodeAsNil() {
				yyv1543[yyj1543] = HTTPIngressPath{}
			} else {
				yyv1544 := &yyv1543[yyj1543]
				yyv1544.CodecDecodeSelf(d)
			}

		}
		if yyrt1543 {
			for ; yyj1543 < yyl1543; yyj1543++ {
				yyv1543 = append(yyv1543, HTTPIngressPath{})
				yyh1543.ElemContainerState(yyj1543)
				if r.TryDecodeAsNil() {
					yyv1543[yyj1543] = HTTPIngressPath{}
				} else {
					yyv1545 := &yyv1543[yyj1543]
					yyv1545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1543 := 0
		for ; !r.CheckBreak(); yyj1543++ {

			if yyj1543 >= len(yyv1543) {
				yyv1543 = append(yyv1543, HTTPIngressPath{}) // var yyz1543 HTTPIngressPath
				yyc1543 = true
			}
			yyh1543.ElemContainerState(yyj1543)
			if yyj1543 < len(yyv1543) {
				if r.TryDecodeAsNil() {
					yyv1543[yyj1543] = HTTPIngressPath{}
				} else {
					yyv1546 := &yyv1543[yyj1543]
					yyv1546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1543 < len(yyv1543) {
			yyv1543 = yyv1543[:yyj1543]
			yyc1543 = true
		} else if yyj1543 == 0 && yyv1543 == nil {
			yyv1543 = []HTTPIngressPath{}
			yyc1543 = true
		}
	}
	yyh1543.End()
	if yyc1543 {
		*v = yyv1543
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1547 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1548 := &yyv1547
		yy1548.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1549 := *v
	yyh1549, yyl1549 := z.DecSliceHelperStart()
	var yyc1549 bool
	if yyl1549 == 0 {
		if yyv1549 == nil {
			yyv1549 = []NodeUtilization{}
			yyc1549 = true
		} else if len(yyv1549) != 0 {
			yyv1549 = yyv1549[:0]
			yyc1549 = true
		}
	} else if yyl1549 > 0 {
		var yyrr1549, yyrl1549 int
		var yyrt1549 bool
		if yyl1549 > cap(yyv1549) {

			yyrg1549 := len(yyv1549) > 0
			yyv21549 := yyv1549
			yyrl1549, yyrt1549 = z.DecInferLen(yyl1549, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1549 {
				if yyrl1549 <= cap(yyv1549) {
					yyv1549 = yyv1549[:yyrl1549]
				} else {
					yyv1549 = make([]NodeUtilization, yyrl1549)
				}
			} else {
				yyv1549 = make([]NodeUtilization, yyrl1549)
			}
			yyc1549 = true
			yyrr1549 = len(yyv1549)
			if yyrg1549 {
				copy(yyv1549, yyv21549)
			}
		} else if yyl1549 != len(yyv1549) {
			yyv1549 = yyv1549[:yyl1549]
			yyc1549 = true
		}
		yyj1549 := 0
		for ; yyj1549 < yyrr1549; yyj1549++ {
			yyh1549.ElemContainerState(yyj1549)
			if r.TryDecodeAsNil() {
				yyv1549[yyj1549] = NodeUtilization{}
			} else {
				yyv1550 := &yyv1549[yyj1549]
				yyv1550.CodecDecodeSelf(d)
			}

		}
		if yyrt1549 {
			for ; yyj1549 < yyl1549; yyj1549++ {
				yyv1549 = append(yyv1549, NodeUtilization{})
				yyh1549.ElemContainerState(yyj1549)
				if r.TryDecodeAsNil() {
					yyv1549[yyj1549] = NodeUtilization{}
				} else {
					yyv1551 := &yyv1549[yyj1549]
					yyv1551.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1549 := 0
		for ; !r.CheckBreak(); yyj1549++ {

			if yyj1549 >= len(yyv1549) {
				yyv1549 = append(yyv1549, NodeUtilization{}) // var yyz1549 NodeUtilization
				yyc1549 = true
			}
			yyh1549.ElemContainerState(yyj1549)
			if yyj1549 < len(yyv1549) {
				if r.TryDecodeAsNil() {
					yyv1549[yyj1549] = NodeUtilization{}
				} else {
					yyv1552 := &yyv1549[yyj1549]
					yyv1552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1549 < len(yyv1549) {
			yyv1549 = yyv1549[:yyj1549]
			yyc1549 = true
		} else if yyj1549 == 0 && yyv1549 == nil {
			yyv1549 = []NodeUtilization{}
			yyc1549 = true
		}
	}
	yyh1549.End()
	if yyc1549 {
		*v = yyv1549
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1553 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1554 := &yyv1553
		yy1554.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1555 := *v
	yyh1555, yyl1555 := z.DecSliceHelperStart()
	var yyc1555 bool
	if yyl1555 == 0 {
		if yyv1555 == nil {
			yyv1555 = []ClusterAutoscaler{}
			yyc1555 = true
		} else if len(yyv1555) != 0 {
			yyv1555 = yyv1555[:0]
			yyc1555 = true
		}
	} else if yyl1555 > 0 {
		var yyrr1555, yyrl1555 int
		var yyrt1555 bool
		if yyl1555 > cap(yyv1555) {

			yyrg1555 := len(yyv1555) > 0
			yyv21555 := yyv1555
			yyrl1555, yyrt1555 = z.DecInferLen(yyl1555, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1555 {
				if yyrl1555 <= cap(yyv1555) {
					yyv1555 = yyv1555[:yyrl1555]
				} else {
					yyv1555 = make([]ClusterAutoscaler, yyrl1555)
				}
			} else {
				yyv1555 = make([]ClusterAutoscaler, yyrl1555)
			}
			yyc1555 = true
			yyrr1555 = len(yyv1555)
			if yyrg1555 {
				copy(yyv1555, yyv21555)
			}
		} else if yyl1555 != len(yyv1555) {
			yyv1555 = yyv1555[:yyl1555]
			yyc1555 = true
		}
		yyj1555 := 0
		for ; yyj1555 < yyrr1555; yyj1555++ {
			yyh1555.ElemContainerState(yyj1555)
			if r.TryDecodeAsNil() {
				yyv1555[yyj1555] = ClusterAutoscaler{}
			} else {
				yyv1556 := &yyv1555[yyj1555]
				yyv1556.CodecDecodeSelf(d)
			}

		}
		if yyrt1555 {
			for ; yyj1555 < yyl1555; yyj1555++ {
				yyv1555 = append(yyv1555, ClusterAutoscaler{})
				yyh1555.ElemContainerState(yyj1555)
				if r.TryDecodeAsNil() {
					yyv1555[yyj1555] = ClusterAutoscaler{}
				} else {
					yyv1557 := &yyv1555[yyj1555]
					yyv1557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1555 := 0
		for ; !r.CheckBreak(); yyj1555++ {

			if yyj1555 >= len(yyv1555) {
				yyv1555 = append(yyv1555, ClusterAutoscaler{}) // var yyz1555 ClusterAutoscaler
				yyc1555 = true
			}
			yyh1555.ElemContainerState(yyj1555)
			if yyj1555 < len(yyv1555) {
				if r.TryDecodeAsNil() {
					yyv1555[yyj1555] = ClusterAutoscaler{}
				} else {
					yyv1558 := &yyv1555[yyj1555]
					yyv1558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1555 < len(yyv1555) {
			yyv1555 = yyv1555[:yyj1555]
			yyc1555 = true
		} else if yyj1555 == 0 && yyv1555 == nil {
			yyv1555 = []ClusterAutoscaler{}
			yyc1555 = true
		}
	}
	yyh1555.End()
	if yyc1555 {
		*v = yyv1555
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1559 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1560 := &yyv1559
		yy1560.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1561 := *v
	yyh1561, yyl1561 := z.DecSliceHelperStart()
	var yyc1561 bool
	if yyl1561 == 0 {
		if yyv1561 == nil {
			yyv1561 = []LabelSelectorRequirement{}
			yyc1561 = true
		} else if len(yyv1561) != 0 {
			yyv1561 = yyv1561[:0]
			yyc1561 = true
		}
	} else if yyl1561 > 0 {
		var yyrr1561, yyrl1561 int
		var yyrt1561 bool
		if yyl1561 > cap(yyv1561) {

			yyrg1561 := len(yyv1561) > 0
			yyv21561 := yyv1561
			yyrl1561, yyrt1561 = z.DecInferLen(yyl1561, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1561 {
				if yyrl1561 <= cap(yyv1561) {
					yyv1561 = yyv1561[:yyrl1561]
				} else {
					yyv1561 = make([]LabelSelectorRequirement, yyrl1561)
				}
			} else {
				yyv1561 = make([]LabelSelectorRequirement, yyrl1561)
			}
			yyc1561 = true
			yyrr1561 = len(yyv1561)
			if yyrg1561 {
				copy(yyv1561, yyv21561)
			}
		} else if yyl1561 != len(yyv1561) {
			yyv1561 = yyv1561[:yyl1561]
			yyc1561 = true
		}
		yyj1561 := 0
		for ; yyj1561 < yyrr1561; yyj1561++ {
			yyh1561.ElemContainerState(yyj1561)
			if r.TryDecodeAsNil() {
				yyv1561[yyj1561] = LabelSelectorRequirement{}
			} else {
				yyv1562 := &yyv1561[yyj1561]
				yyv1562.CodecDecodeSelf(d)
			}

		}
		if yyrt1561 {
			for ; yyj1561 < yyl1561; yyj1561++ {
				yyv1561 = append(yyv1561, LabelSelectorRequirement{})
				yyh1561.ElemContainerState(yyj1561)
				if r.TryDecodeAsNil() {
					yyv1561[yyj1561] = LabelSelectorRequirement{}
				} else {
					yyv1563 := &yyv1561[yyj1561]
					yyv1563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1561 := 0
		for ; !r.CheckBreak(); yyj1561++ {

			if yyj1561 >= len(yyv1561) {
				yyv1561 = append(yyv1561, LabelSelectorRequirement{}) // var yyz1561 LabelSelectorRequirement
				yyc1561 = true
			}
			yyh1561.ElemContainerState(yyj1561)
			if yyj1561 < len(yyv1561) {
				if r.TryDecodeAsNil() {
					yyv1561[yyj1561] = LabelSelectorRequirement{}
				} else {
					yyv1564 := &yyv1561[yyj1561]
					yyv1564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1561 < len(yyv1561) {
			yyv1561 = yyv1561[:yyj1561]
			yyc1561 = true
		} else if yyj1561 == 0 && yyv1561 == nil {
			yyv1561 = []LabelSelectorRequirement{}
			yyc1561 = true
		}
	}
	yyh1561.End()
	if yyc1561 {
		*v = yyv1561
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1565 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1566 := &yyv1565
		yy1566.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1567 := *v
	yyh1567, yyl1567 := z.DecSliceHelperStart()
	var yyc1567 bool
	if yyl1567 == 0 {
		if yyv1567 == nil {
			yyv1567 = []ReplicaSet{}
			yyc1567 = true
		} else if len(yyv1567) != 0 {
			yyv1567 = yyv1567[:0]
			yyc1567 = true
		}
	} else if yyl1567 > 0 {
		var yyrr1567, yyrl1567 int
		var yyrt1567 bool
		if yyl1567 > cap(yyv1567) {

			yyrg1567 := len(yyv1567) > 0
			yyv21567 := yyv1567
			yyrl1567, yyrt1567 = z.DecInferLen(yyl1567, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1567 {
				if yyrl1567 <= cap(yyv1567) {
					yyv1567 = yyv1567[:yyrl1567]
				} else {
					yyv1567 = make([]ReplicaSet, yyrl1567)
				}
			} else {
				yyv1567 = make([]ReplicaSet, yyrl1567)
			}
			yyc1567 = true
			yyrr1567 = len(yyv1567)
			if yyrg1567 {
				copy(yyv1567, yyv21567)
			}
		} else if yyl1567 != len(yyv1567) {
			yyv1567 = yyv1567[:yyl1567]
			yyc1567 = true
		}
		yyj1567 := 0
		for ; yyj1567 < yyrr1567; yyj1567++ {
			yyh1567.ElemContainerState(yyj1567)
			if r.TryDecodeAsNil() {
				yyv1567[yyj1567] = ReplicaSet{}
			} else {
				yyv1568 := &yyv1567[yyj1567]
				yyv1568.CodecDecodeSelf(d)
			}

		}
		if yyrt1567 {
			for ; yyj1567 < yyl1567; yyj1567++ {
				yyv1567 = append(yyv1567, ReplicaSet{})
				yyh1567.ElemContainerState(yyj1567)
				if r.TryDecodeAsNil() {
					yyv1567[yyj1567] = ReplicaSet{}
				} else {
					yyv1569 := &yyv1567[yyj1567]
					yyv1569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1567 := 0
		for ; !r.CheckBreak(); yyj1567++ {

			if yyj1567 >= len(yyv1567) {
				yyv1567 = append(yyv1567, ReplicaSet{}) // var yyz1567 ReplicaSet
				yyc1567 = true
			}
			yyh1567.ElemContainerState(yyj1567)
			if yyj1567 < len(yyv1567) {
				if r.TryDecodeAsNil() {
					yyv1567[yyj1567] = ReplicaSet{}
				} else {
					yyv1570 := &yyv1567[yyj1567]
					yyv1570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1567 < len(yyv1567) {
			yyv1567 = yyv1567[:yyj1567]
			yyc1567 = true
		} else if yyj1567 == 0 && yyv1567 == nil {
			yyv1567 = []ReplicaSet{}
			yyc1567 = true
		}
	}
	yyh1567.End()
	if yyc1567 {
		*v = yyv1567
	}
}
