/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			var yynn66 int
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				yynn66 = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
				yynn66 = 0
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct74 := r.ContainerType()
		if yyct74 == codecSelferValueTypeMap1234 {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if yyct74 == codecSelferValueTypeArray1234 {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [4]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Name != ""
			yyq82[2] = x.APIVersion != ""
			yyq82[3] = x.Subresource != ""
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(4)
			} else {
				yynn82 = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj102 int
	var yyb102 bool
	var yyhl102 bool = l >= 0
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj102++
		if yyhl102 {
			yyb102 = yyj102 > l
		} else {
			yyb102 = r.CheckBreak()
		}
		if yyb102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym107 := z.EncBinary()
		_ = yym107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep108 := !z.EncBinary()
			yy2arr108 := z.EncBasicHandle().StructToArray
			var yyq108 [1]bool
			_, _, _ = yysep108, yyq108, yy2arr108
			const yyr108 bool = false
			var yynn108 int
			if yyr108 || yy2arr108 {
				r.EncodeArrayStart(1)
			} else {
				yynn108 = 1
				for _, b := range yyq108 {
					if b {
						yynn108++
					}
				}
				r.EncodeMapStart(yynn108)
				yynn108 = 0
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym112 := z.DecBinary()
	_ = yym112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct113 := r.ContainerType()
		if yyct113 == codecSelferValueTypeMap1234 {
			yyl113 := r.ReadMapStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl113, d)
			}
		} else if yyct113 == codecSelferValueTypeArray1234 {
			yyl113 := r.ReadArrayStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys114Slc
	var yyhl114 bool = l >= 0
	for yyj114 := 0; ; yyj114++ {
		if yyhl114 {
			if yyj114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys114Slc = r.DecodeBytes(yys114Slc, true, true)
		yys114 := string(yys114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys114 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys114)
		} // end switch yys114
	} // end for yyj114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj116 int
	var yyb116 bool
	var yyhl116 bool = l >= 0
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj116++
		if yyhl116 {
			yyb116 = yyj116 > l
		} else {
			yyb116 = r.CheckBreak()
		}
		if yyb116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym118 := z.EncBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep119 := !z.EncBinary()
			yy2arr119 := z.EncBasicHandle().StructToArray
			var yyq119 [4]bool
			_, _, _ = yysep119, yyq119, yy2arr119
			const yyr119 bool = false
			yyq119[1] = x.MinReplicas != nil
			yyq119[3] = x.CPUUtilization != nil
			var yynn119 int
			if yyr119 || yy2arr119 {
				r.EncodeArrayStart(4)
			} else {
				yynn119 = 2
				for _, b := range yyq119 {
					if b {
						yynn119++
					}
				}
				r.EncodeMapStart(yynn119)
				yynn119 = 0
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy121 := &x.ScaleRef
				yy121.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy122 := &x.ScaleRef
				yy122.CodecEncodeSelf(e)
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy124 := *x.MinReplicas
						yym125 := z.EncBinary()
						_ = yym125
						if false {
						} else {
							r.EncodeInt(int64(yy124))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy126 := *x.MinReplicas
						yym127 := z.EncBinary()
						_ = yym127
						if false {
						} else {
							r.EncodeInt(int64(yy126))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym129 := z.EncBinary()
				_ = yym129
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym132 := z.DecBinary()
	_ = yym132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct133 := r.ContainerType()
		if yyct133 == codecSelferValueTypeMap1234 {
			yyl133 := r.ReadMapStart()
			if yyl133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl133, d)
			}
		} else if yyct133 == codecSelferValueTypeArray1234 {
			yyl133 := r.ReadArrayStart()
			if yyl133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys134Slc
	var yyhl134 bool = l >= 0
	for yyj134 := 0; ; yyj134++ {
		if yyhl134 {
			if yyj134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys134Slc = r.DecodeBytes(yys134Slc, true, true)
		yys134 := string(yys134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys134 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv135 := &x.ScaleRef
				yyv135.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym137 := z.DecBinary()
				_ = yym137
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys134)
		} // end switch yys134
	} // end for yyj134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv141 := &x.ScaleRef
		yyv141.CodecDecodeSelf(d)
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym143 := z.DecBinary()
		_ = yym143
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [5]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.ObservedGeneration != nil
			yyq147[1] = x.LastScaleTime != nil
			yyq147[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn147 int
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(5)
			} else {
				yynn147 = 2
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
				yynn147 = 0
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy149 := *x.ObservedGeneration
						yym150 := z.EncBinary()
						_ = yym150
						if false {
						} else {
							r.EncodeInt(int64(yy149))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy151 := *x.ObservedGeneration
						yym152 := z.EncBinary()
						_ = yym152
						if false {
						} else {
							r.EncodeInt(int64(yy151))
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym154 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym154 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym155 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym155 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym157 := z.EncBinary()
				_ = yym157
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy163 := *x.CurrentCPUUtilizationPercentage
						yym164 := z.EncBinary()
						_ = yym164
						if false {
						} else {
							r.EncodeInt(int64(yy163))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy165 := *x.CurrentCPUUtilizationPercentage
						yym166 := z.EncBinary()
						_ = yym166
						if false {
						} else {
							r.EncodeInt(int64(yy165))
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym167 := z.DecBinary()
	_ = yym167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct168 := r.ContainerType()
		if yyct168 == codecSelferValueTypeMap1234 {
			yyl168 := r.ReadMapStart()
			if yyl168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl168, d)
			}
		} else if yyct168 == codecSelferValueTypeArray1234 {
			yyl168 := r.ReadArrayStart()
			if yyl168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys169Slc
	var yyhl169 bool = l >= 0
	for yyj169 := 0; ; yyj169++ {
		if yyhl169 {
			if yyj169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys169Slc = r.DecodeBytes(yys169Slc, true, true)
		yys169 := string(yys169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys169 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym173 := z.DecBinary()
				_ = yym173
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym173 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym173 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym177 := z.DecBinary()
				_ = yym177
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys169)
		} // end switch yys169
	} // end for yyj169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj178 int
	var yyb178 bool
	var yyhl178 bool = l >= 0
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym182 := z.DecBinary()
		_ = yym182
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym182 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym182 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym186 := z.DecBinary()
		_ = yym186
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj178++
		if yyhl178 {
			yyb178 = yyj178 > l
		} else {
			yyb178 = r.CheckBreak()
		}
		if yyb178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym187 := z.EncBinary()
		_ = yym187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep188 := !z.EncBinary()
			yy2arr188 := z.EncBasicHandle().StructToArray
			var yyq188 [5]bool
			_, _, _ = yysep188, yyq188, yy2arr188
			const yyr188 bool = false
			yyq188[0] = x.Kind != ""
			yyq188[1] = x.APIVersion != ""
			yyq188[2] = true
			yyq188[3] = true
			yyq188[4] = true
			var yynn188 int
			if yyr188 || yy2arr188 {
				r.EncodeArrayStart(5)
			} else {
				yynn188 = 0
				for _, b := range yyq188 {
					if b {
						yynn188++
					}
				}
				r.EncodeMapStart(yynn188)
				yynn188 = 0
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[0] {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[1] {
					yym193 := z.EncBinary()
					_ = yym193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[2] {
					yy196 := &x.ObjectMeta
					yym197 := z.EncBinary()
					_ = yym197
					if false {
					} else if z.HasExtensions() && z.EncExt(yy196) {
					} else {
						z.EncFallback(yy196)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy198 := &x.ObjectMeta
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy198) {
					} else {
						z.EncFallback(yy198)
					}
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[3] {
					yy201 := &x.Spec
					yy201.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy202 := &x.Spec
					yy202.CodecEncodeSelf(e)
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq188[4] {
					yy204 := &x.Status
					yy204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy205 := &x.Status
					yy205.CodecEncodeSelf(e)
				}
			}
			if yyr188 || yy2arr188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym206 := z.DecBinary()
	_ = yym206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct207 := r.ContainerType()
		if yyct207 == codecSelferValueTypeMap1234 {
			yyl207 := r.ReadMapStart()
			if yyl207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl207, d)
			}
		} else if yyct207 == codecSelferValueTypeArray1234 {
			yyl207 := r.ReadArrayStart()
			if yyl207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys208Slc
	var yyhl208 bool = l >= 0
	for yyj208 := 0; ; yyj208++ {
		if yyhl208 {
			if yyj208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys208Slc = r.DecodeBytes(yys208Slc, true, true)
		yys208 := string(yys208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv211 := &x.ObjectMeta
				yym212 := z.DecBinary()
				_ = yym212
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv211) {
				} else {
					z.DecFallback(yyv211, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv213 := &x.Spec
				yyv213.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv214 := &x.Status
				yyv214.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys208)
		} // end switch yys208
	} // end for yyj208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj215 int
	var yyb215 bool
	var yyhl215 bool = l >= 0
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv218 := &x.ObjectMeta
		yym219 := z.DecBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv218) {
		} else {
			z.DecFallback(yyv218, false)
		}
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv220 := &x.Spec
		yyv220.CodecDecodeSelf(d)
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv221 := &x.Status
		yyv221.CodecDecodeSelf(d)
	}
	for {
		yyj215++
		if yyhl215 {
			yyb215 = yyj215 > l
		} else {
			yyb215 = r.CheckBreak()
		}
		if yyb215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym222 := z.EncBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep223 := !z.EncBinary()
			yy2arr223 := z.EncBasicHandle().StructToArray
			var yyq223 [4]bool
			_, _, _ = yysep223, yyq223, yy2arr223
			const yyr223 bool = false
			yyq223[0] = x.Kind != ""
			yyq223[1] = x.APIVersion != ""
			yyq223[2] = true
			var yynn223 int
			if yyr223 || yy2arr223 {
				r.EncodeArrayStart(4)
			} else {
				yynn223 = 1
				for _, b := range yyq223 {
					if b {
						yynn223++
					}
				}
				r.EncodeMapStart(yynn223)
				yynn223 = 0
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[0] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[1] {
					yym228 := z.EncBinary()
					_ = yym228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[2] {
					yy231 := &x.ListMeta
					yym232 := z.EncBinary()
					_ = yym232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy231) {
					} else {
						z.EncFallback(yy231)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy233 := &x.ListMeta
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy233) {
					} else {
						z.EncFallback(yy233)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym236 := z.EncBinary()
					_ = yym236
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv243 := &x.ListMeta
				yym244 := z.DecBinary()
				_ = yym244
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv243) {
				} else {
					z.DecFallback(yyv243, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv245 := &x.Items
				yym246 := z.DecBinary()
				_ = yym246
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj247 int
	var yyb247 bool
	var yyhl247 bool = l >= 0
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv250 := &x.ListMeta
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv250) {
		} else {
			z.DecFallback(yyv250, false)
		}
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv252 := &x.Items
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv252), d)
		}
	}
	for {
		yyj247++
		if yyhl247 {
			yyb247 = yyj247 > l
		} else {
			yyb247 = r.CheckBreak()
		}
		if yyb247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [5]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.Kind != ""
			yyq255[1] = x.APIVersion != ""
			yyq255[2] = true
			yyq255[3] = x.Description != ""
			yyq255[4] = len(x.Versions) != 0
			var yynn255 int
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(5)
			} else {
				yynn255 = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
				yynn255 = 0
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[0] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[1] {
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[2] {
					yy263 := &x.ObjectMeta
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy263) {
					} else {
						z.EncFallback(yy263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.ObjectMeta
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy265) {
					} else {
						z.EncFallback(yy265)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[3] {
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym271 := z.EncBinary()
						_ = yym271
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym272 := z.EncBinary()
						_ = yym272
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym273 := z.DecBinary()
	_ = yym273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct274 := r.ContainerType()
		if yyct274 == codecSelferValueTypeMap1234 {
			yyl274 := r.ReadMapStart()
			if yyl274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl274, d)
			}
		} else if yyct274 == codecSelferValueTypeArray1234 {
			yyl274 := r.ReadArrayStart()
			if yyl274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys275Slc
	var yyhl275 bool = l >= 0
	for yyj275 := 0; ; yyj275++ {
		if yyhl275 {
			if yyj275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys275Slc = r.DecodeBytes(yys275Slc, true, true)
		yys275 := string(yys275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv278 := &x.ObjectMeta
				yym279 := z.DecBinary()
				_ = yym279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv278) {
				} else {
					z.DecFallback(yyv278, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv281 := &x.Versions
				yym282 := z.DecBinary()
				_ = yym282
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv281), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys275)
		} // end switch yys275
	} // end for yyj275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yym287 := z.DecBinary()
		_ = yym287
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv286) {
		} else {
			z.DecFallback(yyv286, false)
		}
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv289 := &x.Versions
		yym290 := z.DecBinary()
		_ = yym290
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv289), d)
		}
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym291 := z.EncBinary()
		_ = yym291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep292 := !z.EncBinary()
			yy2arr292 := z.EncBasicHandle().StructToArray
			var yyq292 [4]bool
			_, _, _ = yysep292, yyq292, yy2arr292
			const yyr292 bool = false
			yyq292[0] = x.Kind != ""
			yyq292[1] = x.APIVersion != ""
			yyq292[2] = true
			var yynn292 int
			if yyr292 || yy2arr292 {
				r.EncodeArrayStart(4)
			} else {
				yynn292 = 1
				for _, b := range yyq292 {
					if b {
						yynn292++
					}
				}
				r.EncodeMapStart(yynn292)
				yynn292 = 0
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq292[0] {
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq292[1] {
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq292[2] {
					yy300 := &x.ListMeta
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy300) {
					} else {
						z.EncFallback(yy300)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy302 := &x.ListMeta
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy302) {
					} else {
						z.EncFallback(yy302)
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr292 || yy2arr292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym307 := z.DecBinary()
	_ = yym307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct308 := r.ContainerType()
		if yyct308 == codecSelferValueTypeMap1234 {
			yyl308 := r.ReadMapStart()
			if yyl308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl308, d)
			}
		} else if yyct308 == codecSelferValueTypeArray1234 {
			yyl308 := r.ReadArrayStart()
			if yyl308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys309Slc
	var yyhl309 bool = l >= 0
	for yyj309 := 0; ; yyj309++ {
		if yyhl309 {
			if yyj309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys309Slc = r.DecodeBytes(yys309Slc, true, true)
		yys309 := string(yys309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv312 := &x.ListMeta
				yym313 := z.DecBinary()
				_ = yym313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv312) {
				} else {
					z.DecFallback(yyv312, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv314 := &x.Items
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys309)
		} // end switch yys309
	} // end for yyj309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj316 int
	var yyb316 bool
	var yyhl316 bool = l >= 0
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv319 := &x.ListMeta
		yym320 := z.DecBinary()
		_ = yym320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv319) {
		} else {
			z.DecFallback(yyv319, false)
		}
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv321 := &x.Items
		yym322 := z.DecBinary()
		_ = yym322
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv321), d)
		}
	}
	for {
		yyj316++
		if yyhl316 {
			yyb316 = yyj316 > l
		} else {
			yyb316 = r.CheckBreak()
		}
		if yyb316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym323 := z.EncBinary()
		_ = yym323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep324 := !z.EncBinary()
			yy2arr324 := z.EncBasicHandle().StructToArray
			var yyq324 [2]bool
			_, _, _ = yysep324, yyq324, yy2arr324
			const yyr324 bool = false
			yyq324[0] = x.Name != ""
			yyq324[1] = x.APIGroup != ""
			var yynn324 int
			if yyr324 || yy2arr324 {
				r.EncodeArrayStart(2)
			} else {
				yynn324 = 0
				for _, b := range yyq324 {
					if b {
						yynn324++
					}
				}
				r.EncodeMapStart(yynn324)
				yynn324 = 0
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[0] {
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[1] {
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym331 := z.DecBinary()
	_ = yym331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct332 := r.ContainerType()
		if yyct332 == codecSelferValueTypeMap1234 {
			yyl332 := r.ReadMapStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl332, d)
			}
		} else if yyct332 == codecSelferValueTypeArray1234 {
			yyl332 := r.ReadArrayStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys333Slc
	var yyhl333 bool = l >= 0
	for yyj333 := 0; ; yyj333++ {
		if yyhl333 {
			if yyj333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys333Slc = r.DecodeBytes(yys333Slc, true, true)
		yys333 := string(yys333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys333 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys333)
		} // end switch yys333
	} // end for yyj333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj336 int
	var yyb336 bool
	var yyhl336 bool = l >= 0
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj336++
		if yyhl336 {
			yyb336 = yyj336 > l
		} else {
			yyb336 = r.CheckBreak()
		}
		if yyb336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym339 := z.EncBinary()
		_ = yym339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep340 := !z.EncBinary()
			yy2arr340 := z.EncBasicHandle().StructToArray
			var yyq340 [4]bool
			_, _, _ = yysep340, yyq340, yy2arr340
			const yyr340 bool = false
			yyq340[0] = x.Kind != ""
			yyq340[1] = x.APIVersion != ""
			yyq340[2] = true
			yyq340[3] = len(x.Data) != 0
			var yynn340 int
			if yyr340 || yy2arr340 {
				r.EncodeArrayStart(4)
			} else {
				yynn340 = 0
				for _, b := range yyq340 {
					if b {
						yynn340++
					}
				}
				r.EncodeMapStart(yynn340)
				yynn340 = 0
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[0] {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[1] {
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq340[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[2] {
					yy348 := &x.ObjectMeta
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy348) {
					} else {
						z.EncFallback(yy348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq340[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.ObjectMeta
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy350) {
					} else {
						z.EncFallback(yy350)
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq340[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym353 := z.EncBinary()
						_ = yym353
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq340[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym354 := z.EncBinary()
						_ = yym354
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr340 || yy2arr340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym355 := z.DecBinary()
	_ = yym355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct356 := r.ContainerType()
		if yyct356 == codecSelferValueTypeMap1234 {
			yyl356 := r.ReadMapStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl356, d)
			}
		} else if yyct356 == codecSelferValueTypeArray1234 {
			yyl356 := r.ReadArrayStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys357Slc
	var yyhl357 bool = l >= 0
	for yyj357 := 0; ; yyj357++ {
		if yyhl357 {
			if yyj357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys357Slc = r.DecodeBytes(yys357Slc, true, true)
		yys357 := string(yys357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv360 := &x.ObjectMeta
				yym361 := z.DecBinary()
				_ = yym361
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv360) {
				} else {
					z.DecFallback(yyv360, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv362 := &x.Data
				yym363 := z.DecBinary()
				_ = yym363
				if false {
				} else {
					*yyv362 = r.DecodeBytes(*(*[]byte)(yyv362), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys357)
		} // end switch yys357
	} // end for yyj357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv367 := &x.ObjectMeta
		yym368 := z.DecBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv367) {
		} else {
			z.DecFallback(yyv367, false)
		}
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv369 := &x.Data
		yym370 := z.DecBinary()
		_ = yym370
		if false {
		} else {
			*yyv369 = r.DecodeBytes(*(*[]byte)(yyv369), false, false)
		}
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym371 := z.EncBinary()
		_ = yym371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep372 := !z.EncBinary()
			yy2arr372 := z.EncBasicHandle().StructToArray
			var yyq372 [5]bool
			_, _, _ = yysep372, yyq372, yy2arr372
			const yyr372 bool = false
			yyq372[0] = x.Kind != ""
			yyq372[1] = x.APIVersion != ""
			yyq372[2] = true
			yyq372[3] = true
			yyq372[4] = true
			var yynn372 int
			if yyr372 || yy2arr372 {
				r.EncodeArrayStart(5)
			} else {
				yynn372 = 0
				for _, b := range yyq372 {
					if b {
						yynn372++
					}
				}
				r.EncodeMapStart(yynn372)
				yynn372 = 0
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[0] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq372[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[1] {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq372[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[2] {
					yy380 := &x.ObjectMeta
					yym381 := z.EncBinary()
					_ = yym381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy380) {
					} else {
						z.EncFallback(yy380)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy382 := &x.ObjectMeta
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy382) {
					} else {
						z.EncFallback(yy382)
					}
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[3] {
					yy385 := &x.Spec
					yy385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy386 := &x.Spec
					yy386.CodecEncodeSelf(e)
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq372[4] {
					yy388 := &x.Status
					yy388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy389 := &x.Status
					yy389.CodecEncodeSelf(e)
				}
			}
			if yyr372 || yy2arr372 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym390 := z.DecBinary()
	_ = yym390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct391 := r.ContainerType()
		if yyct391 == codecSelferValueTypeMap1234 {
			yyl391 := r.ReadMapStart()
			if yyl391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl391, d)
			}
		} else if yyct391 == codecSelferValueTypeArray1234 {
			yyl391 := r.ReadArrayStart()
			if yyl391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys392Slc
	var yyhl392 bool = l >= 0
	for yyj392 := 0; ; yyj392++ {
		if yyhl392 {
			if yyj392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys392Slc = r.DecodeBytes(yys392Slc, true, true)
		yys392 := string(yys392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv395 := &x.ObjectMeta
				yym396 := z.DecBinary()
				_ = yym396
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv395) {
				} else {
					z.DecFallback(yyv395, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv397 := &x.Spec
				yyv397.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv398 := &x.Status
				yyv398.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys392)
		} // end switch yys392
	} // end for yyj392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj399 int
	var yyb399 bool
	var yyhl399 bool = l >= 0
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv402 := &x.ObjectMeta
		yym403 := z.DecBinary()
		_ = yym403
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv402) {
		} else {
			z.DecFallback(yyv402, false)
		}
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv404 := &x.Spec
		yyv404.CodecDecodeSelf(d)
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv405 := &x.Status
		yyv405.CodecDecodeSelf(d)
	}
	for {
		yyj399++
		if yyhl399 {
			yyb399 = yyj399 > l
		} else {
			yyb399 = r.CheckBreak()
		}
		if yyb399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym406 := z.EncBinary()
		_ = yym406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep407 := !z.EncBinary()
			yy2arr407 := z.EncBasicHandle().StructToArray
			var yyq407 [6]bool
			_, _, _ = yysep407, yyq407, yy2arr407
			const yyr407 bool = false
			yyq407[0] = x.Replicas != nil
			yyq407[1] = len(x.Selector) != 0
			yyq407[3] = true
			yyq407[4] = x.UniqueLabelKey != nil
			yyq407[5] = x.Paused != false
			var yynn407 int
			if yyr407 || yy2arr407 {
				r.EncodeArrayStart(6)
			} else {
				yynn407 = 1
				for _, b := range yyq407 {
					if b {
						yynn407++
					}
				}
				r.EncodeMapStart(yynn407)
				yynn407 = 0
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy409 := *x.Replicas
						yym410 := z.EncBinary()
						_ = yym410
						if false {
						} else {
							r.EncodeInt(int64(yy409))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy411 := *x.Replicas
						yym412 := z.EncBinary()
						_ = yym412
						if false {
						} else {
							r.EncodeInt(int64(yy411))
						}
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym414 := z.EncBinary()
						_ = yym414
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym415 := z.EncBinary()
						_ = yym415
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy417 := &x.Template
				yym418 := z.EncBinary()
				_ = yym418
				if false {
				} else if z.HasExtensions() && z.EncExt(yy417) {
				} else {
					z.EncFallback(yy417)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy419 := &x.Template
				yym420 := z.EncBinary()
				_ = yym420
				if false {
				} else if z.HasExtensions() && z.EncExt(yy419) {
				} else {
					z.EncFallback(yy419)
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[3] {
					yy422 := &x.Strategy
					yy422.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.Strategy
					yy423.CodecEncodeSelf(e)
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[4] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy425 := *x.UniqueLabelKey
						yym426 := z.EncBinary()
						_ = yym426
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy425))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy427 := *x.UniqueLabelKey
						yym428 := z.EncBinary()
						_ = yym428
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy427))
						}
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[5] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq407[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym432 := z.DecBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct433 := r.ContainerType()
		if yyct433 == codecSelferValueTypeMap1234 {
			yyl433 := r.ReadMapStart()
			if yyl433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl433, d)
			}
		} else if yyct433 == codecSelferValueTypeArray1234 {
			yyl433 := r.ReadArrayStart()
			if yyl433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys434Slc
	var yyhl434 bool = l >= 0
	for yyj434 := 0; ; yyj434++ {
		if yyhl434 {
			if yyj434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys434Slc = r.DecodeBytes(yys434Slc, true, true)
		yys434 := string(yys434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys434 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym436 := z.DecBinary()
				_ = yym436
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv437 := &x.Selector
				yym438 := z.DecBinary()
				_ = yym438
				if false {
				} else {
					z.F.DecMapStringStringX(yyv437, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv439 := &x.Template
				yym440 := z.DecBinary()
				_ = yym440
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv439) {
				} else {
					z.DecFallback(yyv439, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv441 := &x.Strategy
				yyv441.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys434)
		} // end switch yys434
	} // end for yyj434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj445 int
	var yyb445 bool
	var yyhl445 bool = l >= 0
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym447 := z.DecBinary()
		_ = yym447
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv448 := &x.Selector
		yym449 := z.DecBinary()
		_ = yym449
		if false {
		} else {
			z.F.DecMapStringStringX(yyv448, false, d)
		}
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv450 := &x.Template
		yym451 := z.DecBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv450) {
		} else {
			z.DecFallback(yyv450, false)
		}
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv452 := &x.Strategy
		yyv452.CodecDecodeSelf(d)
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym454 := z.DecBinary()
		_ = yym454
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	for {
		yyj445++
		if yyhl445 {
			yyb445 = yyj445 > l
		} else {
			yyb445 = r.CheckBreak()
		}
		if yyb445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym456 := z.EncBinary()
		_ = yym456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep457 := !z.EncBinary()
			yy2arr457 := z.EncBasicHandle().StructToArray
			var yyq457 [2]bool
			_, _, _ = yysep457, yyq457, yy2arr457
			const yyr457 bool = false
			yyq457[0] = x.Type != ""
			yyq457[1] = x.RollingUpdate != nil
			var yynn457 int
			if yyr457 || yy2arr457 {
				r.EncodeArrayStart(2)
			} else {
				yynn457 = 0
				for _, b := range yyq457 {
					if b {
						yynn457++
					}
				}
				r.EncodeMapStart(yynn457)
				yynn457 = 0
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym460 := z.DecBinary()
	_ = yym460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct461 := r.ContainerType()
		if yyct461 == codecSelferValueTypeMap1234 {
			yyl461 := r.ReadMapStart()
			if yyl461 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl461, d)
			}
		} else if yyct461 == codecSelferValueTypeArray1234 {
			yyl461 := r.ReadArrayStart()
			if yyl461 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys462Slc
	var yyhl462 bool = l >= 0
	for yyj462 := 0; ; yyj462++ {
		if yyhl462 {
			if yyj462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys462Slc = r.DecodeBytes(yys462Slc, true, true)
		yys462 := string(yys462Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys462 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys462)
		} // end switch yys462
	} // end for yyj462
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj465 int
	var yyb465 bool
	var yyhl465 bool = l >= 0
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj465++
		if yyhl465 {
			yyb465 = yyj465 > l
		} else {
			yyb465 = r.CheckBreak()
		}
		if yyb465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym468 := z.EncBinary()
	_ = yym468
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym470 := z.EncBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep471 := !z.EncBinary()
			yy2arr471 := z.EncBasicHandle().StructToArray
			var yyq471 [3]bool
			_, _, _ = yysep471, yyq471, yy2arr471
			const yyr471 bool = false
			yyq471[0] = x.MaxUnavailable != nil
			yyq471[1] = x.MaxSurge != nil
			yyq471[2] = x.MinReadySeconds != 0
			var yynn471 int
			if yyr471 || yy2arr471 {
				r.EncodeArrayStart(3)
			} else {
				yynn471 = 0
				for _, b := range yyq471 {
					if b {
						yynn471++
					}
				}
				r.EncodeMapStart(yynn471)
				yynn471 = 0
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq471[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym473 := z.EncBinary()
						_ = yym473
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym473 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq471[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym474 := z.EncBinary()
						_ = yym474
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym474 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq471[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym476 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq471[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym477 := z.EncBinary()
						_ = yym477
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym477 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq471[2] {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq471[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_intstr.IntOrString)
				}
				yym485 := z.DecBinary()
				_ = yym485
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym485 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg6_intstr.IntOrString)
				}
				yym487 := z.DecBinary()
				_ = yym487
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym487 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj489 int
	var yyb489 bool
	var yyhl489 bool = l >= 0
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_intstr.IntOrString)
		}
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym491 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg6_intstr.IntOrString)
		}
		yym493 := z.DecBinary()
		_ = yym493
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym493 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj489++
		if yyhl489 {
			yyb489 = yyj489 > l
		} else {
			yyb489 = r.CheckBreak()
		}
		if yyb489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym495 := z.EncBinary()
		_ = yym495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep496 := !z.EncBinary()
			yy2arr496 := z.EncBasicHandle().StructToArray
			var yyq496 [4]bool
			_, _, _ = yysep496, yyq496, yy2arr496
			const yyr496 bool = false
			yyq496[0] = x.Replicas != 0
			yyq496[1] = x.UpdatedReplicas != 0
			yyq496[2] = x.AvailableReplicas != 0
			yyq496[3] = x.UnavailableReplicas != 0
			var yynn496 int
			if yyr496 || yy2arr496 {
				r.EncodeArrayStart(4)
			} else {
				yynn496 = 0
				for _, b := range yyq496 {
					if b {
						yynn496++
					}
				}
				r.EncodeMapStart(yynn496)
				yynn496 = 0
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[0] {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[1] {
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[2] {
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[3] {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym509 := z.DecBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct510 := r.ContainerType()
		if yyct510 == codecSelferValueTypeMap1234 {
			yyl510 := r.ReadMapStart()
			if yyl510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl510, d)
			}
		} else if yyct510 == codecSelferValueTypeArray1234 {
			yyl510 := r.ReadArrayStart()
			if yyl510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys511Slc
	var yyhl511 bool = l >= 0
	for yyj511 := 0; ; yyj511++ {
		if yyhl511 {
			if yyj511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys511Slc = r.DecodeBytes(yys511Slc, true, true)
		yys511 := string(yys511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys511 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys511)
		} // end switch yys511
	} // end for yyj511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj516 int
	var yyb516 bool
	var yyhl516 bool = l >= 0
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj516++
		if yyhl516 {
			yyb516 = yyj516 > l
		} else {
			yyb516 = r.CheckBreak()
		}
		if yyb516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym521 := z.EncBinary()
		_ = yym521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep522 := !z.EncBinary()
			yy2arr522 := z.EncBasicHandle().StructToArray
			var yyq522 [4]bool
			_, _, _ = yysep522, yyq522, yy2arr522
			const yyr522 bool = false
			yyq522[0] = x.Kind != ""
			yyq522[1] = x.APIVersion != ""
			yyq522[2] = true
			var yynn522 int
			if yyr522 || yy2arr522 {
				r.EncodeArrayStart(4)
			} else {
				yynn522 = 1
				for _, b := range yyq522 {
					if b {
						yynn522++
					}
				}
				r.EncodeMapStart(yynn522)
				yynn522 = 0
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[0] {
					yym524 := z.EncBinary()
					_ = yym524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq522[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym525 := z.EncBinary()
					_ = yym525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[1] {
					yym527 := z.EncBinary()
					_ = yym527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[2] {
					yy530 := &x.ListMeta
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else if z.HasExtensions() && z.EncExt(yy530) {
					} else {
						z.EncFallback(yy530)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy532 := &x.ListMeta
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else if z.HasExtensions() && z.EncExt(yy532) {
					} else {
						z.EncFallback(yy532)
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv542 := &x.ListMeta
				yym543 := z.DecBinary()
				_ = yym543
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv542) {
				} else {
					z.DecFallback(yyv542, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv544 := &x.Items
				yym545 := z.DecBinary()
				_ = yym545
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv544), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj546 int
	var yyb546 bool
	var yyhl546 bool = l >= 0
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv549 := &x.ListMeta
		yym550 := z.DecBinary()
		_ = yym550
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv549) {
		} else {
			z.DecFallback(yyv549, false)
		}
	}
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv551 := &x.Items
		yym552 := z.DecBinary()
		_ = yym552
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv551), d)
		}
	}
	for {
		yyj546++
		if yyhl546 {
			yyb546 = yyj546 > l
		} else {
			yyb546 = r.CheckBreak()
		}
		if yyb546 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj546-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym553 := z.EncBinary()
		_ = yym553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep554 := !z.EncBinary()
			yy2arr554 := z.EncBasicHandle().StructToArray
			var yyq554 [2]bool
			_, _, _ = yysep554, yyq554, yy2arr554
			const yyr554 bool = false
			yyq554[0] = x.Type != ""
			yyq554[1] = x.RollingUpdate != nil
			var yynn554 int
			if yyr554 || yy2arr554 {
				r.EncodeArrayStart(2)
			} else {
				yynn554 = 0
				for _, b := range yyq554 {
					if b {
						yynn554++
					}
				}
				r.EncodeMapStart(yynn554)
				yynn554 = 0
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq554[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq554[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq554[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq554[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym557 := z.DecBinary()
	_ = yym557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct558 := r.ContainerType()
		if yyct558 == codecSelferValueTypeMap1234 {
			yyl558 := r.ReadMapStart()
			if yyl558 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl558, d)
			}
		} else if yyct558 == codecSelferValueTypeArray1234 {
			yyl558 := r.ReadArrayStart()
			if yyl558 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl558, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys559Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys559Slc
	var yyhl559 bool = l >= 0
	for yyj559 := 0; ; yyj559++ {
		if yyhl559 {
			if yyj559 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys559Slc = r.DecodeBytes(yys559Slc, true, true)
		yys559 := string(yys559Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys559 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys559)
		} // end switch yys559
	} // end for yyj559
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj562 int
	var yyb562 bool
	var yyhl562 bool = l >= 0
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj562++
		if yyhl562 {
			yyb562 = yyj562 > l
		} else {
			yyb562 = r.CheckBreak()
		}
		if yyb562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym565 := z.EncBinary()
	_ = yym565
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym567 := z.EncBinary()
		_ = yym567
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep568 := !z.EncBinary()
			yy2arr568 := z.EncBasicHandle().StructToArray
			var yyq568 [2]bool
			_, _, _ = yysep568, yyq568, yy2arr568
			const yyr568 bool = false
			yyq568[0] = x.MaxUnavailable != nil
			yyq568[1] = x.MinReadySeconds != 0
			var yynn568 int
			if yyr568 || yy2arr568 {
				r.EncodeArrayStart(2)
			} else {
				yynn568 = 0
				for _, b := range yyq568 {
					if b {
						yynn568++
					}
				}
				r.EncodeMapStart(yynn568)
				yynn568 = 0
			}
			if yyr568 || yy2arr568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq568[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym570 := z.EncBinary()
						_ = yym570
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym570 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq568[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym571 := z.EncBinary()
						_ = yym571
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym571 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr568 || yy2arr568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq568[1] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq568[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr568 || yy2arr568 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym575 := z.DecBinary()
	_ = yym575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct576 := r.ContainerType()
		if yyct576 == codecSelferValueTypeMap1234 {
			yyl576 := r.ReadMapStart()
			if yyl576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl576, d)
			}
		} else if yyct576 == codecSelferValueTypeArray1234 {
			yyl576 := r.ReadArrayStart()
			if yyl576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys577Slc
	var yyhl577 bool = l >= 0
	for yyj577 := 0; ; yyj577++ {
		if yyhl577 {
			if yyj577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys577Slc = r.DecodeBytes(yys577Slc, true, true)
		yys577 := string(yys577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys577 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_intstr.IntOrString)
				}
				yym579 := z.DecBinary()
				_ = yym579
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym579 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys577)
		} // end switch yys577
	} // end for yyj577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj581 int
	var yyb581 bool
	var yyhl581 bool = l >= 0
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_intstr.IntOrString)
		}
		yym583 := z.DecBinary()
		_ = yym583
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym583 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj581++
		if yyhl581 {
			yyb581 = yyj581 > l
		} else {
			yyb581 = r.CheckBreak()
		}
		if yyb581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [4]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[0] = x.Selector != nil
			yyq586[1] = x.Template != nil
			yyq586[2] = true
			yyq586[3] = x.UniqueLabelKey != nil
			var yynn586 int
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(4)
			} else {
				yynn586 = 0
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
				yynn586 = 0
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym589 := z.EncBinary()
						_ = yym589
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym590 := z.EncBinary()
						_ = yym590
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[2] {
					yy592 := &x.UpdateStrategy
					yy592.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq586[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy593 := &x.UpdateStrategy
					yy593.CodecEncodeSelf(e)
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[3] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy595 := *x.UniqueLabelKey
						yym596 := z.EncBinary()
						_ = yym596
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy595))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq586[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy597 := *x.UniqueLabelKey
						yym598 := z.EncBinary()
						_ = yym598
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy597))
						}
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct600 := r.ContainerType()
		if yyct600 == codecSelferValueTypeMap1234 {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if yyct600 == codecSelferValueTypeArray1234 {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys601 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				yym604 := z.DecBinary()
				_ = yym604
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv605 := &x.UpdateStrategy
				yyv605.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj608 int
	var yyb608 bool
	var yyhl608 bool = l >= 0
	yyj608++
	if yyhl608 {
		yyb608 = yyj608 > l
	} else {
		yyb608 = r.CheckBreak()
	}
	if yyb608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj608++
	if yyhl608 {
		yyb608 = yyj608 > l
	} else {
		yyb608 = r.CheckBreak()
	}
	if yyb608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		yym611 := z.DecBinary()
		_ = yym611
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	yyj608++
	if yyhl608 {
		yyb608 = yyj608 > l
	} else {
		yyb608 = r.CheckBreak()
	}
	if yyb608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv612 := &x.UpdateStrategy
		yyv612.CodecDecodeSelf(d)
	}
	yyj608++
	if yyhl608 {
		yyb608 = yyj608 > l
	} else {
		yyb608 = r.CheckBreak()
	}
	if yyb608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	for {
		yyj608++
		if yyhl608 {
			yyb608 = yyj608 > l
		} else {
			yyb608 = r.CheckBreak()
		}
		if yyb608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [3]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(3)
			} else {
				yynn616 = 3
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym621 := z.EncBinary()
				_ = yym621
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym622 := z.EncBinary()
				_ = yym622
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym624 := z.EncBinary()
				_ = yym624
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym625 := z.EncBinary()
				_ = yym625
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct627 := r.ContainerType()
		if yyct627 == codecSelferValueTypeMap1234 {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if yyct627 == codecSelferValueTypeArray1234 {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys628 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj632 int
	var yyb632 bool
	var yyhl632 bool = l >= 0
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	for {
		yyj632++
		if yyhl632 {
			yyb632 = yyj632 > l
		} else {
			yyb632 = r.CheckBreak()
		}
		if yyb632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym636 := z.EncBinary()
		_ = yym636
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep637 := !z.EncBinary()
			yy2arr637 := z.EncBasicHandle().StructToArray
			var yyq637 [5]bool
			_, _, _ = yysep637, yyq637, yy2arr637
			const yyr637 bool = false
			yyq637[0] = x.Kind != ""
			yyq637[1] = x.APIVersion != ""
			yyq637[2] = true
			yyq637[3] = true
			yyq637[4] = true
			var yynn637 int
			if yyr637 || yy2arr637 {
				r.EncodeArrayStart(5)
			} else {
				yynn637 = 0
				for _, b := range yyq637 {
					if b {
						yynn637++
					}
				}
				r.EncodeMapStart(yynn637)
				yynn637 = 0
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[0] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq637[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[1] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq637[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[2] {
					yy645 := &x.ObjectMeta
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else if z.HasExtensions() && z.EncExt(yy645) {
					} else {
						z.EncFallback(yy645)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq637[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy647 := &x.ObjectMeta
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else if z.HasExtensions() && z.EncExt(yy647) {
					} else {
						z.EncFallback(yy647)
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[3] {
					yy650 := &x.Spec
					yy650.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq637[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy651 := &x.Spec
					yy651.CodecEncodeSelf(e)
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[4] {
					yy653 := &x.Status
					yy653.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq637[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy654 := &x.Status
					yy654.CodecEncodeSelf(e)
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym655 := z.DecBinary()
	_ = yym655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct656 := r.ContainerType()
		if yyct656 == codecSelferValueTypeMap1234 {
			yyl656 := r.ReadMapStart()
			if yyl656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl656, d)
			}
		} else if yyct656 == codecSelferValueTypeArray1234 {
			yyl656 := r.ReadArrayStart()
			if yyl656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys657Slc
	var yyhl657 bool = l >= 0
	for yyj657 := 0; ; yyj657++ {
		if yyhl657 {
			if yyj657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys657Slc = r.DecodeBytes(yys657Slc, true, true)
		yys657 := string(yys657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys657 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv660 := &x.ObjectMeta
				yym661 := z.DecBinary()
				_ = yym661
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv660) {
				} else {
					z.DecFallback(yyv660, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv662 := &x.Spec
				yyv662.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv663 := &x.Status
				yyv663.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys657)
		} // end switch yys657
	} // end for yyj657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj664 int
	var yyb664 bool
	var yyhl664 bool = l >= 0
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv667 := &x.ObjectMeta
		yym668 := z.DecBinary()
		_ = yym668
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv667) {
		} else {
			z.DecFallback(yyv667, false)
		}
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv669 := &x.Spec
		yyv669.CodecDecodeSelf(d)
	}
	yyj664++
	if yyhl664 {
		yyb664 = yyj664 > l
	} else {
		yyb664 = r.CheckBreak()
	}
	if yyb664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv670 := &x.Status
		yyv670.CodecDecodeSelf(d)
	}
	for {
		yyj664++
		if yyhl664 {
			yyb664 = yyj664 > l
		} else {
			yyb664 = r.CheckBreak()
		}
		if yyb664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym671 := z.EncBinary()
		_ = yym671
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep672 := !z.EncBinary()
			yy2arr672 := z.EncBasicHandle().StructToArray
			var yyq672 [4]bool
			_, _, _ = yysep672, yyq672, yy2arr672
			const yyr672 bool = false
			yyq672[0] = x.Kind != ""
			yyq672[1] = x.APIVersion != ""
			yyq672[2] = true
			var yynn672 int
			if yyr672 || yy2arr672 {
				r.EncodeArrayStart(4)
			} else {
				yynn672 = 1
				for _, b := range yyq672 {
					if b {
						yynn672++
					}
				}
				r.EncodeMapStart(yynn672)
				yynn672 = 0
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq672[0] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq672[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq672[1] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq672[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq672[2] {
					yy680 := &x.ListMeta
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else if z.HasExtensions() && z.EncExt(yy680) {
					} else {
						z.EncFallback(yy680)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq672[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy682 := &x.ListMeta
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else if z.HasExtensions() && z.EncExt(yy682) {
					} else {
						z.EncFallback(yy682)
					}
				}
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr672 || yy2arr672 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym687 := z.DecBinary()
	_ = yym687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct688 := r.ContainerType()
		if yyct688 == codecSelferValueTypeMap1234 {
			yyl688 := r.ReadMapStart()
			if yyl688 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl688, d)
			}
		} else if yyct688 == codecSelferValueTypeArray1234 {
			yyl688 := r.ReadArrayStart()
			if yyl688 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl688, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys689Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys689Slc
	var yyhl689 bool = l >= 0
	for yyj689 := 0; ; yyj689++ {
		if yyhl689 {
			if yyj689 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys689Slc = r.DecodeBytes(yys689Slc, true, true)
		yys689 := string(yys689Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys689 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv692 := &x.ListMeta
				yym693 := z.DecBinary()
				_ = yym693
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv692) {
				} else {
					z.DecFallback(yyv692, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv694 := &x.Items
				yym695 := z.DecBinary()
				_ = yym695
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv694), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys689)
		} // end switch yys689
	} // end for yyj689
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj696 int
	var yyb696 bool
	var yyhl696 bool = l >= 0
	yyj696++
	if yyhl696 {
		yyb696 = yyj696 > l
	} else {
		yyb696 = r.CheckBreak()
	}
	if yyb696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj696++
	if yyhl696 {
		yyb696 = yyj696 > l
	} else {
		yyb696 = r.CheckBreak()
	}
	if yyb696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj696++
	if yyhl696 {
		yyb696 = yyj696 > l
	} else {
		yyb696 = r.CheckBreak()
	}
	if yyb696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv699 := &x.ListMeta
		yym700 := z.DecBinary()
		_ = yym700
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv699) {
		} else {
			z.DecFallback(yyv699, false)
		}
	}
	yyj696++
	if yyhl696 {
		yyb696 = yyj696 > l
	} else {
		yyb696 = r.CheckBreak()
	}
	if yyb696 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv701 := &x.Items
		yym702 := z.DecBinary()
		_ = yym702
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv701), d)
		}
	}
	for {
		yyj696++
		if yyhl696 {
			yyb696 = yyj696 > l
		} else {
			yyb696 = r.CheckBreak()
		}
		if yyb696 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj696-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym703 := z.EncBinary()
		_ = yym703
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep704 := !z.EncBinary()
			yy2arr704 := z.EncBasicHandle().StructToArray
			var yyq704 [4]bool
			_, _, _ = yysep704, yyq704, yy2arr704
			const yyr704 bool = false
			yyq704[0] = x.Kind != ""
			yyq704[1] = x.APIVersion != ""
			yyq704[2] = true
			var yynn704 int
			if yyr704 || yy2arr704 {
				r.EncodeArrayStart(4)
			} else {
				yynn704 = 1
				for _, b := range yyq704 {
					if b {
						yynn704++
					}
				}
				r.EncodeMapStart(yynn704)
				yynn704 = 0
			}
			if yyr704 || yy2arr704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq704[0] {
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq704[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr704 || yy2arr704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq704[1] {
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq704[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr704 || yy2arr704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq704[2] {
					yy712 := &x.ListMeta
					yym713 := z.EncBinary()
					_ = yym713
					if false {
					} else if z.HasExtensions() && z.EncExt(yy712) {
					} else {
						z.EncFallback(yy712)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq704[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy714 := &x.ListMeta
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else if z.HasExtensions() && z.EncExt(yy714) {
					} else {
						z.EncFallback(yy714)
					}
				}
			}
			if yyr704 || yy2arr704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr704 || yy2arr704 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym719 := z.DecBinary()
	_ = yym719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct720 := r.ContainerType()
		if yyct720 == codecSelferValueTypeMap1234 {
			yyl720 := r.ReadMapStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl720, d)
			}
		} else if yyct720 == codecSelferValueTypeArray1234 {
			yyl720 := r.ReadArrayStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys721Slc
	var yyhl721 bool = l >= 0
	for yyj721 := 0; ; yyj721++ {
		if yyhl721 {
			if yyj721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys721Slc = r.DecodeBytes(yys721Slc, true, true)
		yys721 := string(yys721Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys721 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv724 := &x.ListMeta
				yym725 := z.DecBinary()
				_ = yym725
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv724) {
				} else {
					z.DecFallback(yyv724, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv726 := &x.Items
				yym727 := z.DecBinary()
				_ = yym727
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv726), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys721)
		} // end switch yys721
	} // end for yyj721
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj728 int
	var yyb728 bool
	var yyhl728 bool = l >= 0
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv731 := &x.ListMeta
		yym732 := z.DecBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv731) {
		} else {
			z.DecFallback(yyv731, false)
		}
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv733 := &x.Items
		yym734 := z.DecBinary()
		_ = yym734
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv733), d)
		}
	}
	for {
		yyj728++
		if yyhl728 {
			yyb728 = yyj728 > l
		} else {
			yyb728 = r.CheckBreak()
		}
		if yyb728 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj728-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [5]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[0] = x.Kind != ""
			yyq736[1] = x.APIVersion != ""
			yyq736[2] = true
			yyq736[3] = true
			yyq736[4] = true
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(5)
			} else {
				yynn736 = 0
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[0] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[2] {
					yy744 := &x.ObjectMeta
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else if z.HasExtensions() && z.EncExt(yy744) {
					} else {
						z.EncFallback(yy744)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy746 := &x.ObjectMeta
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else if z.HasExtensions() && z.EncExt(yy746) {
					} else {
						z.EncFallback(yy746)
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[3] {
					yy749 := &x.Spec
					yy749.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq736[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy750 := &x.Spec
					yy750.CodecEncodeSelf(e)
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[4] {
					yy752 := &x.Status
					yy752.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq736[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy753 := &x.Status
					yy753.CodecEncodeSelf(e)
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym754 := z.DecBinary()
	_ = yym754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct755 := r.ContainerType()
		if yyct755 == codecSelferValueTypeMap1234 {
			yyl755 := r.ReadMapStart()
			if yyl755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl755, d)
			}
		} else if yyct755 == codecSelferValueTypeArray1234 {
			yyl755 := r.ReadArrayStart()
			if yyl755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys756Slc
	var yyhl756 bool = l >= 0
	for yyj756 := 0; ; yyj756++ {
		if yyhl756 {
			if yyj756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys756Slc = r.DecodeBytes(yys756Slc, true, true)
		yys756 := string(yys756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys756 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv759 := &x.ObjectMeta
				yym760 := z.DecBinary()
				_ = yym760
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv759) {
				} else {
					z.DecFallback(yyv759, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv761 := &x.Spec
				yyv761.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv762 := &x.Status
				yyv762.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys756)
		} // end switch yys756
	} // end for yyj756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj763 int
	var yyb763 bool
	var yyhl763 bool = l >= 0
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv766 := &x.ObjectMeta
		yym767 := z.DecBinary()
		_ = yym767
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv766) {
		} else {
			z.DecFallback(yyv766, false)
		}
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv768 := &x.Spec
		yyv768.CodecDecodeSelf(d)
	}
	yyj763++
	if yyhl763 {
		yyb763 = yyj763 > l
	} else {
		yyb763 = r.CheckBreak()
	}
	if yyb763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv769 := &x.Status
		yyv769.CodecDecodeSelf(d)
	}
	for {
		yyj763++
		if yyhl763 {
			yyb763 = yyj763 > l
		} else {
			yyb763 = r.CheckBreak()
		}
		if yyb763 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj763-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym770 := z.EncBinary()
		_ = yym770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep771 := !z.EncBinary()
			yy2arr771 := z.EncBasicHandle().StructToArray
			var yyq771 [4]bool
			_, _, _ = yysep771, yyq771, yy2arr771
			const yyr771 bool = false
			yyq771[0] = x.Kind != ""
			yyq771[1] = x.APIVersion != ""
			yyq771[2] = true
			var yynn771 int
			if yyr771 || yy2arr771 {
				r.EncodeArrayStart(4)
			} else {
				yynn771 = 1
				for _, b := range yyq771 {
					if b {
						yynn771++
					}
				}
				r.EncodeMapStart(yynn771)
				yynn771 = 0
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq771[0] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq771[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq771[1] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq771[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq771[2] {
					yy779 := &x.ListMeta
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else if z.HasExtensions() && z.EncExt(yy779) {
					} else {
						z.EncFallback(yy779)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq771[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy781 := &x.ListMeta
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else if z.HasExtensions() && z.EncExt(yy781) {
					} else {
						z.EncFallback(yy781)
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym786 := z.DecBinary()
	_ = yym786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct787 := r.ContainerType()
		if yyct787 == codecSelferValueTypeMap1234 {
			yyl787 := r.ReadMapStart()
			if yyl787 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl787, d)
			}
		} else if yyct787 == codecSelferValueTypeArray1234 {
			yyl787 := r.ReadArrayStart()
			if yyl787 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl787, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys788Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys788Slc
	var yyhl788 bool = l >= 0
	for yyj788 := 0; ; yyj788++ {
		if yyhl788 {
			if yyj788 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys788Slc = r.DecodeBytes(yys788Slc, true, true)
		yys788 := string(yys788Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys788 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv791 := &x.ListMeta
				yym792 := z.DecBinary()
				_ = yym792
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv791) {
				} else {
					z.DecFallback(yyv791, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv793 := &x.Items
				yym794 := z.DecBinary()
				_ = yym794
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv793), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys788)
		} // end switch yys788
	} // end for yyj788
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv798 := &x.ListMeta
		yym799 := z.DecBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv798) {
		} else {
			z.DecFallback(yyv798, false)
		}
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv800 := &x.Items
		yym801 := z.DecBinary()
		_ = yym801
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv800), d)
		}
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym802 := z.EncBinary()
		_ = yym802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep803 := !z.EncBinary()
			yy2arr803 := z.EncBasicHandle().StructToArray
			var yyq803 [5]bool
			_, _, _ = yysep803, yyq803, yy2arr803
			const yyr803 bool = false
			yyq803[0] = x.Parallelism != nil
			yyq803[1] = x.Completions != nil
			yyq803[2] = x.ActiveDeadlineSeconds != nil
			yyq803[3] = x.Selector != nil
			var yynn803 int
			if yyr803 || yy2arr803 {
				r.EncodeArrayStart(5)
			} else {
				yynn803 = 1
				for _, b := range yyq803 {
					if b {
						yynn803++
					}
				}
				r.EncodeMapStart(yynn803)
				yynn803 = 0
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy805 := *x.Parallelism
						yym806 := z.EncBinary()
						_ = yym806
						if false {
						} else {
							r.EncodeInt(int64(yy805))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq803[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy807 := *x.Parallelism
						yym808 := z.EncBinary()
						_ = yym808
						if false {
						} else {
							r.EncodeInt(int64(yy807))
						}
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy810 := *x.Completions
						yym811 := z.EncBinary()
						_ = yym811
						if false {
						} else {
							r.EncodeInt(int64(yy810))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy812 := *x.Completions
						yym813 := z.EncBinary()
						_ = yym813
						if false {
						} else {
							r.EncodeInt(int64(yy812))
						}
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy815 := *x.ActiveDeadlineSeconds
						yym816 := z.EncBinary()
						_ = yym816
						if false {
						} else {
							r.EncodeInt(int64(yy815))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy817 := *x.ActiveDeadlineSeconds
						yym818 := z.EncBinary()
						_ = yym818
						if false {
						} else {
							r.EncodeInt(int64(yy817))
						}
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq803[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy821 := &x.Template
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else if z.HasExtensions() && z.EncExt(yy821) {
				} else {
					z.EncFallback(yy821)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy823 := &x.Template
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else if z.HasExtensions() && z.EncExt(yy823) {
				} else {
					z.EncFallback(yy823)
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym825 := z.DecBinary()
	_ = yym825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct826 := r.ContainerType()
		if yyct826 == codecSelferValueTypeMap1234 {
			yyl826 := r.ReadMapStart()
			if yyl826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl826, d)
			}
		} else if yyct826 == codecSelferValueTypeArray1234 {
			yyl826 := r.ReadArrayStart()
			if yyl826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys827Slc
	var yyhl827 bool = l >= 0
	for yyj827 := 0; ; yyj827++ {
		if yyhl827 {
			if yyj827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys827Slc = r.DecodeBytes(yys827Slc, true, true)
		yys827 := string(yys827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys827 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym829 := z.DecBinary()
				_ = yym829
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym831 := z.DecBinary()
				_ = yym831
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym833 := z.DecBinary()
				_ = yym833
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv835 := &x.Template
				yym836 := z.DecBinary()
				_ = yym836
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv835) {
				} else {
					z.DecFallback(yyv835, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys827)
		} // end switch yys827
	} // end for yyj827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj837 int
	var yyb837 bool
	var yyhl837 bool = l >= 0
	yyj837++
	if yyhl837 {
		yyb837 = yyj837 > l
	} else {
		yyb837 = r.CheckBreak()
	}
	if yyb837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym839 := z.DecBinary()
		_ = yym839
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj837++
	if yyhl837 {
		yyb837 = yyj837 > l
	} else {
		yyb837 = r.CheckBreak()
	}
	if yyb837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym841 := z.DecBinary()
		_ = yym841
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj837++
	if yyhl837 {
		yyb837 = yyj837 > l
	} else {
		yyb837 = r.CheckBreak()
	}
	if yyb837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym843 := z.DecBinary()
		_ = yym843
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj837++
	if yyhl837 {
		yyb837 = yyj837 > l
	} else {
		yyb837 = r.CheckBreak()
	}
	if yyb837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj837++
	if yyhl837 {
		yyb837 = yyj837 > l
	} else {
		yyb837 = r.CheckBreak()
	}
	if yyb837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv845 := &x.Template
		yym846 := z.DecBinary()
		_ = yym846
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv845) {
		} else {
			z.DecFallback(yyv845, false)
		}
	}
	for {
		yyj837++
		if yyhl837 {
			yyb837 = yyj837 > l
		} else {
			yyb837 = r.CheckBreak()
		}
		if yyb837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym847 := z.EncBinary()
		_ = yym847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep848 := !z.EncBinary()
			yy2arr848 := z.EncBasicHandle().StructToArray
			var yyq848 [6]bool
			_, _, _ = yysep848, yyq848, yy2arr848
			const yyr848 bool = false
			yyq848[0] = len(x.Conditions) != 0
			yyq848[1] = x.StartTime != nil
			yyq848[2] = x.CompletionTime != nil
			yyq848[3] = x.Active != 0
			yyq848[4] = x.Succeeded != 0
			yyq848[5] = x.Failed != 0
			var yynn848 int
			if yyr848 || yy2arr848 {
				r.EncodeArrayStart(6)
			} else {
				yynn848 = 0
				for _, b := range yyq848 {
					if b {
						yynn848++
					}
				}
				r.EncodeMapStart(yynn848)
				yynn848 = 0
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym850 := z.EncBinary()
						_ = yym850
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq848[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym851 := z.EncBinary()
						_ = yym851
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym853 := z.EncBinary()
						_ = yym853
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym853 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym853 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq848[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym854 := z.EncBinary()
						_ = yym854
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym854 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym854 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym856 := z.EncBinary()
						_ = yym856
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym856 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym856 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym857 := z.EncBinary()
						_ = yym857
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym857 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym857 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[3] {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq848[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[4] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq848[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[5] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq848[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym867 := z.DecBinary()
	_ = yym867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct868 := r.ContainerType()
		if yyct868 == codecSelferValueTypeMap1234 {
			yyl868 := r.ReadMapStart()
			if yyl868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl868, d)
			}
		} else if yyct868 == codecSelferValueTypeArray1234 {
			yyl868 := r.ReadArrayStart()
			if yyl868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys869Slc
	var yyhl869 bool = l >= 0
	for yyj869 := 0; ; yyj869++ {
		if yyhl869 {
			if yyj869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys869Slc = r.DecodeBytes(yys869Slc, true, true)
		yys869 := string(yys869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys869 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv870 := &x.Conditions
				yym871 := z.DecBinary()
				_ = yym871
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv870), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym873 := z.DecBinary()
				_ = yym873
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym873 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym873 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym875 := z.DecBinary()
				_ = yym875
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym875 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym875 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys869)
		} // end switch yys869
	} // end for yyj869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj879 int
	var yyb879 bool
	var yyhl879 bool = l >= 0
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv880 := &x.Conditions
		yym881 := z.DecBinary()
		_ = yym881
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv880), d)
		}
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym883 := z.DecBinary()
		_ = yym883
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym883 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym883 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym885 := z.DecBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym885 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym885 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj879++
		if yyhl879 {
			yyb879 = yyj879 > l
		} else {
			yyb879 = r.CheckBreak()
		}
		if yyb879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym889 := z.EncBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym891 := z.EncBinary()
		_ = yym891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep892 := !z.EncBinary()
			yy2arr892 := z.EncBasicHandle().StructToArray
			var yyq892 [6]bool
			_, _, _ = yysep892, yyq892, yy2arr892
			const yyr892 bool = false
			yyq892[2] = true
			yyq892[3] = true
			yyq892[4] = x.Reason != ""
			yyq892[5] = x.Message != ""
			var yynn892 int
			if yyr892 || yy2arr892 {
				r.EncodeArrayStart(6)
			} else {
				yynn892 = 2
				for _, b := range yyq892 {
					if b {
						yynn892++
					}
				}
				r.EncodeMapStart(yynn892)
				yynn892 = 0
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym895 := z.EncBinary()
				_ = yym895
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym896 := z.EncBinary()
				_ = yym896
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[2] {
					yy898 := &x.LastProbeTime
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else if z.HasExtensions() && z.EncExt(yy898) {
					} else if yym899 {
						z.EncBinaryMarshal(yy898)
					} else if !yym899 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy898)
					} else {
						z.EncFallback(yy898)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq892[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy900 := &x.LastProbeTime
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else if z.HasExtensions() && z.EncExt(yy900) {
					} else if yym901 {
						z.EncBinaryMarshal(yy900)
					} else if !yym901 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy900)
					} else {
						z.EncFallback(yy900)
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[3] {
					yy903 := &x.LastTransitionTime
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy903) {
					} else if yym904 {
						z.EncBinaryMarshal(yy903)
					} else if !yym904 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy903)
					} else {
						z.EncFallback(yy903)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq892[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy905 := &x.LastTransitionTime
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy905) {
					} else if yym906 {
						z.EncBinaryMarshal(yy905)
					} else if !yym906 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy905)
					} else {
						z.EncFallback(yy905)
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[4] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq892[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[5] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq892[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym913 := z.DecBinary()
	_ = yym913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct914 := r.ContainerType()
		if yyct914 == codecSelferValueTypeMap1234 {
			yyl914 := r.ReadMapStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl914, d)
			}
		} else if yyct914 == codecSelferValueTypeArray1234 {
			yyl914 := r.ReadArrayStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys915Slc
	var yyhl915 bool = l >= 0
	for yyj915 := 0; ; yyj915++ {
		if yyhl915 {
			if yyj915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys915Slc = r.DecodeBytes(yys915Slc, true, true)
		yys915 := string(yys915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys915 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv918 := &x.LastProbeTime
				yym919 := z.DecBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv918) {
				} else if yym919 {
					z.DecBinaryUnmarshal(yyv918)
				} else if !yym919 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv918)
				} else {
					z.DecFallback(yyv918, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv920 := &x.LastTransitionTime
				yym921 := z.DecBinary()
				_ = yym921
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv920) {
				} else if yym921 {
					z.DecBinaryUnmarshal(yyv920)
				} else if !yym921 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv920)
				} else {
					z.DecFallback(yyv920, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys915)
		} // end switch yys915
	} // end for yyj915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj924 int
	var yyb924 bool
	var yyhl924 bool = l >= 0
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv927 := &x.LastProbeTime
		yym928 := z.DecBinary()
		_ = yym928
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv927) {
		} else if yym928 {
			z.DecBinaryUnmarshal(yyv927)
		} else if !yym928 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv927)
		} else {
			z.DecFallback(yyv927, false)
		}
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv929 := &x.LastTransitionTime
		yym930 := z.DecBinary()
		_ = yym930
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv929) {
		} else if yym930 {
			z.DecBinaryUnmarshal(yyv929)
		} else if !yym930 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv929)
		} else {
			z.DecFallback(yyv929, false)
		}
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj924++
		if yyhl924 {
			yyb924 = yyj924 > l
		} else {
			yyb924 = r.CheckBreak()
		}
		if yyb924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym933 := z.EncBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep934 := !z.EncBinary()
			yy2arr934 := z.EncBasicHandle().StructToArray
			var yyq934 [5]bool
			_, _, _ = yysep934, yyq934, yy2arr934
			const yyr934 bool = false
			yyq934[0] = x.Kind != ""
			yyq934[1] = x.APIVersion != ""
			yyq934[2] = true
			yyq934[3] = true
			yyq934[4] = true
			var yynn934 int
			if yyr934 || yy2arr934 {
				r.EncodeArrayStart(5)
			} else {
				yynn934 = 0
				for _, b := range yyq934 {
					if b {
						yynn934++
					}
				}
				r.EncodeMapStart(yynn934)
				yynn934 = 0
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[0] {
					yym936 := z.EncBinary()
					_ = yym936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq934[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym937 := z.EncBinary()
					_ = yym937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[1] {
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq934[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[2] {
					yy942 := &x.ObjectMeta
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy942) {
					} else {
						z.EncFallback(yy942)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy944 := &x.ObjectMeta
					yym945 := z.EncBinary()
					_ = yym945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy944) {
					} else {
						z.EncFallback(yy944)
					}
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[3] {
					yy947 := &x.Spec
					yy947.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy948 := &x.Spec
					yy948.CodecEncodeSelf(e)
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq934[4] {
					yy950 := &x.Status
					yy950.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy951 := &x.Status
					yy951.CodecEncodeSelf(e)
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym952 := z.DecBinary()
	_ = yym952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct953 := r.ContainerType()
		if yyct953 == codecSelferValueTypeMap1234 {
			yyl953 := r.ReadMapStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl953, d)
			}
		} else if yyct953 == codecSelferValueTypeArray1234 {
			yyl953 := r.ReadArrayStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys954Slc
	var yyhl954 bool = l >= 0
	for yyj954 := 0; ; yyj954++ {
		if yyhl954 {
			if yyj954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys954Slc = r.DecodeBytes(yys954Slc, true, true)
		yys954 := string(yys954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys954 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv957 := &x.ObjectMeta
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv957) {
				} else {
					z.DecFallback(yyv957, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv959 := &x.Spec
				yyv959.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv960 := &x.Status
				yyv960.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys954)
		} // end switch yys954
	} // end for yyj954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv964 := &x.ObjectMeta
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv964) {
		} else {
			z.DecFallback(yyv964, false)
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv966 := &x.Spec
		yyv966.CodecDecodeSelf(d)
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv967 := &x.Status
		yyv967.CodecDecodeSelf(d)
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [4]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Kind != ""
			yyq969[1] = x.APIVersion != ""
			yyq969[2] = true
			var yynn969 int
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(4)
			} else {
				yynn969 = 1
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
				yynn969 = 0
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq969[0] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq969[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq969[1] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq969[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq969[2] {
					yy977 := &x.ListMeta
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else if z.HasExtensions() && z.EncExt(yy977) {
					} else {
						z.EncFallback(yy977)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq969[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy979 := &x.ListMeta
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else if z.HasExtensions() && z.EncExt(yy979) {
					} else {
						z.EncFallback(yy979)
					}
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym984 := z.DecBinary()
	_ = yym984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct985 := r.ContainerType()
		if yyct985 == codecSelferValueTypeMap1234 {
			yyl985 := r.ReadMapStart()
			if yyl985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl985, d)
			}
		} else if yyct985 == codecSelferValueTypeArray1234 {
			yyl985 := r.ReadArrayStart()
			if yyl985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys986Slc
	var yyhl986 bool = l >= 0
	for yyj986 := 0; ; yyj986++ {
		if yyhl986 {
			if yyj986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys986Slc = r.DecodeBytes(yys986Slc, true, true)
		yys986 := string(yys986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys986 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv989 := &x.ListMeta
				yym990 := z.DecBinary()
				_ = yym990
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv989) {
				} else {
					z.DecFallback(yyv989, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv991 := &x.Items
				yym992 := z.DecBinary()
				_ = yym992
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv991), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys986)
		} // end switch yys986
	} // end for yyj986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj993 int
	var yyb993 bool
	var yyhl993 bool = l >= 0
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv996 := &x.ListMeta
		yym997 := z.DecBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv996) {
		} else {
			z.DecFallback(yyv996, false)
		}
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv998 := &x.Items
		yym999 := z.DecBinary()
		_ = yym999
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv998), d)
		}
	}
	for {
		yyj993++
		if yyhl993 {
			yyb993 = yyj993 > l
		} else {
			yyb993 = r.CheckBreak()
		}
		if yyb993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [2]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			yyq1001[0] = x.Backend != nil
			yyq1001[1] = len(x.Rules) != 0
			var yynn1001 int
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(2)
			} else {
				yynn1001 = 0
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
				yynn1001 = 0
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1001[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1001[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1001[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1001[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1005 := z.EncBinary()
						_ = yym1005
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1006 := z.DecBinary()
	_ = yym1006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1007 := r.ContainerType()
		if yyct1007 == codecSelferValueTypeMap1234 {
			yyl1007 := r.ReadMapStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1007, d)
			}
		} else if yyct1007 == codecSelferValueTypeArray1234 {
			yyl1007 := r.ReadArrayStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1008Slc
	var yyhl1008 bool = l >= 0
	for yyj1008 := 0; ; yyj1008++ {
		if yyhl1008 {
			if yyj1008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1008Slc = r.DecodeBytes(yys1008Slc, true, true)
		yys1008 := string(yys1008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1008 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1010 := &x.Rules
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1008)
		} // end switch yys1008
	} // end for yyj1008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1014 := &x.Rules
		yym1015 := z.DecBinary()
		_ = yym1015
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1014), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1016 := z.EncBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1017 := !z.EncBinary()
			yy2arr1017 := z.EncBasicHandle().StructToArray
			var yyq1017 [1]bool
			_, _, _ = yysep1017, yyq1017, yy2arr1017
			const yyr1017 bool = false
			yyq1017[0] = true
			var yynn1017 int
			if yyr1017 || yy2arr1017 {
				r.EncodeArrayStart(1)
			} else {
				yynn1017 = 0
				for _, b := range yyq1017 {
					if b {
						yynn1017++
					}
				}
				r.EncodeMapStart(yynn1017)
				yynn1017 = 0
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[0] {
					yy1019 := &x.LoadBalancer
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1019) {
					} else {
						z.EncFallback(yy1019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1017[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1021 := &x.LoadBalancer
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1021) {
					} else {
						z.EncFallback(yy1021)
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1024 := r.ContainerType()
		if yyct1024 == codecSelferValueTypeMap1234 {
			yyl1024 := r.ReadMapStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1024, d)
			}
		} else if yyct1024 == codecSelferValueTypeArray1234 {
			yyl1024 := r.ReadArrayStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1025Slc
	var yyhl1025 bool = l >= 0
	for yyj1025 := 0; ; yyj1025++ {
		if yyhl1025 {
			if yyj1025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1025Slc = r.DecodeBytes(yys1025Slc, true, true)
		yys1025 := string(yys1025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1025 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1026 := &x.LoadBalancer
				yym1027 := z.DecBinary()
				_ = yym1027
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1026) {
				} else {
					z.DecFallback(yyv1026, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1025)
		} // end switch yys1025
	} // end for yyj1025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1028 int
	var yyb1028 bool
	var yyhl1028 bool = l >= 0
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1029 := &x.LoadBalancer
		yym1030 := z.DecBinary()
		_ = yym1030
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1029) {
		} else {
			z.DecFallback(yyv1029, false)
		}
	}
	for {
		yyj1028++
		if yyhl1028 {
			yyb1028 = yyj1028 > l
		} else {
			yyb1028 = r.CheckBreak()
		}
		if yyb1028 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1028-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1031 := z.EncBinary()
		_ = yym1031
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1032 := !z.EncBinary()
			yy2arr1032 := z.EncBasicHandle().StructToArray
			var yyq1032 [2]bool
			_, _, _ = yysep1032, yyq1032, yy2arr1032
			const yyr1032 bool = false
			yyq1032[0] = x.Host != ""
			yyq1032[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1032 int
			if yyr1032 || yy2arr1032 {
				r.EncodeArrayStart(2)
			} else {
				yynn1032 = 0
				for _, b := range yyq1032 {
					if b {
						yynn1032++
					}
				}
				r.EncodeMapStart(yynn1032)
				yynn1032 = 0
			}
			if yyr1032 || yy2arr1032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1032[0] {
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1032[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1036 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1036 = true
				goto LABEL1036
			}
		LABEL1036:
			if yyr1032 || yy2arr1032 {
				if yyn1036 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1032[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1032[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1036 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1032 || yy2arr1032 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1038 := r.ContainerType()
		if yyct1038 == codecSelferValueTypeMap1234 {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if yyct1038 == codecSelferValueTypeArray1234 {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1039 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1042 int
	var yyb1042 bool
	var yyhl1042 bool = l >= 0
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1042++
		if yyhl1042 {
			yyb1042 = yyj1042 > l
		} else {
			yyb1042 = r.CheckBreak()
		}
		if yyb1042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1045 := z.EncBinary()
		_ = yym1045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1046 := !z.EncBinary()
			yy2arr1046 := z.EncBasicHandle().StructToArray
			var yyq1046 [1]bool
			_, _, _ = yysep1046, yyq1046, yy2arr1046
			const yyr1046 bool = false
			yyq1046[0] = x.HTTP != nil
			var yynn1046 int
			if yyr1046 || yy2arr1046 {
				r.EncodeArrayStart(1)
			} else {
				yynn1046 = 0
				for _, b := range yyq1046 {
					if b {
						yynn1046++
					}
				}
				r.EncodeMapStart(yynn1046)
				yynn1046 = 0
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1049 := r.ContainerType()
		if yyct1049 == codecSelferValueTypeMap1234 {
			yyl1049 := r.ReadMapStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1049, d)
			}
		} else if yyct1049 == codecSelferValueTypeArray1234 {
			yyl1049 := r.ReadArrayStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1050Slc
	var yyhl1050 bool = l >= 0
	for yyj1050 := 0; ; yyj1050++ {
		if yyhl1050 {
			if yyj1050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1050Slc = r.DecodeBytes(yys1050Slc, true, true)
		yys1050 := string(yys1050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1050 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1050)
		} // end switch yys1050
	} // end for yyj1050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1054 := z.EncBinary()
		_ = yym1054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1055 := !z.EncBinary()
			yy2arr1055 := z.EncBasicHandle().StructToArray
			var yyq1055 [1]bool
			_, _, _ = yysep1055, yyq1055, yy2arr1055
			const yyr1055 bool = false
			var yynn1055 int
			if yyr1055 || yy2arr1055 {
				r.EncodeArrayStart(1)
			} else {
				yynn1055 = 1
				for _, b := range yyq1055 {
					if b {
						yynn1055++
					}
				}
				r.EncodeMapStart(yynn1055)
				yynn1055 = 0
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1058 := z.EncBinary()
					_ = yym1058
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1059 := z.DecBinary()
	_ = yym1059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1060 := r.ContainerType()
		if yyct1060 == codecSelferValueTypeMap1234 {
			yyl1060 := r.ReadMapStart()
			if yyl1060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1060, d)
			}
		} else if yyct1060 == codecSelferValueTypeArray1234 {
			yyl1060 := r.ReadArrayStart()
			if yyl1060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1061Slc
	var yyhl1061 bool = l >= 0
	for yyj1061 := 0; ; yyj1061++ {
		if yyhl1061 {
			if yyj1061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1061Slc = r.DecodeBytes(yys1061Slc, true, true)
		yys1061 := string(yys1061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1061 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1062 := &x.Paths
				yym1063 := z.DecBinary()
				_ = yym1063
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1062), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1061)
		} // end switch yys1061
	} // end for yyj1061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1064 int
	var yyb1064 bool
	var yyhl1064 bool = l >= 0
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1065 := &x.Paths
		yym1066 := z.DecBinary()
		_ = yym1066
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1065), d)
		}
	}
	for {
		yyj1064++
		if yyhl1064 {
			yyb1064 = yyj1064 > l
		} else {
			yyb1064 = r.CheckBreak()
		}
		if yyb1064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1067 := z.EncBinary()
		_ = yym1067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1068 := !z.EncBinary()
			yy2arr1068 := z.EncBasicHandle().StructToArray
			var yyq1068 [2]bool
			_, _, _ = yysep1068, yyq1068, yy2arr1068
			const yyr1068 bool = false
			yyq1068[0] = x.Path != ""
			var yynn1068 int
			if yyr1068 || yy2arr1068 {
				r.EncodeArrayStart(2)
			} else {
				yynn1068 = 1
				for _, b := range yyq1068 {
					if b {
						yynn1068++
					}
				}
				r.EncodeMapStart(yynn1068)
				yynn1068 = 0
			}
			if yyr1068 || yy2arr1068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1068[0] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1068[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1068 || yy2arr1068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1073 := &x.Backend
				yy1073.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1074 := &x.Backend
				yy1074.CodecEncodeSelf(e)
			}
			if yyr1068 || yy2arr1068 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1076 := r.ContainerType()
		if yyct1076 == codecSelferValueTypeMap1234 {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if yyct1076 == codecSelferValueTypeArray1234 {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1077 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1079 := &x.Backend
				yyv1079.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1082 := &x.Backend
		yyv1082.CodecDecodeSelf(d)
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1083 := z.EncBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1084 := !z.EncBinary()
			yy2arr1084 := z.EncBasicHandle().StructToArray
			var yyq1084 [2]bool
			_, _, _ = yysep1084, yyq1084, yy2arr1084
			const yyr1084 bool = false
			var yynn1084 int
			if yyr1084 || yy2arr1084 {
				r.EncodeArrayStart(2)
			} else {
				yynn1084 = 2
				for _, b := range yyq1084 {
					if b {
						yynn1084++
					}
				}
				r.EncodeMapStart(yynn1084)
				yynn1084 = 0
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1089 := &x.ServicePort
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1089) {
				} else if !yym1090 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1089)
				} else {
					z.EncFallback(yy1089)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1091 := &x.ServicePort
				yym1092 := z.EncBinary()
				_ = yym1092
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1091) {
				} else if !yym1092 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1091)
				} else {
					z.EncFallback(yy1091)
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1094 := r.ContainerType()
		if yyct1094 == codecSelferValueTypeMap1234 {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if yyct1094 == codecSelferValueTypeArray1234 {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1095 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1097 := &x.ServicePort
				yym1098 := z.DecBinary()
				_ = yym1098
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1097) {
				} else if !yym1098 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1097)
				} else {
					z.DecFallback(yyv1097, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1099 int
	var yyb1099 bool
	var yyhl1099 bool = l >= 0
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1101 := &x.ServicePort
		yym1102 := z.DecBinary()
		_ = yym1102
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1101) {
		} else if !yym1102 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1101)
		} else {
			z.DecFallback(yyv1101, false)
		}
	}
	for {
		yyj1099++
		if yyhl1099 {
			yyb1099 = yyj1099 > l
		} else {
			yyb1099 = r.CheckBreak()
		}
		if yyb1099 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1099-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1103 := z.EncBinary()
	_ = yym1103
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1104 := z.DecBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1105 := z.EncBinary()
		_ = yym1105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1106 := !z.EncBinary()
			yy2arr1106 := z.EncBasicHandle().StructToArray
			var yyq1106 [2]bool
			_, _, _ = yysep1106, yyq1106, yy2arr1106
			const yyr1106 bool = false
			var yynn1106 int
			if yyr1106 || yy2arr1106 {
				r.EncodeArrayStart(2)
			} else {
				yynn1106 = 2
				for _, b := range yyq1106 {
					if b {
						yynn1106++
					}
				}
				r.EncodeMapStart(yynn1106)
				yynn1106 = 0
			}
			if yyr1106 || yy2arr1106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1106 || yy2arr1106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1109 := z.EncBinary()
				_ = yym1109
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1110 := z.EncBinary()
				_ = yym1110
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1106 || yy2arr1106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1111 := z.DecBinary()
	_ = yym1111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1112 := r.ContainerType()
		if yyct1112 == codecSelferValueTypeMap1234 {
			yyl1112 := r.ReadMapStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1112, d)
			}
		} else if yyct1112 == codecSelferValueTypeArray1234 {
			yyl1112 := r.ReadArrayStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1113Slc
	var yyhl1113 bool = l >= 0
	for yyj1113 := 0; ; yyj1113++ {
		if yyhl1113 {
			if yyj1113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1113Slc = r.DecodeBytes(yys1113Slc, true, true)
		yys1113 := string(yys1113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1113 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1113)
		} // end switch yys1113
	} // end for yyj1113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1116 int
	var yyb1116 bool
	var yyhl1116 bool = l >= 0
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1116++
		if yyhl1116 {
			yyb1116 = yyj1116 > l
		} else {
			yyb1116 = r.CheckBreak()
		}
		if yyb1116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1119 := z.EncBinary()
		_ = yym1119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1120 := !z.EncBinary()
			yy2arr1120 := z.EncBasicHandle().StructToArray
			var yyq1120 [3]bool
			_, _, _ = yysep1120, yyq1120, yy2arr1120
			const yyr1120 bool = false
			var yynn1120 int
			if yyr1120 || yy2arr1120 {
				r.EncodeArrayStart(3)
			} else {
				yynn1120 = 3
				for _, b := range yyq1120 {
					if b {
						yynn1120++
					}
				}
				r.EncodeMapStart(yynn1120)
				yynn1120 = 0
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1122 := z.EncBinary()
				_ = yym1122
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1123 := z.EncBinary()
				_ = yym1123
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1125 := z.EncBinary()
				_ = yym1125
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1126 := z.EncBinary()
				_ = yym1126
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1120 || yy2arr1120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1131 := r.ContainerType()
		if yyct1131 == codecSelferValueTypeMap1234 {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if yyct1131 == codecSelferValueTypeArray1234 {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1132 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int32(r.DecodeInt(32))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int32(r.DecodeInt(32))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1135 := &x.TargetUtilization
				yym1136 := z.DecBinary()
				_ = yym1136
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1137 int
	var yyb1137 bool
	var yyhl1137 bool = l >= 0
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int32(r.DecodeInt(32))
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int32(r.DecodeInt(32))
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1140 := &x.TargetUtilization
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1140), d)
		}
	}
	for {
		yyj1137++
		if yyhl1137 {
			yyb1137 = yyj1137 > l
		} else {
			yyb1137 = r.CheckBreak()
		}
		if yyb1137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1142 := z.EncBinary()
		_ = yym1142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1143 := !z.EncBinary()
			yy2arr1143 := z.EncBasicHandle().StructToArray
			var yyq1143 [4]bool
			_, _, _ = yysep1143, yyq1143, yy2arr1143
			const yyr1143 bool = false
			yyq1143[0] = x.Kind != ""
			yyq1143[1] = x.APIVersion != ""
			yyq1143[2] = true
			yyq1143[3] = true
			var yynn1143 int
			if yyr1143 || yy2arr1143 {
				r.EncodeArrayStart(4)
			} else {
				yynn1143 = 0
				for _, b := range yyq1143 {
					if b {
						yynn1143++
					}
				}
				r.EncodeMapStart(yynn1143)
				yynn1143 = 0
			}
			if yyr1143 || yy2arr1143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1143[0] {
					yym1145 := z.EncBinary()
					_ = yym1145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1143[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1146 := z.EncBinary()
					_ = yym1146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1143 || yy2arr1143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1143[1] {
					yym1148 := z.EncBinary()
					_ = yym1148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1143[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1143 || yy2arr1143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1143[2] {
					yy1151 := &x.ObjectMeta
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1151) {
					} else {
						z.EncFallback(yy1151)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1143[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1153 := &x.ObjectMeta
					yym1154 := z.EncBinary()
					_ = yym1154
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1153) {
					} else {
						z.EncFallback(yy1153)
					}
				}
			}
			if yyr1143 || yy2arr1143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1143[3] {
					yy1156 := &x.Spec
					yy1156.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1143[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1157 := &x.Spec
					yy1157.CodecEncodeSelf(e)
				}
			}
			if yyr1143 || yy2arr1143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1158 := z.DecBinary()
	_ = yym1158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1159 := r.ContainerType()
		if yyct1159 == codecSelferValueTypeMap1234 {
			yyl1159 := r.ReadMapStart()
			if yyl1159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1159, d)
			}
		} else if yyct1159 == codecSelferValueTypeArray1234 {
			yyl1159 := r.ReadArrayStart()
			if yyl1159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1160Slc
	var yyhl1160 bool = l >= 0
	for yyj1160 := 0; ; yyj1160++ {
		if yyhl1160 {
			if yyj1160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1160Slc = r.DecodeBytes(yys1160Slc, true, true)
		yys1160 := string(yys1160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1160 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1163 := &x.ObjectMeta
				yym1164 := z.DecBinary()
				_ = yym1164
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1163) {
				} else {
					z.DecFallback(yyv1163, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1165 := &x.Spec
				yyv1165.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1160)
		} // end switch yys1160
	} // end for yyj1160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1166 int
	var yyb1166 bool
	var yyhl1166 bool = l >= 0
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1169 := &x.ObjectMeta
		yym1170 := z.DecBinary()
		_ = yym1170
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1169) {
		} else {
			z.DecFallback(yyv1169, false)
		}
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1171 := &x.Spec
		yyv1171.CodecDecodeSelf(d)
	}
	for {
		yyj1166++
		if yyhl1166 {
			yyb1166 = yyj1166 > l
		} else {
			yyb1166 = r.CheckBreak()
		}
		if yyb1166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1172 := z.EncBinary()
		_ = yym1172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1173 := !z.EncBinary()
			yy2arr1173 := z.EncBasicHandle().StructToArray
			var yyq1173 [4]bool
			_, _, _ = yysep1173, yyq1173, yy2arr1173
			const yyr1173 bool = false
			yyq1173[0] = x.Kind != ""
			yyq1173[1] = x.APIVersion != ""
			yyq1173[2] = true
			var yynn1173 int
			if yyr1173 || yy2arr1173 {
				r.EncodeArrayStart(4)
			} else {
				yynn1173 = 1
				for _, b := range yyq1173 {
					if b {
						yynn1173++
					}
				}
				r.EncodeMapStart(yynn1173)
				yynn1173 = 0
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[0] {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[1] {
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[2] {
					yy1181 := &x.ListMeta
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1181) {
					} else {
						z.EncFallback(yy1181)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1183 := &x.ListMeta
					yym1184 := z.EncBinary()
					_ = yym1184
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1183) {
					} else {
						z.EncFallback(yy1183)
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1188 := z.DecBinary()
	_ = yym1188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1189 := r.ContainerType()
		if yyct1189 == codecSelferValueTypeMap1234 {
			yyl1189 := r.ReadMapStart()
			if yyl1189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1189, d)
			}
		} else if yyct1189 == codecSelferValueTypeArray1234 {
			yyl1189 := r.ReadArrayStart()
			if yyl1189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1190Slc
	var yyhl1190 bool = l >= 0
	for yyj1190 := 0; ; yyj1190++ {
		if yyhl1190 {
			if yyj1190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1190Slc = r.DecodeBytes(yys1190Slc, true, true)
		yys1190 := string(yys1190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1190 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1193 := &x.ListMeta
				yym1194 := z.DecBinary()
				_ = yym1194
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1193) {
				} else {
					z.DecFallback(yyv1193, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1195 := &x.Items
				yym1196 := z.DecBinary()
				_ = yym1196
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1195), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1190)
		} // end switch yys1190
	} // end for yyj1190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1197 int
	var yyb1197 bool
	var yyhl1197 bool = l >= 0
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1200 := &x.ListMeta
		yym1201 := z.DecBinary()
		_ = yym1201
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1200) {
		} else {
			z.DecFallback(yyv1200, false)
		}
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1202 := &x.Items
		yym1203 := z.DecBinary()
		_ = yym1203
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1202), d)
		}
	}
	for {
		yyj1197++
		if yyhl1197 {
			yyb1197 = yyj1197 > l
		} else {
			yyb1197 = r.CheckBreak()
		}
		if yyb1197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1204 := z.EncBinary()
		_ = yym1204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1205 := !z.EncBinary()
			yy2arr1205 := z.EncBasicHandle().StructToArray
			var yyq1205 [4]bool
			_, _, _ = yysep1205, yyq1205, yy2arr1205
			const yyr1205 bool = false
			yyq1205[0] = x.Kind != ""
			yyq1205[1] = x.APIVersion != ""
			var yynn1205 int
			if yyr1205 || yy2arr1205 {
				r.EncodeArrayStart(4)
			} else {
				yynn1205 = 2
				for _, b := range yyq1205 {
					if b {
						yynn1205++
					}
				}
				r.EncodeMapStart(yynn1205)
				yynn1205 = 0
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1205[0] {
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1205[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1205[1] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1205[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1216 := z.EncBinary()
				_ = yym1216
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1218 := z.DecBinary()
	_ = yym1218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1219 := r.ContainerType()
		if yyct1219 == codecSelferValueTypeMap1234 {
			yyl1219 := r.ReadMapStart()
			if yyl1219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1219, d)
			}
		} else if yyct1219 == codecSelferValueTypeArray1234 {
			yyl1219 := r.ReadArrayStart()
			if yyl1219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1220Slc
	var yyhl1220 bool = l >= 0
	for yyj1220 := 0; ; yyj1220++ {
		if yyhl1220 {
			if yyj1220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1220Slc = r.DecodeBytes(yys1220Slc, true, true)
		yys1220 := string(yys1220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1220 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1220)
		} // end switch yys1220
	} // end for yyj1220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1225 int
	var yyb1225 bool
	var yyhl1225 bool = l >= 0
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj1225++
		if yyhl1225 {
			yyb1225 = yyj1225 > l
		} else {
			yyb1225 = r.CheckBreak()
		}
		if yyb1225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1230 := z.EncBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1231 := !z.EncBinary()
			yy2arr1231 := z.EncBasicHandle().StructToArray
			var yyq1231 [7]bool
			_, _, _ = yysep1231, yyq1231, yy2arr1231
			const yyr1231 bool = false
			yyq1231[0] = x.Kind != ""
			yyq1231[1] = x.APIVersion != ""
			yyq1231[2] = x.LabelSelector != ""
			yyq1231[3] = x.FieldSelector != ""
			yyq1231[4] = x.Watch != false
			yyq1231[5] = x.ResourceVersion != ""
			yyq1231[6] = x.TimeoutSeconds != nil
			var yynn1231 int
			if yyr1231 || yy2arr1231 {
				r.EncodeArrayStart(7)
			} else {
				yynn1231 = 0
				for _, b := range yyq1231 {
					if b {
						yynn1231++
					}
				}
				r.EncodeMapStart(yynn1231)
				yynn1231 = 0
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[0] {
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[1] {
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[2] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[3] {
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1243 := z.EncBinary()
					_ = yym1243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[4] {
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1231[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[5] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1231[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1251 := *x.TimeoutSeconds
						yym1252 := z.EncBinary()
						_ = yym1252
						if false {
						} else {
							r.EncodeInt(int64(yy1251))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1231[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1253 := *x.TimeoutSeconds
						yym1254 := z.EncBinary()
						_ = yym1254
						if false {
						} else {
							r.EncodeInt(int64(yy1253))
						}
					}
				}
			}
			if yyr1231 || yy2arr1231 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1256 := r.ContainerType()
		if yyct1256 == codecSelferValueTypeMap1234 {
			yyl1256 := r.ReadMapStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1256, d)
			}
		} else if yyct1256 == codecSelferValueTypeArray1234 {
			yyl1256 := r.ReadArrayStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1257Slc
	var yyhl1257 bool = l >= 0
	for yyj1257 := 0; ; yyj1257++ {
		if yyhl1257 {
			if yyj1257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1257Slc = r.DecodeBytes(yys1257Slc, true, true)
		yys1257 := string(yys1257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1257 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym1265 := z.DecBinary()
				_ = yym1265
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1257)
		} // end switch yys1257
	} // end for yyj1257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1266 int
	var yyb1266 bool
	var yyhl1266 bool = l >= 0
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym1274 := z.DecBinary()
		_ = yym1274
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1266++
		if yyhl1266 {
			yyb1266 = yyj1266 > l
		} else {
			yyb1266 = r.CheckBreak()
		}
		if yyb1266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [2]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			yyq1276[0] = len(x.MatchLabels) != 0
			yyq1276[1] = len(x.MatchExpressions) != 0
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(2)
			} else {
				yynn1276 = 0
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1278 := z.EncBinary()
						_ = yym1278
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1279 := z.EncBinary()
						_ = yym1279
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1281 := z.EncBinary()
						_ = yym1281
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1282 := z.EncBinary()
						_ = yym1282
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1284 := r.ContainerType()
		if yyct1284 == codecSelferValueTypeMap1234 {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if yyct1284 == codecSelferValueTypeArray1234 {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1285 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1286 := &x.MatchLabels
				yym1287 := z.DecBinary()
				_ = yym1287
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1286, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1288 := &x.MatchExpressions
				yym1289 := z.DecBinary()
				_ = yym1289
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1288), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1290 int
	var yyb1290 bool
	var yyhl1290 bool = l >= 0
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1291 := &x.MatchLabels
		yym1292 := z.DecBinary()
		_ = yym1292
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1291, false, d)
		}
	}
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1293 := &x.MatchExpressions
		yym1294 := z.DecBinary()
		_ = yym1294
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1293), d)
		}
	}
	for {
		yyj1290++
		if yyhl1290 {
			yyb1290 = yyj1290 > l
		} else {
			yyb1290 = r.CheckBreak()
		}
		if yyb1290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1295 := z.EncBinary()
		_ = yym1295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1296 := !z.EncBinary()
			yy2arr1296 := z.EncBasicHandle().StructToArray
			var yyq1296 [3]bool
			_, _, _ = yysep1296, yyq1296, yy2arr1296
			const yyr1296 bool = false
			yyq1296[2] = len(x.Values) != 0
			var yynn1296 int
			if yyr1296 || yy2arr1296 {
				r.EncodeArrayStart(3)
			} else {
				yynn1296 = 2
				for _, b := range yyq1296 {
					if b {
						yynn1296++
					}
				}
				r.EncodeMapStart(yynn1296)
				yynn1296 = 0
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1296[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1302 := z.EncBinary()
						_ = yym1302
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1303 := z.EncBinary()
						_ = yym1303
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1296 || yy2arr1296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1305 := r.ContainerType()
		if yyct1305 == codecSelferValueTypeMap1234 {
			yyl1305 := r.ReadMapStart()
			if yyl1305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1305, d)
			}
		} else if yyct1305 == codecSelferValueTypeArray1234 {
			yyl1305 := r.ReadArrayStart()
			if yyl1305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1306Slc
	var yyhl1306 bool = l >= 0
	for yyj1306 := 0; ; yyj1306++ {
		if yyhl1306 {
			if yyj1306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1306Slc = r.DecodeBytes(yys1306Slc, true, true)
		yys1306 := string(yys1306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1306 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1309 := &x.Values
				yym1310 := z.DecBinary()
				_ = yym1310
				if false {
				} else {
					z.F.DecSliceStringX(yyv1309, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1306)
		} // end switch yys1306
	} // end for yyj1306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1311 int
	var yyb1311 bool
	var yyhl1311 bool = l >= 0
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1311++
	if yyhl1311 {
		yyb1311 = yyj1311 > l
	} else {
		yyb1311 = r.CheckBreak()
	}
	if yyb1311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1314 := &x.Values
		yym1315 := z.DecBinary()
		_ = yym1315
		if false {
		} else {
			z.F.DecSliceStringX(yyv1314, false, d)
		}
	}
	for {
		yyj1311++
		if yyhl1311 {
			yyb1311 = yyj1311 > l
		} else {
			yyb1311 = r.CheckBreak()
		}
		if yyb1311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1316 := z.EncBinary()
	_ = yym1316
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1317 := z.DecBinary()
	_ = yym1317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1318 := z.EncBinary()
		_ = yym1318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1319 := !z.EncBinary()
			yy2arr1319 := z.EncBasicHandle().StructToArray
			var yyq1319 [4]bool
			_, _, _ = yysep1319, yyq1319, yy2arr1319
			const yyr1319 bool = false
			yyq1319[0] = x.Kind != ""
			yyq1319[1] = x.APIVersion != ""
			yyq1319[2] = true
			yyq1319[3] = len(x.Data) != 0
			var yynn1319 int
			if yyr1319 || yy2arr1319 {
				r.EncodeArrayStart(4)
			} else {
				yynn1319 = 0
				for _, b := range yyq1319 {
					if b {
						yynn1319++
					}
				}
				r.EncodeMapStart(yynn1319)
				yynn1319 = 0
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1319[0] {
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1319[1] {
					yym1324 := z.EncBinary()
					_ = yym1324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1319[2] {
					yy1327 := &x.ObjectMeta
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1327) {
					} else {
						z.EncFallback(yy1327)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1319[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1329 := &x.ObjectMeta
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1329) {
					} else {
						z.EncFallback(yy1329)
					}
				}
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1319[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym1332 := z.EncBinary()
						_ = yym1332
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1319[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym1333 := z.EncBinary()
						_ = yym1333
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1334 := z.DecBinary()
	_ = yym1334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1335 := r.ContainerType()
		if yyct1335 == codecSelferValueTypeMap1234 {
			yyl1335 := r.ReadMapStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1335, d)
			}
		} else if yyct1335 == codecSelferValueTypeArray1234 {
			yyl1335 := r.ReadArrayStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1336Slc
	var yyhl1336 bool = l >= 0
	for yyj1336 := 0; ; yyj1336++ {
		if yyhl1336 {
			if yyj1336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1336Slc = r.DecodeBytes(yys1336Slc, true, true)
		yys1336 := string(yys1336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1336 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1339 := &x.ObjectMeta
				yym1340 := z.DecBinary()
				_ = yym1340
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1339) {
				} else {
					z.DecFallback(yyv1339, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv1341 := &x.Data
				yym1342 := z.DecBinary()
				_ = yym1342
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1341, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1336)
		} // end switch yys1336
	} // end for yyj1336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1343 int
	var yyb1343 bool
	var yyhl1343 bool = l >= 0
	yyj1343++
	if yyhl1343 {
		yyb1343 = yyj1343 > l
	} else {
		yyb1343 = r.CheckBreak()
	}
	if yyb1343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1343++
	if yyhl1343 {
		yyb1343 = yyj1343 > l
	} else {
		yyb1343 = r.CheckBreak()
	}
	if yyb1343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1343++
	if yyhl1343 {
		yyb1343 = yyj1343 > l
	} else {
		yyb1343 = r.CheckBreak()
	}
	if yyb1343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1346 := &x.ObjectMeta
		yym1347 := z.DecBinary()
		_ = yym1347
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1346) {
		} else {
			z.DecFallback(yyv1346, false)
		}
	}
	yyj1343++
	if yyhl1343 {
		yyb1343 = yyj1343 > l
	} else {
		yyb1343 = r.CheckBreak()
	}
	if yyb1343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv1348 := &x.Data
		yym1349 := z.DecBinary()
		_ = yym1349
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1348, false, d)
		}
	}
	for {
		yyj1343++
		if yyhl1343 {
			yyb1343 = yyj1343 > l
		} else {
			yyb1343 = r.CheckBreak()
		}
		if yyb1343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1350 := z.EncBinary()
		_ = yym1350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1351 := !z.EncBinary()
			yy2arr1351 := z.EncBasicHandle().StructToArray
			var yyq1351 [4]bool
			_, _, _ = yysep1351, yyq1351, yy2arr1351
			const yyr1351 bool = false
			yyq1351[0] = x.Kind != ""
			yyq1351[1] = x.APIVersion != ""
			yyq1351[2] = true
			yyq1351[3] = len(x.Items) != 0
			var yynn1351 int
			if yyr1351 || yy2arr1351 {
				r.EncodeArrayStart(4)
			} else {
				yynn1351 = 0
				for _, b := range yyq1351 {
					if b {
						yynn1351++
					}
				}
				r.EncodeMapStart(yynn1351)
				yynn1351 = 0
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[0] {
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[1] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[2] {
					yy1359 := &x.ListMeta
					yym1360 := z.EncBinary()
					_ = yym1360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1359) {
					} else {
						z.EncFallback(yy1359)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1361 := &x.ListMeta
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1361) {
					} else {
						z.EncFallback(yy1361)
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[3] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1366 := z.DecBinary()
	_ = yym1366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1367 := r.ContainerType()
		if yyct1367 == codecSelferValueTypeMap1234 {
			yyl1367 := r.ReadMapStart()
			if yyl1367 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1367, d)
			}
		} else if yyct1367 == codecSelferValueTypeArray1234 {
			yyl1367 := r.ReadArrayStart()
			if yyl1367 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1368Slc
	var yyhl1368 bool = l >= 0
	for yyj1368 := 0; ; yyj1368++ {
		if yyhl1368 {
			if yyj1368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1368Slc = r.DecodeBytes(yys1368Slc, true, true)
		yys1368 := string(yys1368Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1368 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1371 := &x.ListMeta
				yym1372 := z.DecBinary()
				_ = yym1372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1371) {
				} else {
					z.DecFallback(yyv1371, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1373 := &x.Items
				yym1374 := z.DecBinary()
				_ = yym1374
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv1373), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1368)
		} // end switch yys1368
	} // end for yyj1368
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1375 int
	var yyb1375 bool
	var yyhl1375 bool = l >= 0
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1378 := &x.ListMeta
		yym1379 := z.DecBinary()
		_ = yym1379
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1378) {
		} else {
			z.DecFallback(yyv1378, false)
		}
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1380 := &x.Items
		yym1381 := z.DecBinary()
		_ = yym1381
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv1380), d)
		}
	}
	for {
		yyj1375++
		if yyhl1375 {
			yyb1375 = yyj1375 > l
		} else {
			yyb1375 = r.CheckBreak()
		}
		if yyb1375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [5]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			yyq1383[0] = x.Kind != ""
			yyq1383[1] = x.APIVersion != ""
			yyq1383[2] = true
			yyq1383[3] = true
			yyq1383[4] = true
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(5)
			} else {
				yynn1383 = 0
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[0] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1383[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[1] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1383[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[2] {
					yy1391 := &x.ObjectMeta
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1391) {
					} else {
						z.EncFallback(yy1391)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1383[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1393 := &x.ObjectMeta
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1393) {
					} else {
						z.EncFallback(yy1393)
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[3] {
					yy1396 := &x.Spec
					yy1396.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1383[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1397 := &x.Spec
					yy1397.CodecEncodeSelf(e)
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[4] {
					yy1399 := &x.Status
					yy1399.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1383[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1400 := &x.Status
					yy1400.CodecEncodeSelf(e)
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1401 := z.DecBinary()
	_ = yym1401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1402 := r.ContainerType()
		if yyct1402 == codecSelferValueTypeMap1234 {
			yyl1402 := r.ReadMapStart()
			if yyl1402 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1402, d)
			}
		} else if yyct1402 == codecSelferValueTypeArray1234 {
			yyl1402 := r.ReadArrayStart()
			if yyl1402 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1403Slc
	var yyhl1403 bool = l >= 0
	for yyj1403 := 0; ; yyj1403++ {
		if yyhl1403 {
			if yyj1403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1403Slc = r.DecodeBytes(yys1403Slc, true, true)
		yys1403 := string(yys1403Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1406 := &x.ObjectMeta
				yym1407 := z.DecBinary()
				_ = yym1407
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1406) {
				} else {
					z.DecFallback(yyv1406, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1408 := &x.Spec
				yyv1408.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1409 := &x.Status
				yyv1409.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1403)
		} // end switch yys1403
	} // end for yyj1403
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1410 int
	var yyb1410 bool
	var yyhl1410 bool = l >= 0
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1413 := &x.ObjectMeta
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1413) {
		} else {
			z.DecFallback(yyv1413, false)
		}
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1415 := &x.Spec
		yyv1415.CodecDecodeSelf(d)
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1416 := &x.Status
		yyv1416.CodecDecodeSelf(d)
	}
	for {
		yyj1410++
		if yyhl1410 {
			yyb1410 = yyj1410 > l
		} else {
			yyb1410 = r.CheckBreak()
		}
		if yyb1410 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1410-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1417 := z.EncBinary()
		_ = yym1417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1418 := !z.EncBinary()
			yy2arr1418 := z.EncBasicHandle().StructToArray
			var yyq1418 [4]bool
			_, _, _ = yysep1418, yyq1418, yy2arr1418
			const yyr1418 bool = false
			yyq1418[0] = x.Kind != ""
			yyq1418[1] = x.APIVersion != ""
			yyq1418[2] = true
			var yynn1418 int
			if yyr1418 || yy2arr1418 {
				r.EncodeArrayStart(4)
			} else {
				yynn1418 = 1
				for _, b := range yyq1418 {
					if b {
						yynn1418++
					}
				}
				r.EncodeMapStart(yynn1418)
				yynn1418 = 0
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[0] {
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[1] {
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[2] {
					yy1426 := &x.ListMeta
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1426) {
					} else {
						z.EncFallback(yy1426)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1428 := &x.ListMeta
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1428) {
					} else {
						z.EncFallback(yy1428)
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1431 := z.EncBinary()
					_ = yym1431
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1433 := z.DecBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1434 := r.ContainerType()
		if yyct1434 == codecSelferValueTypeMap1234 {
			yyl1434 := r.ReadMapStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1434, d)
			}
		} else if yyct1434 == codecSelferValueTypeArray1234 {
			yyl1434 := r.ReadArrayStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1435Slc
	var yyhl1435 bool = l >= 0
	for yyj1435 := 0; ; yyj1435++ {
		if yyhl1435 {
			if yyj1435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1435Slc = r.DecodeBytes(yys1435Slc, true, true)
		yys1435 := string(yys1435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1435 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1438 := &x.ListMeta
				yym1439 := z.DecBinary()
				_ = yym1439
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1438) {
				} else {
					z.DecFallback(yyv1438, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1440 := &x.Items
				yym1441 := z.DecBinary()
				_ = yym1441
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1440), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1435)
		} // end switch yys1435
	} // end for yyj1435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1442 int
	var yyb1442 bool
	var yyhl1442 bool = l >= 0
	yyj1442++
	if yyhl1442 {
		yyb1442 = yyj1442 > l
	} else {
		yyb1442 = r.CheckBreak()
	}
	if yyb1442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1442++
	if yyhl1442 {
		yyb1442 = yyj1442 > l
	} else {
		yyb1442 = r.CheckBreak()
	}
	if yyb1442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1442++
	if yyhl1442 {
		yyb1442 = yyj1442 > l
	} else {
		yyb1442 = r.CheckBreak()
	}
	if yyb1442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1445 := &x.ListMeta
		yym1446 := z.DecBinary()
		_ = yym1446
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1445) {
		} else {
			z.DecFallback(yyv1445, false)
		}
	}
	yyj1442++
	if yyhl1442 {
		yyb1442 = yyj1442 > l
	} else {
		yyb1442 = r.CheckBreak()
	}
	if yyb1442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1447 := &x.Items
		yym1448 := z.DecBinary()
		_ = yym1448
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1447), d)
		}
	}
	for {
		yyj1442++
		if yyhl1442 {
			yyb1442 = yyj1442 > l
		} else {
			yyb1442 = r.CheckBreak()
		}
		if yyb1442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1449 := z.EncBinary()
		_ = yym1449
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1450 := !z.EncBinary()
			yy2arr1450 := z.EncBasicHandle().StructToArray
			var yyq1450 [3]bool
			_, _, _ = yysep1450, yyq1450, yy2arr1450
			const yyr1450 bool = false
			yyq1450[0] = x.Replicas != nil
			yyq1450[1] = x.Selector != nil
			yyq1450[2] = x.Template != nil
			var yynn1450 int
			if yyr1450 || yy2arr1450 {
				r.EncodeArrayStart(3)
			} else {
				yynn1450 = 0
				for _, b := range yyq1450 {
					if b {
						yynn1450++
					}
				}
				r.EncodeMapStart(yynn1450)
				yynn1450 = 0
			}
			if yyr1450 || yy2arr1450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1450[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1452 := *x.Replicas
						yym1453 := z.EncBinary()
						_ = yym1453
						if false {
						} else {
							r.EncodeInt(int64(yy1452))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1450[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1454 := *x.Replicas
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else {
							r.EncodeInt(int64(yy1454))
						}
					}
				}
			}
			if yyr1450 || yy2arr1450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1450[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1450[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1450 || yy2arr1450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1450[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1450[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr1450 || yy2arr1450 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1460 := z.DecBinary()
	_ = yym1460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1461 := r.ContainerType()
		if yyct1461 == codecSelferValueTypeMap1234 {
			yyl1461 := r.ReadMapStart()
			if yyl1461 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1461, d)
			}
		} else if yyct1461 == codecSelferValueTypeArray1234 {
			yyl1461 := r.ReadArrayStart()
			if yyl1461 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1462Slc
	var yyhl1462 bool = l >= 0
	for yyj1462 := 0; ; yyj1462++ {
		if yyhl1462 {
			if yyj1462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1462Slc = r.DecodeBytes(yys1462Slc, true, true)
		yys1462 := string(yys1462Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1462 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1464 := z.DecBinary()
				_ = yym1464
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				yym1467 := z.DecBinary()
				_ = yym1467
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1462)
		} // end switch yys1462
	} // end for yyj1462
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1468 int
	var yyb1468 bool
	var yyhl1468 bool = l >= 0
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1470 := z.DecBinary()
		_ = yym1470
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		yym1473 := z.DecBinary()
		_ = yym1473
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj1468++
		if yyhl1468 {
			yyb1468 = yyj1468 > l
		} else {
			yyb1468 = r.CheckBreak()
		}
		if yyb1468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1474 := z.EncBinary()
		_ = yym1474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1475 := !z.EncBinary()
			yy2arr1475 := z.EncBasicHandle().StructToArray
			var yyq1475 [2]bool
			_, _, _ = yysep1475, yyq1475, yy2arr1475
			const yyr1475 bool = false
			yyq1475[1] = x.ObservedGeneration != 0
			var yynn1475 int
			if yyr1475 || yy2arr1475 {
				r.EncodeArrayStart(2)
			} else {
				yynn1475 = 1
				for _, b := range yyq1475 {
					if b {
						yynn1475++
					}
				}
				r.EncodeMapStart(yynn1475)
				yynn1475 = 0
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1477 := z.EncBinary()
				_ = yym1477
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1478 := z.EncBinary()
				_ = yym1478
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[1] {
					yym1480 := z.EncBinary()
					_ = yym1480
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1482 := z.DecBinary()
	_ = yym1482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1483 := r.ContainerType()
		if yyct1483 == codecSelferValueTypeMap1234 {
			yyl1483 := r.ReadMapStart()
			if yyl1483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1483, d)
			}
		} else if yyct1483 == codecSelferValueTypeArray1234 {
			yyl1483 := r.ReadArrayStart()
			if yyl1483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1484Slc
	var yyhl1484 bool = l >= 0
	for yyj1484 := 0; ; yyj1484++ {
		if yyhl1484 {
			if yyj1484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1484Slc = r.DecodeBytes(yys1484Slc, true, true)
		yys1484 := string(yys1484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1484 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1484)
		} // end switch yys1484
	} // end for yyj1484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1487 int
	var yyb1487 bool
	var yyhl1487 bool = l >= 0
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1487++
		if yyhl1487 {
			yyb1487 = yyj1487 > l
		} else {
			yyb1487 = r.CheckBreak()
		}
		if yyb1487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1490 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1491 := &yyv1490
		yy1491.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1492 := *v
	yyh1492, yyl1492 := z.DecSliceHelperStart()
	var yyc1492 bool
	if yyl1492 == 0 {
		if yyv1492 == nil {
			yyv1492 = []HorizontalPodAutoscaler{}
			yyc1492 = true
		} else if len(yyv1492) != 0 {
			yyv1492 = yyv1492[:0]
			yyc1492 = true
		}
	} else if yyl1492 > 0 {
		var yyrr1492, yyrl1492 int
		var yyrt1492 bool
		if yyl1492 > cap(yyv1492) {

			yyrg1492 := len(yyv1492) > 0
			yyv21492 := yyv1492
			yyrl1492, yyrt1492 = z.DecInferLen(yyl1492, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1492 {
				if yyrl1492 <= cap(yyv1492) {
					yyv1492 = yyv1492[:yyrl1492]
				} else {
					yyv1492 = make([]HorizontalPodAutoscaler, yyrl1492)
				}
			} else {
				yyv1492 = make([]HorizontalPodAutoscaler, yyrl1492)
			}
			yyc1492 = true
			yyrr1492 = len(yyv1492)
			if yyrg1492 {
				copy(yyv1492, yyv21492)
			}
		} else if yyl1492 != len(yyv1492) {
			yyv1492 = yyv1492[:yyl1492]
			yyc1492 = true
		}
		yyj1492 := 0
		for ; yyj1492 < yyrr1492; yyj1492++ {
			yyh1492.ElemContainerState(yyj1492)
			if r.TryDecodeAsNil() {
				yyv1492[yyj1492] = HorizontalPodAutoscaler{}
			} else {
				yyv1493 := &yyv1492[yyj1492]
				yyv1493.CodecDecodeSelf(d)
			}

		}
		if yyrt1492 {
			for ; yyj1492 < yyl1492; yyj1492++ {
				yyv1492 = append(yyv1492, HorizontalPodAutoscaler{})
				yyh1492.ElemContainerState(yyj1492)
				if r.TryDecodeAsNil() {
					yyv1492[yyj1492] = HorizontalPodAutoscaler{}
				} else {
					yyv1494 := &yyv1492[yyj1492]
					yyv1494.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1492 := 0
		for ; !r.CheckBreak(); yyj1492++ {

			if yyj1492 >= len(yyv1492) {
				yyv1492 = append(yyv1492, HorizontalPodAutoscaler{}) // var yyz1492 HorizontalPodAutoscaler
				yyc1492 = true
			}
			yyh1492.ElemContainerState(yyj1492)
			if yyj1492 < len(yyv1492) {
				if r.TryDecodeAsNil() {
					yyv1492[yyj1492] = HorizontalPodAutoscaler{}
				} else {
					yyv1495 := &yyv1492[yyj1492]
					yyv1495.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1492 < len(yyv1492) {
			yyv1492 = yyv1492[:yyj1492]
			yyc1492 = true
		} else if yyj1492 == 0 && yyv1492 == nil {
			yyv1492 = []HorizontalPodAutoscaler{}
			yyc1492 = true
		}
	}
	yyh1492.End()
	if yyc1492 {
		*v = yyv1492
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1496 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1497 := &yyv1496
		yy1497.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1498 := *v
	yyh1498, yyl1498 := z.DecSliceHelperStart()
	var yyc1498 bool
	if yyl1498 == 0 {
		if yyv1498 == nil {
			yyv1498 = []APIVersion{}
			yyc1498 = true
		} else if len(yyv1498) != 0 {
			yyv1498 = yyv1498[:0]
			yyc1498 = true
		}
	} else if yyl1498 > 0 {
		var yyrr1498, yyrl1498 int
		var yyrt1498 bool
		if yyl1498 > cap(yyv1498) {

			yyrg1498 := len(yyv1498) > 0
			yyv21498 := yyv1498
			yyrl1498, yyrt1498 = z.DecInferLen(yyl1498, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1498 {
				if yyrl1498 <= cap(yyv1498) {
					yyv1498 = yyv1498[:yyrl1498]
				} else {
					yyv1498 = make([]APIVersion, yyrl1498)
				}
			} else {
				yyv1498 = make([]APIVersion, yyrl1498)
			}
			yyc1498 = true
			yyrr1498 = len(yyv1498)
			if yyrg1498 {
				copy(yyv1498, yyv21498)
			}
		} else if yyl1498 != len(yyv1498) {
			yyv1498 = yyv1498[:yyl1498]
			yyc1498 = true
		}
		yyj1498 := 0
		for ; yyj1498 < yyrr1498; yyj1498++ {
			yyh1498.ElemContainerState(yyj1498)
			if r.TryDecodeAsNil() {
				yyv1498[yyj1498] = APIVersion{}
			} else {
				yyv1499 := &yyv1498[yyj1498]
				yyv1499.CodecDecodeSelf(d)
			}

		}
		if yyrt1498 {
			for ; yyj1498 < yyl1498; yyj1498++ {
				yyv1498 = append(yyv1498, APIVersion{})
				yyh1498.ElemContainerState(yyj1498)
				if r.TryDecodeAsNil() {
					yyv1498[yyj1498] = APIVersion{}
				} else {
					yyv1500 := &yyv1498[yyj1498]
					yyv1500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1498 := 0
		for ; !r.CheckBreak(); yyj1498++ {

			if yyj1498 >= len(yyv1498) {
				yyv1498 = append(yyv1498, APIVersion{}) // var yyz1498 APIVersion
				yyc1498 = true
			}
			yyh1498.ElemContainerState(yyj1498)
			if yyj1498 < len(yyv1498) {
				if r.TryDecodeAsNil() {
					yyv1498[yyj1498] = APIVersion{}
				} else {
					yyv1501 := &yyv1498[yyj1498]
					yyv1501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1498 < len(yyv1498) {
			yyv1498 = yyv1498[:yyj1498]
			yyc1498 = true
		} else if yyj1498 == 0 && yyv1498 == nil {
			yyv1498 = []APIVersion{}
			yyc1498 = true
		}
	}
	yyh1498.End()
	if yyc1498 {
		*v = yyv1498
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1502 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1503 := &yyv1502
		yy1503.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1504 := *v
	yyh1504, yyl1504 := z.DecSliceHelperStart()
	var yyc1504 bool
	if yyl1504 == 0 {
		if yyv1504 == nil {
			yyv1504 = []ThirdPartyResource{}
			yyc1504 = true
		} else if len(yyv1504) != 0 {
			yyv1504 = yyv1504[:0]
			yyc1504 = true
		}
	} else if yyl1504 > 0 {
		var yyrr1504, yyrl1504 int
		var yyrt1504 bool
		if yyl1504 > cap(yyv1504) {

			yyrg1504 := len(yyv1504) > 0
			yyv21504 := yyv1504
			yyrl1504, yyrt1504 = z.DecInferLen(yyl1504, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1504 {
				if yyrl1504 <= cap(yyv1504) {
					yyv1504 = yyv1504[:yyrl1504]
				} else {
					yyv1504 = make([]ThirdPartyResource, yyrl1504)
				}
			} else {
				yyv1504 = make([]ThirdPartyResource, yyrl1504)
			}
			yyc1504 = true
			yyrr1504 = len(yyv1504)
			if yyrg1504 {
				copy(yyv1504, yyv21504)
			}
		} else if yyl1504 != len(yyv1504) {
			yyv1504 = yyv1504[:yyl1504]
			yyc1504 = true
		}
		yyj1504 := 0
		for ; yyj1504 < yyrr1504; yyj1504++ {
			yyh1504.ElemContainerState(yyj1504)
			if r.TryDecodeAsNil() {
				yyv1504[yyj1504] = ThirdPartyResource{}
			} else {
				yyv1505 := &yyv1504[yyj1504]
				yyv1505.CodecDecodeSelf(d)
			}

		}
		if yyrt1504 {
			for ; yyj1504 < yyl1504; yyj1504++ {
				yyv1504 = append(yyv1504, ThirdPartyResource{})
				yyh1504.ElemContainerState(yyj1504)
				if r.TryDecodeAsNil() {
					yyv1504[yyj1504] = ThirdPartyResource{}
				} else {
					yyv1506 := &yyv1504[yyj1504]
					yyv1506.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1504 := 0
		for ; !r.CheckBreak(); yyj1504++ {

			if yyj1504 >= len(yyv1504) {
				yyv1504 = append(yyv1504, ThirdPartyResource{}) // var yyz1504 ThirdPartyResource
				yyc1504 = true
			}
			yyh1504.ElemContainerState(yyj1504)
			if yyj1504 < len(yyv1504) {
				if r.TryDecodeAsNil() {
					yyv1504[yyj1504] = ThirdPartyResource{}
				} else {
					yyv1507 := &yyv1504[yyj1504]
					yyv1507.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1504 < len(yyv1504) {
			yyv1504 = yyv1504[:yyj1504]
			yyc1504 = true
		} else if yyj1504 == 0 && yyv1504 == nil {
			yyv1504 = []ThirdPartyResource{}
			yyc1504 = true
		}
	}
	yyh1504.End()
	if yyc1504 {
		*v = yyv1504
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1508 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1509 := &yyv1508
		yy1509.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1510 := *v
	yyh1510, yyl1510 := z.DecSliceHelperStart()
	var yyc1510 bool
	if yyl1510 == 0 {
		if yyv1510 == nil {
			yyv1510 = []Deployment{}
			yyc1510 = true
		} else if len(yyv1510) != 0 {
			yyv1510 = yyv1510[:0]
			yyc1510 = true
		}
	} else if yyl1510 > 0 {
		var yyrr1510, yyrl1510 int
		var yyrt1510 bool
		if yyl1510 > cap(yyv1510) {

			yyrg1510 := len(yyv1510) > 0
			yyv21510 := yyv1510
			yyrl1510, yyrt1510 = z.DecInferLen(yyl1510, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1510 {
				if yyrl1510 <= cap(yyv1510) {
					yyv1510 = yyv1510[:yyrl1510]
				} else {
					yyv1510 = make([]Deployment, yyrl1510)
				}
			} else {
				yyv1510 = make([]Deployment, yyrl1510)
			}
			yyc1510 = true
			yyrr1510 = len(yyv1510)
			if yyrg1510 {
				copy(yyv1510, yyv21510)
			}
		} else if yyl1510 != len(yyv1510) {
			yyv1510 = yyv1510[:yyl1510]
			yyc1510 = true
		}
		yyj1510 := 0
		for ; yyj1510 < yyrr1510; yyj1510++ {
			yyh1510.ElemContainerState(yyj1510)
			if r.TryDecodeAsNil() {
				yyv1510[yyj1510] = Deployment{}
			} else {
				yyv1511 := &yyv1510[yyj1510]
				yyv1511.CodecDecodeSelf(d)
			}

		}
		if yyrt1510 {
			for ; yyj1510 < yyl1510; yyj1510++ {
				yyv1510 = append(yyv1510, Deployment{})
				yyh1510.ElemContainerState(yyj1510)
				if r.TryDecodeAsNil() {
					yyv1510[yyj1510] = Deployment{}
				} else {
					yyv1512 := &yyv1510[yyj1510]
					yyv1512.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1510 := 0
		for ; !r.CheckBreak(); yyj1510++ {

			if yyj1510 >= len(yyv1510) {
				yyv1510 = append(yyv1510, Deployment{}) // var yyz1510 Deployment
				yyc1510 = true
			}
			yyh1510.ElemContainerState(yyj1510)
			if yyj1510 < len(yyv1510) {
				if r.TryDecodeAsNil() {
					yyv1510[yyj1510] = Deployment{}
				} else {
					yyv1513 := &yyv1510[yyj1510]
					yyv1513.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1510 < len(yyv1510) {
			yyv1510 = yyv1510[:yyj1510]
			yyc1510 = true
		} else if yyj1510 == 0 && yyv1510 == nil {
			yyv1510 = []Deployment{}
			yyc1510 = true
		}
	}
	yyh1510.End()
	if yyc1510 {
		*v = yyv1510
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1514 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1515 := &yyv1514
		yy1515.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1516 := *v
	yyh1516, yyl1516 := z.DecSliceHelperStart()
	var yyc1516 bool
	if yyl1516 == 0 {
		if yyv1516 == nil {
			yyv1516 = []DaemonSet{}
			yyc1516 = true
		} else if len(yyv1516) != 0 {
			yyv1516 = yyv1516[:0]
			yyc1516 = true
		}
	} else if yyl1516 > 0 {
		var yyrr1516, yyrl1516 int
		var yyrt1516 bool
		if yyl1516 > cap(yyv1516) {

			yyrg1516 := len(yyv1516) > 0
			yyv21516 := yyv1516
			yyrl1516, yyrt1516 = z.DecInferLen(yyl1516, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt1516 {
				if yyrl1516 <= cap(yyv1516) {
					yyv1516 = yyv1516[:yyrl1516]
				} else {
					yyv1516 = make([]DaemonSet, yyrl1516)
				}
			} else {
				yyv1516 = make([]DaemonSet, yyrl1516)
			}
			yyc1516 = true
			yyrr1516 = len(yyv1516)
			if yyrg1516 {
				copy(yyv1516, yyv21516)
			}
		} else if yyl1516 != len(yyv1516) {
			yyv1516 = yyv1516[:yyl1516]
			yyc1516 = true
		}
		yyj1516 := 0
		for ; yyj1516 < yyrr1516; yyj1516++ {
			yyh1516.ElemContainerState(yyj1516)
			if r.TryDecodeAsNil() {
				yyv1516[yyj1516] = DaemonSet{}
			} else {
				yyv1517 := &yyv1516[yyj1516]
				yyv1517.CodecDecodeSelf(d)
			}

		}
		if yyrt1516 {
			for ; yyj1516 < yyl1516; yyj1516++ {
				yyv1516 = append(yyv1516, DaemonSet{})
				yyh1516.ElemContainerState(yyj1516)
				if r.TryDecodeAsNil() {
					yyv1516[yyj1516] = DaemonSet{}
				} else {
					yyv1518 := &yyv1516[yyj1516]
					yyv1518.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1516 := 0
		for ; !r.CheckBreak(); yyj1516++ {

			if yyj1516 >= len(yyv1516) {
				yyv1516 = append(yyv1516, DaemonSet{}) // var yyz1516 DaemonSet
				yyc1516 = true
			}
			yyh1516.ElemContainerState(yyj1516)
			if yyj1516 < len(yyv1516) {
				if r.TryDecodeAsNil() {
					yyv1516[yyj1516] = DaemonSet{}
				} else {
					yyv1519 := &yyv1516[yyj1516]
					yyv1519.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1516 < len(yyv1516) {
			yyv1516 = yyv1516[:yyj1516]
			yyc1516 = true
		} else if yyj1516 == 0 && yyv1516 == nil {
			yyv1516 = []DaemonSet{}
			yyc1516 = true
		}
	}
	yyh1516.End()
	if yyc1516 {
		*v = yyv1516
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1520 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1521 := &yyv1520
		yy1521.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1522 := *v
	yyh1522, yyl1522 := z.DecSliceHelperStart()
	var yyc1522 bool
	if yyl1522 == 0 {
		if yyv1522 == nil {
			yyv1522 = []ThirdPartyResourceData{}
			yyc1522 = true
		} else if len(yyv1522) != 0 {
			yyv1522 = yyv1522[:0]
			yyc1522 = true
		}
	} else if yyl1522 > 0 {
		var yyrr1522, yyrl1522 int
		var yyrt1522 bool
		if yyl1522 > cap(yyv1522) {

			yyrg1522 := len(yyv1522) > 0
			yyv21522 := yyv1522
			yyrl1522, yyrt1522 = z.DecInferLen(yyl1522, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1522 {
				if yyrl1522 <= cap(yyv1522) {
					yyv1522 = yyv1522[:yyrl1522]
				} else {
					yyv1522 = make([]ThirdPartyResourceData, yyrl1522)
				}
			} else {
				yyv1522 = make([]ThirdPartyResourceData, yyrl1522)
			}
			yyc1522 = true
			yyrr1522 = len(yyv1522)
			if yyrg1522 {
				copy(yyv1522, yyv21522)
			}
		} else if yyl1522 != len(yyv1522) {
			yyv1522 = yyv1522[:yyl1522]
			yyc1522 = true
		}
		yyj1522 := 0
		for ; yyj1522 < yyrr1522; yyj1522++ {
			yyh1522.ElemContainerState(yyj1522)
			if r.TryDecodeAsNil() {
				yyv1522[yyj1522] = ThirdPartyResourceData{}
			} else {
				yyv1523 := &yyv1522[yyj1522]
				yyv1523.CodecDecodeSelf(d)
			}

		}
		if yyrt1522 {
			for ; yyj1522 < yyl1522; yyj1522++ {
				yyv1522 = append(yyv1522, ThirdPartyResourceData{})
				yyh1522.ElemContainerState(yyj1522)
				if r.TryDecodeAsNil() {
					yyv1522[yyj1522] = ThirdPartyResourceData{}
				} else {
					yyv1524 := &yyv1522[yyj1522]
					yyv1524.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1522 := 0
		for ; !r.CheckBreak(); yyj1522++ {

			if yyj1522 >= len(yyv1522) {
				yyv1522 = append(yyv1522, ThirdPartyResourceData{}) // var yyz1522 ThirdPartyResourceData
				yyc1522 = true
			}
			yyh1522.ElemContainerState(yyj1522)
			if yyj1522 < len(yyv1522) {
				if r.TryDecodeAsNil() {
					yyv1522[yyj1522] = ThirdPartyResourceData{}
				} else {
					yyv1525 := &yyv1522[yyj1522]
					yyv1525.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1522 < len(yyv1522) {
			yyv1522 = yyv1522[:yyj1522]
			yyc1522 = true
		} else if yyj1522 == 0 && yyv1522 == nil {
			yyv1522 = []ThirdPartyResourceData{}
			yyc1522 = true
		}
	}
	yyh1522.End()
	if yyc1522 {
		*v = yyv1522
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1526 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1527 := &yyv1526
		yy1527.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1528 := *v
	yyh1528, yyl1528 := z.DecSliceHelperStart()
	var yyc1528 bool
	if yyl1528 == 0 {
		if yyv1528 == nil {
			yyv1528 = []Job{}
			yyc1528 = true
		} else if len(yyv1528) != 0 {
			yyv1528 = yyv1528[:0]
			yyc1528 = true
		}
	} else if yyl1528 > 0 {
		var yyrr1528, yyrl1528 int
		var yyrt1528 bool
		if yyl1528 > cap(yyv1528) {

			yyrg1528 := len(yyv1528) > 0
			yyv21528 := yyv1528
			yyrl1528, yyrt1528 = z.DecInferLen(yyl1528, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1528 {
				if yyrl1528 <= cap(yyv1528) {
					yyv1528 = yyv1528[:yyrl1528]
				} else {
					yyv1528 = make([]Job, yyrl1528)
				}
			} else {
				yyv1528 = make([]Job, yyrl1528)
			}
			yyc1528 = true
			yyrr1528 = len(yyv1528)
			if yyrg1528 {
				copy(yyv1528, yyv21528)
			}
		} else if yyl1528 != len(yyv1528) {
			yyv1528 = yyv1528[:yyl1528]
			yyc1528 = true
		}
		yyj1528 := 0
		for ; yyj1528 < yyrr1528; yyj1528++ {
			yyh1528.ElemContainerState(yyj1528)
			if r.TryDecodeAsNil() {
				yyv1528[yyj1528] = Job{}
			} else {
				yyv1529 := &yyv1528[yyj1528]
				yyv1529.CodecDecodeSelf(d)
			}

		}
		if yyrt1528 {
			for ; yyj1528 < yyl1528; yyj1528++ {
				yyv1528 = append(yyv1528, Job{})
				yyh1528.ElemContainerState(yyj1528)
				if r.TryDecodeAsNil() {
					yyv1528[yyj1528] = Job{}
				} else {
					yyv1530 := &yyv1528[yyj1528]
					yyv1530.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1528 := 0
		for ; !r.CheckBreak(); yyj1528++ {

			if yyj1528 >= len(yyv1528) {
				yyv1528 = append(yyv1528, Job{}) // var yyz1528 Job
				yyc1528 = true
			}
			yyh1528.ElemContainerState(yyj1528)
			if yyj1528 < len(yyv1528) {
				if r.TryDecodeAsNil() {
					yyv1528[yyj1528] = Job{}
				} else {
					yyv1531 := &yyv1528[yyj1528]
					yyv1531.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1528 < len(yyv1528) {
			yyv1528 = yyv1528[:yyj1528]
			yyc1528 = true
		} else if yyj1528 == 0 && yyv1528 == nil {
			yyv1528 = []Job{}
			yyc1528 = true
		}
	}
	yyh1528.End()
	if yyc1528 {
		*v = yyv1528
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1532 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1533 := &yyv1532
		yy1533.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1534 := *v
	yyh1534, yyl1534 := z.DecSliceHelperStart()
	var yyc1534 bool
	if yyl1534 == 0 {
		if yyv1534 == nil {
			yyv1534 = []JobCondition{}
			yyc1534 = true
		} else if len(yyv1534) != 0 {
			yyv1534 = yyv1534[:0]
			yyc1534 = true
		}
	} else if yyl1534 > 0 {
		var yyrr1534, yyrl1534 int
		var yyrt1534 bool
		if yyl1534 > cap(yyv1534) {

			yyrg1534 := len(yyv1534) > 0
			yyv21534 := yyv1534
			yyrl1534, yyrt1534 = z.DecInferLen(yyl1534, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1534 {
				if yyrl1534 <= cap(yyv1534) {
					yyv1534 = yyv1534[:yyrl1534]
				} else {
					yyv1534 = make([]JobCondition, yyrl1534)
				}
			} else {
				yyv1534 = make([]JobCondition, yyrl1534)
			}
			yyc1534 = true
			yyrr1534 = len(yyv1534)
			if yyrg1534 {
				copy(yyv1534, yyv21534)
			}
		} else if yyl1534 != len(yyv1534) {
			yyv1534 = yyv1534[:yyl1534]
			yyc1534 = true
		}
		yyj1534 := 0
		for ; yyj1534 < yyrr1534; yyj1534++ {
			yyh1534.ElemContainerState(yyj1534)
			if r.TryDecodeAsNil() {
				yyv1534[yyj1534] = JobCondition{}
			} else {
				yyv1535 := &yyv1534[yyj1534]
				yyv1535.CodecDecodeSelf(d)
			}

		}
		if yyrt1534 {
			for ; yyj1534 < yyl1534; yyj1534++ {
				yyv1534 = append(yyv1534, JobCondition{})
				yyh1534.ElemContainerState(yyj1534)
				if r.TryDecodeAsNil() {
					yyv1534[yyj1534] = JobCondition{}
				} else {
					yyv1536 := &yyv1534[yyj1534]
					yyv1536.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1534 := 0
		for ; !r.CheckBreak(); yyj1534++ {

			if yyj1534 >= len(yyv1534) {
				yyv1534 = append(yyv1534, JobCondition{}) // var yyz1534 JobCondition
				yyc1534 = true
			}
			yyh1534.ElemContainerState(yyj1534)
			if yyj1534 < len(yyv1534) {
				if r.TryDecodeAsNil() {
					yyv1534[yyj1534] = JobCondition{}
				} else {
					yyv1537 := &yyv1534[yyj1534]
					yyv1537.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1534 < len(yyv1534) {
			yyv1534 = yyv1534[:yyj1534]
			yyc1534 = true
		} else if yyj1534 == 0 && yyv1534 == nil {
			yyv1534 = []JobCondition{}
			yyc1534 = true
		}
	}
	yyh1534.End()
	if yyc1534 {
		*v = yyv1534
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1538 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1539 := &yyv1538
		yy1539.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1540 := *v
	yyh1540, yyl1540 := z.DecSliceHelperStart()
	var yyc1540 bool
	if yyl1540 == 0 {
		if yyv1540 == nil {
			yyv1540 = []Ingress{}
			yyc1540 = true
		} else if len(yyv1540) != 0 {
			yyv1540 = yyv1540[:0]
			yyc1540 = true
		}
	} else if yyl1540 > 0 {
		var yyrr1540, yyrl1540 int
		var yyrt1540 bool
		if yyl1540 > cap(yyv1540) {

			yyrg1540 := len(yyv1540) > 0
			yyv21540 := yyv1540
			yyrl1540, yyrt1540 = z.DecInferLen(yyl1540, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1540 {
				if yyrl1540 <= cap(yyv1540) {
					yyv1540 = yyv1540[:yyrl1540]
				} else {
					yyv1540 = make([]Ingress, yyrl1540)
				}
			} else {
				yyv1540 = make([]Ingress, yyrl1540)
			}
			yyc1540 = true
			yyrr1540 = len(yyv1540)
			if yyrg1540 {
				copy(yyv1540, yyv21540)
			}
		} else if yyl1540 != len(yyv1540) {
			yyv1540 = yyv1540[:yyl1540]
			yyc1540 = true
		}
		yyj1540 := 0
		for ; yyj1540 < yyrr1540; yyj1540++ {
			yyh1540.ElemContainerState(yyj1540)
			if r.TryDecodeAsNil() {
				yyv1540[yyj1540] = Ingress{}
			} else {
				yyv1541 := &yyv1540[yyj1540]
				yyv1541.CodecDecodeSelf(d)
			}

		}
		if yyrt1540 {
			for ; yyj1540 < yyl1540; yyj1540++ {
				yyv1540 = append(yyv1540, Ingress{})
				yyh1540.ElemContainerState(yyj1540)
				if r.TryDecodeAsNil() {
					yyv1540[yyj1540] = Ingress{}
				} else {
					yyv1542 := &yyv1540[yyj1540]
					yyv1542.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1540 := 0
		for ; !r.CheckBreak(); yyj1540++ {

			if yyj1540 >= len(yyv1540) {
				yyv1540 = append(yyv1540, Ingress{}) // var yyz1540 Ingress
				yyc1540 = true
			}
			yyh1540.ElemContainerState(yyj1540)
			if yyj1540 < len(yyv1540) {
				if r.TryDecodeAsNil() {
					yyv1540[yyj1540] = Ingress{}
				} else {
					yyv1543 := &yyv1540[yyj1540]
					yyv1543.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1540 < len(yyv1540) {
			yyv1540 = yyv1540[:yyj1540]
			yyc1540 = true
		} else if yyj1540 == 0 && yyv1540 == nil {
			yyv1540 = []Ingress{}
			yyc1540 = true
		}
	}
	yyh1540.End()
	if yyc1540 {
		*v = yyv1540
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1545 := &yyv1544
		yy1545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1546 := *v
	yyh1546, yyl1546 := z.DecSliceHelperStart()
	var yyc1546 bool
	if yyl1546 == 0 {
		if yyv1546 == nil {
			yyv1546 = []IngressRule{}
			yyc1546 = true
		} else if len(yyv1546) != 0 {
			yyv1546 = yyv1546[:0]
			yyc1546 = true
		}
	} else if yyl1546 > 0 {
		var yyrr1546, yyrl1546 int
		var yyrt1546 bool
		if yyl1546 > cap(yyv1546) {

			yyrg1546 := len(yyv1546) > 0
			yyv21546 := yyv1546
			yyrl1546, yyrt1546 = z.DecInferLen(yyl1546, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1546 {
				if yyrl1546 <= cap(yyv1546) {
					yyv1546 = yyv1546[:yyrl1546]
				} else {
					yyv1546 = make([]IngressRule, yyrl1546)
				}
			} else {
				yyv1546 = make([]IngressRule, yyrl1546)
			}
			yyc1546 = true
			yyrr1546 = len(yyv1546)
			if yyrg1546 {
				copy(yyv1546, yyv21546)
			}
		} else if yyl1546 != len(yyv1546) {
			yyv1546 = yyv1546[:yyl1546]
			yyc1546 = true
		}
		yyj1546 := 0
		for ; yyj1546 < yyrr1546; yyj1546++ {
			yyh1546.ElemContainerState(yyj1546)
			if r.TryDecodeAsNil() {
				yyv1546[yyj1546] = IngressRule{}
			} else {
				yyv1547 := &yyv1546[yyj1546]
				yyv1547.CodecDecodeSelf(d)
			}

		}
		if yyrt1546 {
			for ; yyj1546 < yyl1546; yyj1546++ {
				yyv1546 = append(yyv1546, IngressRule{})
				yyh1546.ElemContainerState(yyj1546)
				if r.TryDecodeAsNil() {
					yyv1546[yyj1546] = IngressRule{}
				} else {
					yyv1548 := &yyv1546[yyj1546]
					yyv1548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1546 := 0
		for ; !r.CheckBreak(); yyj1546++ {

			if yyj1546 >= len(yyv1546) {
				yyv1546 = append(yyv1546, IngressRule{}) // var yyz1546 IngressRule
				yyc1546 = true
			}
			yyh1546.ElemContainerState(yyj1546)
			if yyj1546 < len(yyv1546) {
				if r.TryDecodeAsNil() {
					yyv1546[yyj1546] = IngressRule{}
				} else {
					yyv1549 := &yyv1546[yyj1546]
					yyv1549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1546 < len(yyv1546) {
			yyv1546 = yyv1546[:yyj1546]
			yyc1546 = true
		} else if yyj1546 == 0 && yyv1546 == nil {
			yyv1546 = []IngressRule{}
			yyc1546 = true
		}
	}
	yyh1546.End()
	if yyc1546 {
		*v = yyv1546
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1551 := &yyv1550
		yy1551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1552 := *v
	yyh1552, yyl1552 := z.DecSliceHelperStart()
	var yyc1552 bool
	if yyl1552 == 0 {
		if yyv1552 == nil {
			yyv1552 = []HTTPIngressPath{}
			yyc1552 = true
		} else if len(yyv1552) != 0 {
			yyv1552 = yyv1552[:0]
			yyc1552 = true
		}
	} else if yyl1552 > 0 {
		var yyrr1552, yyrl1552 int
		var yyrt1552 bool
		if yyl1552 > cap(yyv1552) {

			yyrg1552 := len(yyv1552) > 0
			yyv21552 := yyv1552
			yyrl1552, yyrt1552 = z.DecInferLen(yyl1552, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1552 {
				if yyrl1552 <= cap(yyv1552) {
					yyv1552 = yyv1552[:yyrl1552]
				} else {
					yyv1552 = make([]HTTPIngressPath, yyrl1552)
				}
			} else {
				yyv1552 = make([]HTTPIngressPath, yyrl1552)
			}
			yyc1552 = true
			yyrr1552 = len(yyv1552)
			if yyrg1552 {
				copy(yyv1552, yyv21552)
			}
		} else if yyl1552 != len(yyv1552) {
			yyv1552 = yyv1552[:yyl1552]
			yyc1552 = true
		}
		yyj1552 := 0
		for ; yyj1552 < yyrr1552; yyj1552++ {
			yyh1552.ElemContainerState(yyj1552)
			if r.TryDecodeAsNil() {
				yyv1552[yyj1552] = HTTPIngressPath{}
			} else {
				yyv1553 := &yyv1552[yyj1552]
				yyv1553.CodecDecodeSelf(d)
			}

		}
		if yyrt1552 {
			for ; yyj1552 < yyl1552; yyj1552++ {
				yyv1552 = append(yyv1552, HTTPIngressPath{})
				yyh1552.ElemContainerState(yyj1552)
				if r.TryDecodeAsNil() {
					yyv1552[yyj1552] = HTTPIngressPath{}
				} else {
					yyv1554 := &yyv1552[yyj1552]
					yyv1554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1552 := 0
		for ; !r.CheckBreak(); yyj1552++ {

			if yyj1552 >= len(yyv1552) {
				yyv1552 = append(yyv1552, HTTPIngressPath{}) // var yyz1552 HTTPIngressPath
				yyc1552 = true
			}
			yyh1552.ElemContainerState(yyj1552)
			if yyj1552 < len(yyv1552) {
				if r.TryDecodeAsNil() {
					yyv1552[yyj1552] = HTTPIngressPath{}
				} else {
					yyv1555 := &yyv1552[yyj1552]
					yyv1555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1552 < len(yyv1552) {
			yyv1552 = yyv1552[:yyj1552]
			yyc1552 = true
		} else if yyj1552 == 0 && yyv1552 == nil {
			yyv1552 = []HTTPIngressPath{}
			yyc1552 = true
		}
	}
	yyh1552.End()
	if yyc1552 {
		*v = yyv1552
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1557 := &yyv1556
		yy1557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1558 := *v
	yyh1558, yyl1558 := z.DecSliceHelperStart()
	var yyc1558 bool
	if yyl1558 == 0 {
		if yyv1558 == nil {
			yyv1558 = []NodeUtilization{}
			yyc1558 = true
		} else if len(yyv1558) != 0 {
			yyv1558 = yyv1558[:0]
			yyc1558 = true
		}
	} else if yyl1558 > 0 {
		var yyrr1558, yyrl1558 int
		var yyrt1558 bool
		if yyl1558 > cap(yyv1558) {

			yyrg1558 := len(yyv1558) > 0
			yyv21558 := yyv1558
			yyrl1558, yyrt1558 = z.DecInferLen(yyl1558, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1558 {
				if yyrl1558 <= cap(yyv1558) {
					yyv1558 = yyv1558[:yyrl1558]
				} else {
					yyv1558 = make([]NodeUtilization, yyrl1558)
				}
			} else {
				yyv1558 = make([]NodeUtilization, yyrl1558)
			}
			yyc1558 = true
			yyrr1558 = len(yyv1558)
			if yyrg1558 {
				copy(yyv1558, yyv21558)
			}
		} else if yyl1558 != len(yyv1558) {
			yyv1558 = yyv1558[:yyl1558]
			yyc1558 = true
		}
		yyj1558 := 0
		for ; yyj1558 < yyrr1558; yyj1558++ {
			yyh1558.ElemContainerState(yyj1558)
			if r.TryDecodeAsNil() {
				yyv1558[yyj1558] = NodeUtilization{}
			} else {
				yyv1559 := &yyv1558[yyj1558]
				yyv1559.CodecDecodeSelf(d)
			}

		}
		if yyrt1558 {
			for ; yyj1558 < yyl1558; yyj1558++ {
				yyv1558 = append(yyv1558, NodeUtilization{})
				yyh1558.ElemContainerState(yyj1558)
				if r.TryDecodeAsNil() {
					yyv1558[yyj1558] = NodeUtilization{}
				} else {
					yyv1560 := &yyv1558[yyj1558]
					yyv1560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1558 := 0
		for ; !r.CheckBreak(); yyj1558++ {

			if yyj1558 >= len(yyv1558) {
				yyv1558 = append(yyv1558, NodeUtilization{}) // var yyz1558 NodeUtilization
				yyc1558 = true
			}
			yyh1558.ElemContainerState(yyj1558)
			if yyj1558 < len(yyv1558) {
				if r.TryDecodeAsNil() {
					yyv1558[yyj1558] = NodeUtilization{}
				} else {
					yyv1561 := &yyv1558[yyj1558]
					yyv1561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1558 < len(yyv1558) {
			yyv1558 = yyv1558[:yyj1558]
			yyc1558 = true
		} else if yyj1558 == 0 && yyv1558 == nil {
			yyv1558 = []NodeUtilization{}
			yyc1558 = true
		}
	}
	yyh1558.End()
	if yyc1558 {
		*v = yyv1558
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1563 := &yyv1562
		yy1563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1564 := *v
	yyh1564, yyl1564 := z.DecSliceHelperStart()
	var yyc1564 bool
	if yyl1564 == 0 {
		if yyv1564 == nil {
			yyv1564 = []ClusterAutoscaler{}
			yyc1564 = true
		} else if len(yyv1564) != 0 {
			yyv1564 = yyv1564[:0]
			yyc1564 = true
		}
	} else if yyl1564 > 0 {
		var yyrr1564, yyrl1564 int
		var yyrt1564 bool
		if yyl1564 > cap(yyv1564) {

			yyrg1564 := len(yyv1564) > 0
			yyv21564 := yyv1564
			yyrl1564, yyrt1564 = z.DecInferLen(yyl1564, z.DecBasicHandle().MaxInitLen, 224)
			if yyrt1564 {
				if yyrl1564 <= cap(yyv1564) {
					yyv1564 = yyv1564[:yyrl1564]
				} else {
					yyv1564 = make([]ClusterAutoscaler, yyrl1564)
				}
			} else {
				yyv1564 = make([]ClusterAutoscaler, yyrl1564)
			}
			yyc1564 = true
			yyrr1564 = len(yyv1564)
			if yyrg1564 {
				copy(yyv1564, yyv21564)
			}
		} else if yyl1564 != len(yyv1564) {
			yyv1564 = yyv1564[:yyl1564]
			yyc1564 = true
		}
		yyj1564 := 0
		for ; yyj1564 < yyrr1564; yyj1564++ {
			yyh1564.ElemContainerState(yyj1564)
			if r.TryDecodeAsNil() {
				yyv1564[yyj1564] = ClusterAutoscaler{}
			} else {
				yyv1565 := &yyv1564[yyj1564]
				yyv1565.CodecDecodeSelf(d)
			}

		}
		if yyrt1564 {
			for ; yyj1564 < yyl1564; yyj1564++ {
				yyv1564 = append(yyv1564, ClusterAutoscaler{})
				yyh1564.ElemContainerState(yyj1564)
				if r.TryDecodeAsNil() {
					yyv1564[yyj1564] = ClusterAutoscaler{}
				} else {
					yyv1566 := &yyv1564[yyj1564]
					yyv1566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1564 := 0
		for ; !r.CheckBreak(); yyj1564++ {

			if yyj1564 >= len(yyv1564) {
				yyv1564 = append(yyv1564, ClusterAutoscaler{}) // var yyz1564 ClusterAutoscaler
				yyc1564 = true
			}
			yyh1564.ElemContainerState(yyj1564)
			if yyj1564 < len(yyv1564) {
				if r.TryDecodeAsNil() {
					yyv1564[yyj1564] = ClusterAutoscaler{}
				} else {
					yyv1567 := &yyv1564[yyj1564]
					yyv1567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1564 < len(yyv1564) {
			yyv1564 = yyv1564[:yyj1564]
			yyc1564 = true
		} else if yyj1564 == 0 && yyv1564 == nil {
			yyv1564 = []ClusterAutoscaler{}
			yyc1564 = true
		}
	}
	yyh1564.End()
	if yyc1564 {
		*v = yyv1564
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1569 := &yyv1568
		yy1569.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1570 := *v
	yyh1570, yyl1570 := z.DecSliceHelperStart()
	var yyc1570 bool
	if yyl1570 == 0 {
		if yyv1570 == nil {
			yyv1570 = []LabelSelectorRequirement{}
			yyc1570 = true
		} else if len(yyv1570) != 0 {
			yyv1570 = yyv1570[:0]
			yyc1570 = true
		}
	} else if yyl1570 > 0 {
		var yyrr1570, yyrl1570 int
		var yyrt1570 bool
		if yyl1570 > cap(yyv1570) {

			yyrg1570 := len(yyv1570) > 0
			yyv21570 := yyv1570
			yyrl1570, yyrt1570 = z.DecInferLen(yyl1570, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1570 {
				if yyrl1570 <= cap(yyv1570) {
					yyv1570 = yyv1570[:yyrl1570]
				} else {
					yyv1570 = make([]LabelSelectorRequirement, yyrl1570)
				}
			} else {
				yyv1570 = make([]LabelSelectorRequirement, yyrl1570)
			}
			yyc1570 = true
			yyrr1570 = len(yyv1570)
			if yyrg1570 {
				copy(yyv1570, yyv21570)
			}
		} else if yyl1570 != len(yyv1570) {
			yyv1570 = yyv1570[:yyl1570]
			yyc1570 = true
		}
		yyj1570 := 0
		for ; yyj1570 < yyrr1570; yyj1570++ {
			yyh1570.ElemContainerState(yyj1570)
			if r.TryDecodeAsNil() {
				yyv1570[yyj1570] = LabelSelectorRequirement{}
			} else {
				yyv1571 := &yyv1570[yyj1570]
				yyv1571.CodecDecodeSelf(d)
			}

		}
		if yyrt1570 {
			for ; yyj1570 < yyl1570; yyj1570++ {
				yyv1570 = append(yyv1570, LabelSelectorRequirement{})
				yyh1570.ElemContainerState(yyj1570)
				if r.TryDecodeAsNil() {
					yyv1570[yyj1570] = LabelSelectorRequirement{}
				} else {
					yyv1572 := &yyv1570[yyj1570]
					yyv1572.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1570 := 0
		for ; !r.CheckBreak(); yyj1570++ {

			if yyj1570 >= len(yyv1570) {
				yyv1570 = append(yyv1570, LabelSelectorRequirement{}) // var yyz1570 LabelSelectorRequirement
				yyc1570 = true
			}
			yyh1570.ElemContainerState(yyj1570)
			if yyj1570 < len(yyv1570) {
				if r.TryDecodeAsNil() {
					yyv1570[yyj1570] = LabelSelectorRequirement{}
				} else {
					yyv1573 := &yyv1570[yyj1570]
					yyv1573.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1570 < len(yyv1570) {
			yyv1570 = yyv1570[:yyj1570]
			yyc1570 = true
		} else if yyj1570 == 0 && yyv1570 == nil {
			yyv1570 = []LabelSelectorRequirement{}
			yyc1570 = true
		}
	}
	yyh1570.End()
	if yyc1570 {
		*v = yyv1570
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1574 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1575 := &yyv1574
		yy1575.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1576 := *v
	yyh1576, yyl1576 := z.DecSliceHelperStart()
	var yyc1576 bool
	if yyl1576 == 0 {
		if yyv1576 == nil {
			yyv1576 = []ConfigMap{}
			yyc1576 = true
		} else if len(yyv1576) != 0 {
			yyv1576 = yyv1576[:0]
			yyc1576 = true
		}
	} else if yyl1576 > 0 {
		var yyrr1576, yyrl1576 int
		var yyrt1576 bool
		if yyl1576 > cap(yyv1576) {

			yyrg1576 := len(yyv1576) > 0
			yyv21576 := yyv1576
			yyrl1576, yyrt1576 = z.DecInferLen(yyl1576, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt1576 {
				if yyrl1576 <= cap(yyv1576) {
					yyv1576 = yyv1576[:yyrl1576]
				} else {
					yyv1576 = make([]ConfigMap, yyrl1576)
				}
			} else {
				yyv1576 = make([]ConfigMap, yyrl1576)
			}
			yyc1576 = true
			yyrr1576 = len(yyv1576)
			if yyrg1576 {
				copy(yyv1576, yyv21576)
			}
		} else if yyl1576 != len(yyv1576) {
			yyv1576 = yyv1576[:yyl1576]
			yyc1576 = true
		}
		yyj1576 := 0
		for ; yyj1576 < yyrr1576; yyj1576++ {
			yyh1576.ElemContainerState(yyj1576)
			if r.TryDecodeAsNil() {
				yyv1576[yyj1576] = ConfigMap{}
			} else {
				yyv1577 := &yyv1576[yyj1576]
				yyv1577.CodecDecodeSelf(d)
			}

		}
		if yyrt1576 {
			for ; yyj1576 < yyl1576; yyj1576++ {
				yyv1576 = append(yyv1576, ConfigMap{})
				yyh1576.ElemContainerState(yyj1576)
				if r.TryDecodeAsNil() {
					yyv1576[yyj1576] = ConfigMap{}
				} else {
					yyv1578 := &yyv1576[yyj1576]
					yyv1578.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1576 := 0
		for ; !r.CheckBreak(); yyj1576++ {

			if yyj1576 >= len(yyv1576) {
				yyv1576 = append(yyv1576, ConfigMap{}) // var yyz1576 ConfigMap
				yyc1576 = true
			}
			yyh1576.ElemContainerState(yyj1576)
			if yyj1576 < len(yyv1576) {
				if r.TryDecodeAsNil() {
					yyv1576[yyj1576] = ConfigMap{}
				} else {
					yyv1579 := &yyv1576[yyj1576]
					yyv1579.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1576 < len(yyv1576) {
			yyv1576 = yyv1576[:yyj1576]
			yyc1576 = true
		} else if yyj1576 == 0 && yyv1576 == nil {
			yyv1576 = []ConfigMap{}
			yyc1576 = true
		}
	}
	yyh1576.End()
	if yyc1576 {
		*v = yyv1576
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1580 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1581 := &yyv1580
		yy1581.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1582 := *v
	yyh1582, yyl1582 := z.DecSliceHelperStart()
	var yyc1582 bool
	if yyl1582 == 0 {
		if yyv1582 == nil {
			yyv1582 = []ReplicaSet{}
			yyc1582 = true
		} else if len(yyv1582) != 0 {
			yyv1582 = yyv1582[:0]
			yyc1582 = true
		}
	} else if yyl1582 > 0 {
		var yyrr1582, yyrl1582 int
		var yyrt1582 bool
		if yyl1582 > cap(yyv1582) {

			yyrg1582 := len(yyv1582) > 0
			yyv21582 := yyv1582
			yyrl1582, yyrt1582 = z.DecInferLen(yyl1582, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1582 {
				if yyrl1582 <= cap(yyv1582) {
					yyv1582 = yyv1582[:yyrl1582]
				} else {
					yyv1582 = make([]ReplicaSet, yyrl1582)
				}
			} else {
				yyv1582 = make([]ReplicaSet, yyrl1582)
			}
			yyc1582 = true
			yyrr1582 = len(yyv1582)
			if yyrg1582 {
				copy(yyv1582, yyv21582)
			}
		} else if yyl1582 != len(yyv1582) {
			yyv1582 = yyv1582[:yyl1582]
			yyc1582 = true
		}
		yyj1582 := 0
		for ; yyj1582 < yyrr1582; yyj1582++ {
			yyh1582.ElemContainerState(yyj1582)
			if r.TryDecodeAsNil() {
				yyv1582[yyj1582] = ReplicaSet{}
			} else {
				yyv1583 := &yyv1582[yyj1582]
				yyv1583.CodecDecodeSelf(d)
			}

		}
		if yyrt1582 {
			for ; yyj1582 < yyl1582; yyj1582++ {
				yyv1582 = append(yyv1582, ReplicaSet{})
				yyh1582.ElemContainerState(yyj1582)
				if r.TryDecodeAsNil() {
					yyv1582[yyj1582] = ReplicaSet{}
				} else {
					yyv1584 := &yyv1582[yyj1582]
					yyv1584.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1582 := 0
		for ; !r.CheckBreak(); yyj1582++ {

			if yyj1582 >= len(yyv1582) {
				yyv1582 = append(yyv1582, ReplicaSet{}) // var yyz1582 ReplicaSet
				yyc1582 = true
			}
			yyh1582.ElemContainerState(yyj1582)
			if yyj1582 < len(yyv1582) {
				if r.TryDecodeAsNil() {
					yyv1582[yyj1582] = ReplicaSet{}
				} else {
					yyv1585 := &yyv1582[yyj1582]
					yyv1585.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1582 < len(yyv1582) {
			yyv1582 = yyv1582[:yyj1582]
			yyc1582 = true
		} else if yyj1582 == 0 && yyv1582 == nil {
			yyv1582 = []ReplicaSet{}
			yyc1582 = true
		}
	}
	yyh1582.End()
	if yyc1582 {
		*v = yyv1582
	}
}
